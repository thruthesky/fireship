{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fireship","text":"<p>A lightning-fast, robust CMS for seamless real-time content management. Powered by Firebase, Fireship simplifies user data, post, and chat management. Build robust social apps with ease and speed, leaving complexities behind.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>User</li> <li>Chat</li> <li>Forum</li> <li>Push notification</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>See the following documents:</p> <ul> <li>English Guideline</li> <li>\ud55c\uad6d\uc5b4 \ub9e4\ub274\uc5bc</li> </ul>"},{"location":"assets/realtime_database_security/","title":"Realtime database security","text":"<pre><code>{\n  \"rules\": {\n\n\n    \"test\": {\n      \".read\": true,\n      \".write\": true\n    },\n          // Action\n    \"action\": {\n      \"$uid\": {\n        \".read\": true,\n        \".write\": \"$uid === auth.uid\"\n      }\n    },\n    // Activity\n    \"activity\": {\n      \"$uid\": {\n        \".read\": true,\n        \".write\": \"$uid === auth.uid\"\n      }\n    },\n    // Fireship admins\n    \"admins\": {\n      \".read\": true,\n      \".indexOn\": \".value\"\n    },\n    // Fireship users\n    \"users\": {\n      \".read\": true,\n      \"$uid\": {\n        \".write\": \"$uid === auth.uid || root.child('admins').hasChild(auth.uid)\",\n        \"isAdmin\": {\n          \".validate\": \"root.child('admins').hasChild(auth.uid)\"\n        }\n      },\n      \".indexOn\": [\"gender\",\"nationality\",\"region\", \"birthYear\"]\n    },\n    \"user-likes\": {\n      \".read\": true,\n    },\n    \"user-who-i-like\": {\n      \".read\": true,\n      \".write\": true\n    },\n    // Fireship - users who have profile photos. To display users who has profile photo.\n    \"user-profile-photos\": {\n      \".read\": true,\n      \"$uid\": {\n        \".write\": \"$uid === auth.uid\"\n      },\n      \".indexOn\": [\"updatedAt\"]\n    },\n    \"user-private\": {\n      \"$uid\": {\n        \".read\": \"$uid === auth.uid || root.child('admins').hasChild(auth.uid)\",\n        \".write\": \"$uid === auth.uid\"\n      }\n    },\n\n      // Fireship - device FCM tokens\n    \"user-fcm-tokens\": {\n      \".read\": true,\n        // Token may be deleted by other users if there is error on the token.\n      \".write\": true,\n      \".indexOn\": [\"uid\"]\n    },\n    // Fireship - device FCM tokens\n    \"user-fcm-tokens-test\": {\n      \".read\": true,\n        // Token may be deleted by other users if there is error on the token.\n      \".write\": true,\n      \".indexOn\": [\"uid\"]\n    },\n      // Fireship - user settings\n    \"user-settings\": {\n      \".read\": true,\n      \"$uid\": {\n        \".write\": \"$uid === auth.uid\"\n      }\n    },\n      // Fireship - chat 2023-11-25 RTDB \ub85c \ucc44\ud305 \uc81c\uc791\n    \"chat-messages\": {\n\n      \"$room_id\": {\n          \".read\": \"root.child('chat-rooms').child($room_id).child('users').hasChild(auth.uid)\",\n          \"$message_id\": {\n            // if login and if it's my data, and if I joined the room.\n            \".write\": \"auth != null &amp;&amp; (data.child('uid').val() === auth.uid || newData.child('uid').val() === auth.uid) &amp;&amp; root.child('chat-rooms').child($room_id).child('users').hasChild(auth.uid)\"\n           },\n          \".indexOn\": [\"order\", \"uid\"]\n      }\n    },\n    \"chat-rooms\": {\n      \".read\": true,\n      \"$roomId\": {\n        \".write\": true,\n        \"users\": {\n          \".indexOn\": \".value\"\n        }\n      }\n    },\n    \"chat-joins\": {\n      \".read\": true,\n      \"$uid\": {\n        \".write\": true,\n        \".indexOn\": \"order\"\n      },\n    },\n    // Fireship - posts\n    \"posts\": {\n      \".read\": true,\n      \"$category\": {\n        \".write\": true,\n        \"title\": {\n          \".validate\": \"data.child('uid').val() === auth.uid\"\n        },\n        \"content\": {\n          \".validate\": \"data.child('uid').val() === auth.uid\"\n        },\n        \"uid\": {\n          \".validate\": \"data.child('uid').val() === auth.uid\"\n        },\n        \"urls\": {\n          \".validate\": \"data.child('uid').val() === auth.uid\"\n        },\n          // \uc774\uac83\uc740 Fireflutter \uc5d0\uc11c post \uae00\uc744 \ubcfc \ub54c, \uc790\ub3d9 \uc0dd\uc131\ub418\ub294 \uac83\uc73c\ub85c Fireship \uc5d0\uc11c\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc74c.\n        \"seenBy\": {\n          \".validate\": false\n        }\n      }\n    },\n    \"post-subscriptions\": {\n        \".read\": true,\n        \"$category\": {\n          \"$uid\": {\n            \".write\": \"$uid === auth.uid\"\n          }\n        }\n      },\n\n    // Fireship - post summary\n    \"post-summaries\": {\n      \".read\": true,\n      \".write\": true,\n      \"$category\": {\n        \".indexOn\": [\"order\"]\n      }\n    },\n\n    \"post-all-summaries\": {\n      \".read\": true\n    },\n\n    \"comments\": {\n      \"$postId\": {\n        \".read\": true,\n        \"$commentId\": {\n          // Condition:\n          // Create and Update must be done by anyone. noOfLikes field and other fields.\n          // Delete must be done by owner.\n          \".write\": \"(newData.exists() &amp;&amp; auth.uid !== null) || (!newData.exists() &amp;&amp; data.child('uid').val() === auth.uid)\",\n          \"content\": {\n            // Anyone can create or owner can update/delete.\n            \".validate\": \"!data.exists() || data.parent().child('uid').val() === auth.uid\"\n          },\n          \"uid\": {\n            \".validate\": \"!data.exists() || data.val() === auth.uid\"\n          },\n          \"urls\": {\n            // \n            \".validate\": \"!data.exists() || data.parent().child('uid').val() === auth.uid\"\n          }\n        },\n        \".indexOn\" : [\"order\"]  \n      }\n    },\n    \"bookmarks\": {\n      \"$uid\": {\n        \".read\": \"$uid == auth.uid\",\n        \".write\": \"$uid == auth.uid\"\n      }\n    },\n    // Fireship - reports\n    \"reports\": {\n        \".read\": true,\n        \"$id\": {\n          \".write\": \"newData.child('uid').val() === auth.uid || root.child('admins').hasChild(auth.uid)\",\n          \".indexOn\": [\"uid\"]\n        }\n    }\n\n  }\n}\n</code></pre>"},{"location":"english/","title":"Fireship","text":"<p>Fireship is a fast and powerful Flutter CMS library for real-time content management using Firebase Realtime Database.</p>"},{"location":"english/#installation","title":"Installation","text":"<p>See install.md</p>"},{"location":"english/#database","title":"Database","text":"<p>Reference: Database</p>"},{"location":"english/#user","title":"User","text":"<p>Reference: User Coding Manual</p>"},{"location":"english/#sorting-ordering","title":"Sorting / Ordering","text":"<p>When sorting, the sorting field and value are stored in a separate node. For example, if you want to list users who uploaded photos in order of registration date or in the order they changed their profile pictures</p> <ul> <li>Database Structure Example</li> <li>By doing the following, you can list users with profile pictures in the order they modified their photos.</li> </ul> <p><code>/user-profile-photos/&lt;uid&gt;/ { updatedAt: ..., photoUrl: ... }</code></p>"},{"location":"english/#design-concept","title":"Design Concept","text":""},{"location":"english/#ui-design-customization","title":"UI Design Customization","text":"<p>Fireship provides a default design that can be completely customized.</p> <p>You may want to view a user's profile in various places in the app. For example, in a chat room, in a user list, or when clicking on a user's photo in a forum post/comment, you can show the user's public profile. In this case, by simply calling the <code>UserService.instance.showPublicProfileScreen(uid: ...)</code> function uniformly, you can display the user's profile anywhere.</p> <p>If you want to customize the design directly rather than using the default design, you can customize it by calling <code>UserSerivce.instance.init(customize: UserCustomize(...))</code>.</p> <p>The names of customizable widgets start with <code>Default</code>. When customizing, you can simply copy and use the code from Fireship.</p>"},{"location":"english/#messaging","title":"Messaging","text":"<p>As the deprecation of Send messages to multiple devices is stated in the official Firebase Documentation, we will send push notifications in Flutter code.</p>"},{"location":"english/#thumbnails","title":"Thumbnails","text":"<ul> <li>Thumbnails are not used. In the past, thumbnail images were used through the Firebase Extensions Resize Image. However, since compression is applied when uploading images, the image size is not very large. Typically, when uploading images between 3MB and 5MB, they are reduced to 200KB to 300KB in size when uploaded to the client app.</li> </ul>"},{"location":"english/#admin","title":"Admin","text":"<ul> <li>Refer to Admin Documentation</li> </ul>"},{"location":"english/#todo","title":"TODO","text":"<ul> <li>Refer to TODO document.</li> </ul>"},{"location":"english/address/","title":"Address","text":"<p><code>KoreanSiGunGuSelector</code> \uc704\uc82f\uc744 \ud1b5\ud574 \ud55c\uad6d \uad00\uad11 \uacf5\uc0ac API \ub97c \ud1b5\ud574\uc11c, \ud55c\uad6d\uc758 \uc2dc/\ub3c4\uc640 \uc2dc\uad70\uad6c\ub85c \uc9c0\uc5ed\uc744 \uc120\ud0dd \ud560 \uc218 \uc788\ub2e4. \uc774 \ub54c, \uc74d/\uba74/\ub3d9\uc740 \uc548\ub41c\ub2e4.</p> <p>DB \uc5d0 \uc800\uc7a5 \ud560 \ub54c, \ubb38\uc790\uc5f4\ub85c \ub41c \uc2dc/\uad70/\uad6c \uc815\ubcf4\uac00 \uc544\ub2cc rootCode \uc640 secondaryCode \uc22b\uc790\ub97c \uc800\uc7a5\ud574\uc57c \ud55c\ub2e4. \uadf8\ub798\uc57c \uc601\ubb38\uc774\ub098 \ud55c\uae00\ub85c \uac80\uc0c9\uc744 \ud560 \uc218 \uc788\ub2e4.</p> <p>\ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf4\uace0 \ubcf5\uc0ac\ud558\uc5ec \uc218\uc815\ud574\uc11c \uc0ac\uc6a9\ud55c\ub2e4.</p>"},{"location":"english/admin/","title":"Admin","text":""},{"location":"english/admin/#how-to-set-a-user-as-admin","title":"How to set a user as admin","text":"<ol> <li>Add the user uid under <code>/admins</code>.    For instance, if the user uid is <code>abc</code>, then set it like below    <code>/admins/{ abc: master }</code></li> <li>Set the <code>isAdmin</code> to true in the <code>/users/&lt;uid&gt;</code>.</li> </ol>"},{"location":"english/admin/#displaying-the-entire-user-list-and-editing","title":"Displaying the Entire User List and Editing","text":"<p>To display the entire user list, you can simply utilize <code>FirebaseDatabaseListView</code>. For editing user information, you can reference <code>AdminService.instance.showUserList(context: context)</code></p>"},{"location":"english/assets/","title":"Assets","text":"<p>Fireship has some default assets.</p> <ul> <li>https://raw.githubusercontent.com/thruthesky/fireship/main/assets/white.jpg for white background image.</li> <li>https://raw.githubusercontent.com/thruthesky/fireship/main/assets/black.jpg for black backgroudn image.</li> <li>https://raw.githubusercontent.com/thruthesky/fireship/main/assets/anonymous.jpg for displaying anonymous photo.</li> </ul> <p>The url string are saved as <code>whiteUrl</code>, <code>blackUrl</code>, <code>anonymousUrl</code>. You may use these images with CachedNetworkImage.</p> <p>To know more about it, see the <code>lib/common/assets.dart</code> file.</p>"},{"location":"english/building_blocks/","title":"Building blocks","text":"<p>In this chapter, you will learn how to use some of the basic widgets to build your app fast. You may copy the source of the widget and customize for you own need.</p> <p>You can use theme design to change the outlook of the building blocks.</p>"},{"location":"english/building_blocks/#error-handling","title":"Error handling","text":"<p>Some widget may throw exception without any handler. It is recommended to set global error handler to catch all unhandled exceptions like below</p> <pre><code>runZonedGuarded(\n    () async {\n      runApp(const MyApp());\n      /// Flutter error happens here like Overflow, Unbounded height\n      FlutterError.onError = (FlutterErrorDetails details) {\n        FlutterError.dumpErrorToConsole(details);\n      };\n    },\n    zoneErrorHandler,\n  );\n  /// TODO record this error\n  zoneErrorHandler(error, stackTrace) {\n    /// Unhandled exceptions NOT from flutter framework.\n    /// Firebase exceptions or dart(outside flutter) exceptions.\n    /// Error from outside of Flutter will be handled here.\n    print(\"----&gt; runZoneGuarded() : exceptions outside flutter framework.\");\n    print(\"---&gt; runtimeType: ${error.runtimeType}\");\n\n    if (error is FirebaseAuthException) {\n      if (AppService.instance.smsCodeAutoRetrieval) {\n        if (error.code.contains('session-expired') ||\n            error.code.contains('invalid-verification-code')) {\n          print(\"....\");\n          return;\n        }\n      } else {}\n\n      toast(\n          context: context,\n          message: 'Error :  ${error.code} - ${error.message}');\n    } else if (error is FirebaseException) {\n      print(\"FirebaseException :  $error }\");\n    } else {\n      print(\"Unknown Error :  $error\");\n      // toast(context: context, message: \"\ubc31\uc5d4\ub4dc \uc5d0\ub7ec :  ${error.code} - ${error.message}\");\n    }\n    debugPrintStack(stackTrace: stackTrace);\n  }\n</code></pre>"},{"location":"english/building_blocks/#login","title":"Login","text":"<p>For simple login, you can use <code>SimpleEmailPasswordLoginForm</code>.</p>"},{"location":"english/building_blocks/#chat-widgets","title":"Chat widgets","text":"<p>Whatever app that has the chat feature has common screens and widgets.</p>"},{"location":"english/building_blocks/#chat-room-list","title":"Chat room list","text":"<p>To list chat rooms that the login user joined, use <code>DefaultChatRoomListView</code> widget. You can use the options to customize. Or simply copy all the code of the widget and customize with your own code.</p>"},{"location":"english/building_blocks/#chat-room-create","title":"Chat room create","text":""},{"location":"english/chat/","title":"Chat","text":""},{"location":"english/chat/#design-concept","title":"Design Concept","text":"<ul> <li>You can open multiple chat rooms simultaneously.</li> </ul>"},{"location":"english/chat/#chat-database","title":"Chat Database","text":"<ul> <li><code>/chat-rooms</code> stores information about chat rooms.</li> <li><code>/chat-messages</code> stores chat messages.</li> <li> <p><code>/chat-joins</code> indicates who is participating in which chat room. Both <code>/chat-rooms</code> and <code>/chat-joins</code> use the <code>ChatRoomModel</code>.</p> </li> <li> <p><code>noOfUsers</code> is updated in <code>/chat-rooms</code> when a new user joins or leaves a group chat room,</p> <ul> <li>and is updated in <code>/chat-joins</code> when a chat message is sent.</li> </ul> </li> <li> <p>When sending a chat message, if the text contains a URL, information for previewing the URL is extracted. The appropriate values are stored in the following fields below the message:</p> <ul> <li><code>previewUrl</code> - URL</li> <li><code>previewTitle</code> - Title</li> <li><code>previewDescription</code> - Description</li> <li><code>previewImageUrl</code> - Image</li> </ul> </li> </ul>"},{"location":"english/chat/#logic","title":"Logic","text":""},{"location":"english/chat/#get-chatroommodel-on-chatroom","title":"Get ChatRoomModel on ChatRoom","text":"<ul> <li>The complete chat room model instance is needed before display the chat room message. For instance,<ul> <li>to check if the user is in the room,</li> <li>to check if site preview displaying or image displaying options,</li> <li>to show password input box based on the chat room settings,</li> <li>etc</li> </ul> </li> </ul>"},{"location":"english/chat/#order","title":"Order","text":"<ul> <li>Chat message order is sorted by the last message's <code>order</code> field.<ul> <li>It must have a smaller value than the previous message.</li> <li>When you send a chat message programatically without <code>order</code>, the message may be shown at the top.</li> </ul> </li> </ul>"},{"location":"english/chat/#creating-chat-room","title":"Creating Chat Room","text":"<p>A simple way to create a chat room is as follows:</p> <pre><code>ChatModel chat = ChatModel(room: ChatRoomModel.fromRoomdId('all'))..join();\nChatMessageListView(chat: chat);\n</code></pre> <p>Creating a <code>ChatModel</code> alone does not create the chat room. Therefore, <code>join()</code> is called additionally.</p> <p>When join() is called, {[uid]: true} is created in /chat-rooms/all/users.</p> <p>And when the <code>ChatMessageListView</code> widget is displayed on the screen, it internally saves <code>{order: 0}</code> in RTDB <code>chat-joins/all</code> in <code>ChatMessageListView::initState() -&gt; ChatModel::resetNewMessage()</code>.</p> <p>However, if you want to create a chat room more easily, you can use the pre-made <code>ChatService.instance.showChatRoomCreate()</code> function. If you want to customize the design, you can copy and modify <code>DefaultChatRoomEditDialog</code>.</p>"},{"location":"english/chat/#viewing-chat-room","title":"Viewing Chat Room","text":"<p>A <code>ChatRoom()</code> widget can be used to show chat room (room's messages with room input box).</p> <pre><code>// For 1:1 chat room, using other user's uid\nChatRoom(uid: 'user-uid');\n\n...\n\n// Using room-id for 1:1 or group chat room\nChatRoom(roomId: 'room-id');\n\n...\n\n// Using snapshot -&gt; ChatRoomModel\nChatRoomModel chatRoom = ChatRoomModel.fromSnapshot(dataSnapshot);\nChatRoom(room: chatRoom);\n</code></pre>"},{"location":"english/chat/#updating-chat-room","title":"Updating Chat Room","text":"<p>To update a chat room, call <code>ChatService.instance.showChatRoomSettings(roomId: ...)</code>, and use the <code>DefaultChatRoomEditDialog</code> widget, which is the same widget used for creating a chat room.</p> <p>When updating a chat room, you can optionally specify authenticated members and gender. If the <code>gender</code> has a value of <code>M</code> or <code>F</code>, only members of that gender can access (enter) the room. For <code>verified</code>, regardless of gender, if the user is verified, they can access the room. Note that authenticated members and gender refer to user information.</p>"},{"location":"english/chat/#sending-chat-messages","title":"Sending Chat Messages","text":"<p>To send a chat message into a room (or to a user), <code>ChatMessageInputBox()</code> can be used as Input box. You can copy this widget and customize by yourself.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\n// the `chat` should be the model of the room\nChatModel chat = ChatModel(room: room);\n\nChatMessageInputBox(\n  chat: chat,\n),\n</code></pre> <p>You can also send a chat message to a user or to a room programatically (without entering a chat room screen) like below.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\nChatModel chat = ChatModel(room: room);\n\n// This may throw error if user is not logged in.\nchat.sendMessage(text: 'Text Message to send', url: 'photo.url.com');\n\n</code></pre>"},{"location":"english/chat/#getting-chat-messages-in-a-room","title":"Getting Chat Messages in a Room","text":"<p>To display chat messages in a room, <code>ChatMessageListView()</code> can be used.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\n// the `chat` should be the model of the room\nChatModel chat = ChatModel(room: room);\n\nChatMessageListView(\n  chat: chat,\n),\n</code></pre> <p>For customization, these can be used. Edit them as needed:</p> <pre><code>DatabaseReference ref = ChatService.instance.messageRef(roomId: roomId).orderByChild('order');\n\nFirebaseDatabaseQueryBuilder(\n  pageSize: 100,\n  query: ref,\n  builder: (context, snapshot, _) {\n    if (snapshot.isFetching) {\n      return CircularProgressIndicator();\n    }\n    if (snapshot.hasError) {\n      return Text('Something went wrong! ${snapshot.error}');\n    }\n    if (snapshot.docs.isEmpty) {\n      return Center(child: Text('There is no message, yet.'));\n    }\n    // finally return the list\n    return ListView.builder(\n      reverse: true,\n      itemCount: snapshot.docs.length,\n      itemBuilder: (context, index) {\n        if (snapshot.hasMore &amp;&amp; index + 1 == snapshot.docs.length) {\n          snapshot.fetchMore();\n        }\n        final message = ChatMessageModel.fromSnapshot(snapshot.docs[index]);\n\n        /// \ucc44\ud305\ubc29\uc758 \ub9e8 \ub9c8\uc9c0\ub9c9 \uba54\uc2dc\uc9c0\uc758 order \ub97c \uc9c0\uc815.\n        chat.resetRoomMessageOrder(order: message.order);\n\n        return YourCustomChatBubble(\n          message: message,\n        );\n      },\n\n    );\n  },\n);\n\n</code></pre>"},{"location":"english/chat/#opening-the-settings-for-the-chat-room","title":"Opening the Settings for the Chat Room","text":"<p>To open the</p> <pre><code>ChatService.instance.showChatRoomSettings(\n  context: context,\n  roomId: chat.room.id,\n);\n</code></pre>"},{"location":"english/chat/#chat-room-list","title":"\ucc44\ud305\ubc29 \ubaa9\ub85d (Chat Room List)","text":"<p>Due to the characteristics of RTDB, it is challenging to list chat rooms:</p> <ul> <li>My 1:1 chat room list by date</li> <li>My entire chat room list by date</li> <li>Open chat list by date</li> </ul> <p>Therefore, by using <code>isSingleChat</code> with a negative time, you can display my 1:1 chat room list in chronological order. This is the same for <code>isGroupChat</code> and <code>isOpenGroupChat</code>.</p> <p>To display the entire chat room list at once, get all chat rooms and display them. For example, when displaying my 1:1 chat room list, get the entire list and display it in chronological order. Do the same for my entire group chat room and all open chat room. However, this method may not be suitable if each individual's (user's) chat rooms are too numerous. Overall, it seems reasonable to have up to 500 per person. Up to 2,000 should also be acceptable. However, if a user has more than 2,000 rooms, it might be a bit challenging. Therefore, limiting the number of rooms may be one way. Additionally, having more than 2,000 open chats might be problematic.</p> <p>Here is an example code to show chat room list. This will show list of all Chat Rooms by the currently logged in user. Take note that the <code>Field.order</code> is the same as 'order'.</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.joinsRef\n      .child(myUid!)\n      .orderByChild(Field.order),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    if (snapshot.isFetching) {\n      return const Center(child: CircularProgressIndicator());\n    }\n    if (snapshot.hasError) {\n      return Text('Something went wrong! ${snapshot.error}');\n    }\n    if (snapshot.hasMore == false &amp;&amp; snapshot.docs.isEmpty) {\n      return Text('No chat rooms');\n    }\n    return ListView.builder(\n      padding: EdgeInsets.zero,\n      itemCount: snapshot.docs.length,\n      itemBuilder: (context, index) {\n        if (snapshot.hasMore &amp;&amp; index + 1 == snapshot.docs.length) {\n          snapshot.fetchMore();\n        }\n        final room = ChatRoomModel.fromSnapshot(snapshot.docs[index]);\n        return ChatRoomListTile(room: room);\n      },\n    );\n  },\n);\n\n</code></pre>"},{"location":"english/chat/#chat-list-widget","title":"Chat List Widget","text":"<p>Fireship provides a default Widget for displaying a list of Chat Rooms if we don't have to customize it.</p> <p>Chat List is a List view of Chats. We can use this widget to show a list of chats.</p> <pre><code>DefaultChatRoomListView(),\n</code></pre>"},{"location":"english/chat/#querying-specific-type-of-chat-rooms","title":"Querying Specific Type of Chat Rooms","text":"<p>You may want to show specific types of Chat Rooms, like Single Chat Rooms only, Group Chats Only, or Open Group Chats only.</p>"},{"location":"english/chat/#chat-rooms-joined-by-the-currently-logged-in-user-joinsref","title":"Chat Rooms Joined by the Currently Logged in User (joinsRef)","text":"<p>In the earlier example, the query in FirebaseDatabaseQueryBuilder uses <code>Field.order</code>:</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.joinsRef\n      .child(myUid!)\n      .orderByChild(Field.order)\n      .startAt(false),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    ...\n  },\n);\n</code></pre> <p>For <code>ChatService.instance.joinsRef.child(myUid!)</code>, the <code>joinsRef</code> is the reference for the chat rooms. In RTDB the node is <code>chat-joins/user-uid/room-id</code>. Therefore, <code>myUid</code> is required.</p> <p>The <code>Field.order</code> is the same with 'order'. This can be used to get all the group chat that the currently logged in user is joined. Here are the list of fields can be used in <code>joinsRef</code>:</p> <ol> <li><code>Field.order</code> - same as 'order'.</li> <li>All chat room - single or group chat</li> <li><code>Field.singleChatOrder</code> - same as 'singleChatOrder'.</li> <li>All single chat room</li> <li><code>Field.groupChatOrder</code> - same as 'groupChatOrder'.</li> <li>All group chat room</li> </ol>"},{"location":"english/chat/#chat-rooms-not-necessarily-joined-by-the-currently-logged-in-user-roomsref","title":"Chat Rooms not Necessarily Joined by the Currently Logged in User (roomsRef)","text":"<p>For <code>ChatService.instance.roomsRef</code>, the <code>roomsRef</code> is the reference for the chat rooms. In RTDB the node is <code>chat-rooms/roon-id</code>.</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.roomsRef\n      .orderByChild(Field.openGroupChatOrder)\n      .startAt(false),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    ...\n  }\n);\n</code></pre> <p>Here are the list of fields can be used in <code>roomsRef</code>:</p> <ol> <li><code>Field.groupChatOrder</code> - same as 'groupChatOrder'.</li> <li>All group chat room - open or closed</li> <li><code>Field.openGroupChatOrder</code> - same as 'openGroupChatOrder'.</li> <li>All open group chat room</li> </ol>"},{"location":"english/chat/#toggling-notifications","title":"Toggling Notifications","text":"<p>The on and off switch for push notification is set under each user's uid in <code>users</code> field of the chat room. For instance, if the value is <code>true</code> like <code>/chat-rooms/&lt;room-id&gt;/users/ {uid-a: true}</code>, then the user of <code>uid-a</code> will get push notification. If it's <code>false</code>, then the user will not get any push notification.</p> <p>You can set true or false for the login uid in the 'users' field of the chat room like below;</p> <pre><code>IconButton(\n  onPressed: () async {\n    await chat.room.toggleNotifications();\n  },\n  icon: Database(\n    path: Path.chatRoomUsersAt(chat.room.id, myUid!),\n    builder: (v) =&gt; v == true\n        ? const Icon(Icons.notifications_rounded)\n        : const Icon(Icons.notifications_outlined),\n  ),\n),\n</code></pre> <p>When <code>v</code> is true, notifications is toggled on. Else, toggled off.</p>"},{"location":"english/chat/#group-chat-room","title":"Group Chat Room","text":""},{"location":"english/chat/#creating-a-group-chat","title":"Creating a Group Chat","text":"<p>Use <code>ChatService.instance.showChatRoomCreate()</code> for the default way on creating a chat room.</p> <pre><code>\nIconButton(\n  onPressed: () async {\n    final room = await ChatService.instance.showChatRoomCreate(context: context);\n    // It is recommended to show the newly created room to the user.\n    if (room != null &amp;&amp; mounted) {\n      ChatService.instance.showChatRoom(context: context, roomId: room.id);\n    }\n  },\n  icon: const Icon(Icons.comment),\n),\n\n</code></pre> <p>Automatically, creator of the room will join to the newly created room after submitting.</p>"},{"location":"english/chat/#inviting-users-into-a-chat-room","title":"Inviting users into a Chat Room","text":"<p>To show the default invite screen, add these code:</p> <pre><code>IconButton(\n  onPressed: () async {\n    ChatService.instance.showInviteScreen(context: context, room: chat.room);\n  },\n  icon: const Icon(Icons.person_add_rounded),\n),\n</code></pre> <p>The <code>ChatService.instance.showInviteScreen()</code> will show a list of users in a list view who can be added. It uses <code>DefaultChatRoomInviteScreen</code> widget. Check this code for reference in customization:</p> <pre><code>// Showing the list screen\nawait showGeneralDialog&lt;ChatRoomModel?&gt;(\n  context: context,\n  pageBuilder: (_, __, ___) =&gt; CustomChatRoomInviteScreen(room: room),\n);\n...\n// Update this into your custom Invite screen\nclass CustomChatRoomInviteScreen extends StatelessWidget {\n  const CustomChatRoomInviteScreen({\n    super.key,\n    required this.room,\n  });\n  final ChatRoomModel room;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('\uce5c\uad6c \ucd08\ub300'),\n      ),\n      body: FirebaseDatabaseListView(\n        query: Ref.users.orderByChild('order'),\n        itemBuilder: (context, snapshot) {\n          final user = UserModel.fromSnapshot(snapshot);\n          return ListTile(\n            leading: UserAvatar(uid: user.uid),\n            title: Text(user.displayName ?? ''),\n            trailing: const Icon(Icons.add),\n            onTap: () async {\n              await room.invite(user.uid);\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"english/chat/#group-chat-members","title":"Group Chat Members","text":"<p>To show the default members screen, add these code:</p> <pre><code>await ChatService.instance.showMembersScreen(\n  context: context,\n  room: chat.room,\n);\n</code></pre> <p>It uses the <code>DefaultChatRoomMembersScreen(room: room)</code> when it is not customized.</p>"},{"location":"english/chat/#removing-a-group-chat-member","title":"Removing a Group Chat Member","text":"<p>Here is an example of a button that removes a user from the group chat. It uses <code>room.remove(member.uid)</code> code to remove the user.</p> <pre><code>final room = ChatRoomModel.fromSnapshot(snapshot);\n// ...\nfinal member = UserModel.fromSnapshot(snapshot);\n// ...\nTextButton(\n  onPressed: () {\n    room.remove(member.uid);\n    Navigator.pop(context);\n  },\n  child: const Text('Remove User'),\n),\n</code></pre>"},{"location":"english/chat/#management","title":"Management","text":"<ul> <li>You can use the default admin screen. Just call <code>AdminService.instance.showDashboard()</code>.</li> </ul>"},{"location":"english/chat/#delete-open-chat-message-data","title":"Delete Open Chat Message Data","text":""},{"location":"english/cloud_functions/","title":"Firebase Cloud Functions","text":"<p>I thought that I will not use Firebase cloud functions since it is a bit difficult to maintain the code. And we already have all the neccessary code in Flutter. But the code in the Flutter is not efficient. For instance, sending push notifications for a group chat from the Flutter app can downgrade the performance seriously. Even if the work is done in isolated, still it will consume a hugh resource. I am expecing that there are more than 1,000 uesrs who are chatting a lot every day. That's what acctually happens. And every time a user send a message, the push message ... (I will not explain it details.)</p> <p>So, the app should not do this work from the Flutter app. You may send the push notification from client only if it will not consume a lot of resource.</p> <p>And here comes the cloud functions</p>"},{"location":"english/cloud_functions/#sending-push-notificaiton-on-each-chat-message","title":"Sending push notificaiton on each chat message","text":""},{"location":"english/cloud_functions/#sending-push-notification-on-post-and-comment-create","title":"Sending push notification on post and comment create","text":""},{"location":"english/cloud_functions/#indexing-data-into-typesense","title":"Indexing data into typesense","text":""},{"location":"english/cloud_functions/#indexing-post-data-issues","title":"indexing post data issues","text":"<ul> <li>When ever comment is created/updated/deleted, the post write event trigger unneccessarily causing extra function call, document read(including all the comments), and band width, and unneccessary typesense indexing. As of now, we just let it be this way. This is the cheapest for now.</li> </ul>"},{"location":"english/cloud_functions/#post-summaries-upon-post-createupdatedelete","title":"Post Summaries upon Post Create/Update/Delete","text":"<ul> <li>We have cloud functions that whenever a post is created/updated/deleted in <code>posts</code>, it updates <code>post-all-summaries</code> and <code>post-summaries</code>.</li> </ul>"},{"location":"english/cloud_functions/#managepostsallsummary","title":"managePostsAllSummary","text":"<p>This cloud function updates <code>post-all-summaries</code> and <code>post-summaries</code> based on <code>posts</code>.</p> <p>Be informed that we are only saving the first url of the post in summaries.</p>"},{"location":"english/comments/","title":"Comments","text":"<p>A comment is created by users to comment on a post.</p> <p>Comments are saved under <code>/comments/&lt;post-id&gt;</code>.</p>"},{"location":"english/comments/#comment-model","title":"Comment Model","text":""},{"location":"english/comments/#fields","title":"Fields","text":"<ul> <li>ref<ul> <li>DatabaseReference</li> <li>Reference in RTDB to access the comment</li> </ul> </li> <li>id<ul> <li>String</li> <li>The ID of the category</li> </ul> </li> <li>parentId<ul> <li>optional String</li> <li>The ID of the comment`s parent when the comment is represented as a reply under an existing comment.</li> </ul> </li> <li>content<ul> <li>String</li> <li>The main content which is the actual comment.</li> </ul> </li> <li>uid<ul> <li>String</li> <li>The commenter`s uid.</li> </ul> </li> <li>createdAt<ul> <li>int</li> <li>When the comment was created, in milliseconds since epoch</li> </ul> </li> <li>urls<ul> <li>List of Strings</li> <li>default: []</li> <li>urls of the attached files (mostly for photos)</li> </ul> </li> <li>depth<ul> <li>int</li> <li>depth of the comment (for indention in replies).</li> </ul> </li> <li>deleted<ul> <li>bool</li> <li>Whether the comment is deleted. True means deleted. Otherwise, not deleted.</li> </ul> </li> </ul>"},{"location":"english/comments/#getters","title":"Getters","text":"<ul> <li>category<ul> <li>String</li> <li>The category of the forum where the comment`s post belong.</li> <li>Category is not saved in RTDB since it is accessible in post but it is important in the model.</li> </ul> </li> <li>postId<ul> <li>String</li> <li>The id of the post where the comment is commented.</li> <li>Post`s Id is not saved in RTDB since it is accessible in post but it is important in the model.</li> </ul> </li> </ul>"},{"location":"english/comments/#commentview-widget","title":"CommentView Widget","text":"<p>To view a comment, use like below:</p> <pre><code>final CommentModel comment = CommentModel.fromMap({\n    `uid`: uid,\n    `createdAt`: createdAt,\n    `urls`: urls,\n  },\n);\n\nreturn CommentView(\n    post: post,\n    comment: comment,\n    onCreate: () {\n        post.reload().then((value) =&gt; setState(() {}));\n    },\n);\n</code></pre>"},{"location":"english/comments/#oncommentcreate-oncommentupdate-oncommentdelete","title":"onCommentCreate, onCommentUpdate, onCommentDelete","text":"<p>To add custom code upon creating, updating or deleting the comment, you may set <code>onCommentCreate</code>, <code>onCommentUpdate</code> and <code>onCommentDelete</code> in the <code>ForumService.instance.init()</code> at the app start.</p> <p>The custom codes will be ran after the event.</p>"},{"location":"english/comments/#initializing","title":"Initializing","text":"<p>Check the example code below to understand how to set these onCommentCreate, onCommentUpdate, and onCommentDelete. Put initialize recommendedly on initialization in main.</p> <pre><code>initForum() {\n    ForumService.instance.init(\n        // ... \n        onCommentCreate: (CommentModel comment) =&gt; toast(\"Created comment: $comment\"),\n        onCommentUpdate: (CommentModel comment) =&gt; toast(\"Updated comment: $comment\"),\n        onCommentDelete: (CommentModel comment) =&gt; toast(\"Deleted comment: $comment\"),\n    );\n}\n</code></pre>"},{"location":"english/comments/#listing-comments","title":"Listing comments","text":"<p>Comments will be provided by the PostModel. For customization, check the code below:</p> <pre><code>final post = PostModel(\n  // get the post model\n);\n\nListView.builder(\n  itemCount: post.comments.length,\n  itemBuilder: (context, index) {\n    final CommentModel comment = post.comments[index];\n    return CommentView(\n      post: post,\n      comment: comment,\n      onCreate: () {\n        post.reload().then((value) =&gt; setState(() {}));\n      },\n    );\n  },\n)\n</code></pre>"},{"location":"english/comments/#comment-create-logic","title":"Comment create logic","text":"<ul> <li>There followings are the comments fields. There is no <code>category</code>, <code>postId</code>, <code>id</code>.<ul> <li><code>content</code>: optional</li> <li><code>parentId</code>: null for root level comment. required for child of root level comment. (required for comment of comment)</li> <li><code>uid</code>: required</li> <li><code>createdAt</code>: required</li> <li><code>urls</code>: optional</li> </ul> </li> </ul>"},{"location":"english/common/","title":"Common","text":"<p>These will be commonly used in different aspect of the app.</p>"},{"location":"english/common/#widgets","title":"Widgets","text":""},{"location":"english/common/#avatar","title":"Avatar","text":"<p>Displays like an avatar when a photo URL is provided.</p> <pre><code>Avatar(photoUrl: room.photoUrl);\n</code></pre> <p>Parameters:</p> <ul> <li>double size</li> <li>The size of the avatar [default] 48.</li> <li>double radius</li> <li>The radius of the borders of the avatar [default] 20.</li> <li>String photoUrl</li> <li>Required URL of the photo in the avatar</li> </ul> <p>The url doesn't have to be a user's avatar. It can be used in any photo URLs.</p> <p>We can also use <code>anonymousUrl</code>, a photo for anonymous picture.</p> <pre><code>import 'package:fireship/fireship.dart';\n...\n// Note that this is a different approach from AnonymousAvatar Widget\nAvatar(photoUrl: anonymousUrl);\n</code></pre> <p>When we want to use Avatar for a User's Profile Photo, it is recommended to use UserAvatar instead. See user.md doc.</p>"},{"location":"english/common/#anonymousavatar","title":"AnonymousAvatar","text":"<p>\uc775\uba85 \uc0ac\uc6a9\uc790\ub97c \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9\ud558\ub294 \uc544\ubc14\ud0c0 (Used for representing anonymous users).</p> <pre><code>AnonymousAvatar(text: 'G');\n</code></pre> <p>Parameters:</p> <ul> <li>double size</li> <li>The size of the avatar</li> <li>double radius</li> <li>The radius of the borders of the avatar</li> <li>String? text</li> <li>The initial character of the anonymous avatar</li> </ul>"},{"location":"english/common/#stackedavatar","title":"StackedAvatar","text":"<p>\uc2a4\ud0dd\uc73c\ub85c \uc5ec\ub7ec \uc544\ubc14\ud0c0\ub97c \ud45c\uc2dc (Displays multiple avatars in a stack)</p>"},{"location":"english/common/#linkifytext","title":"LinkifyText","text":"<ul> <li>Easy to link urls in the text.</li> </ul>"},{"location":"english/database/","title":"Database","text":"<p>Fireship uses <code>Firebase Realtime Database</code>. We have chosen the realtime database because it's fast and simple. You may use <code>Firestore</code> together with Fireship.</p>"},{"location":"english/database/#gudeline","title":"Gudeline","text":"<ul> <li>We use <code>Realtime Database</code> and it's different from <code>Firestore</code>. And it is good to know that the app should</li> <li>listen(observe) as small portion as it can be.</li> <li>get the data as small portion as it can be.</li> <li> <p>not listening the whole document of a user or a post. Just listen a portion of it. Meaning, instead of listing the whole post document, just listen the title only if it's needed.</p> </li> <li> <p>The path of database should not contain underbar(_). Instead use <code>-</code> between the words.</p> </li> <li>For instance, <code>user-profile-photos</code>.</li> <li>for custom path, do not use the triple dash <code>---</code> within path because it is used for the 1:1 chat rooms' ids.</li> </ul>"},{"location":"english/database/#database-structure","title":"Database structure","text":"<p>Fireship maintains as flat as it can be. Meaning, it does not contains a batch of data inside a node. For instance, the data of the users are saved under <code>/users/&lt;uid&gt;</code> and its data should not contain another batch of data. The fields should have a value of string, number, array. But not a map or subnode.</p> <p>Below is the good example of flat style.</p> <pre><code>/users/&lt;uid&gt;/ { name: ..., age: ..., address: ..., }\n</code></pre> <p>Below is the bad example because it has other batch of information under the user node.</p> <pre><code>/users/&lt;uid&gt;/schedule/&lt;scheduleId&gt;/ { subject: ..., contenxt: ...., dateAt: ...}\n</code></pre>"},{"location":"english/database/#use-database","title":"Use Database","text":"<p>You can use <code>Database</code> widget on listing a value of database node.</p> <pre><code>Database(\n    path: '${Path.join(myUid!, chat.room.id)}/name',\n    builder: (v, p) =&gt; Text(\n        v ?? '',\n        style: Theme.of(context).textTheme.titleLarge,\n    ),\n),\n</code></pre> <p>The <code>onLoading</code> can be used to reduce the screen flickering.</p> <pre><code>Database(\n  path: post.ref.child(Field.noOfLikes).path,\n  builder: (no) =&gt; Text('\uc88b\uc544\uc694${likeText(no)}'),\n  onLoading: const Text('\uc88b\uc544\uc694'),\n),\n</code></pre>"},{"location":"english/database/#user-database","title":"User Database","text":"<p>See user document.</p>"},{"location":"english/error_handling/","title":"Error handling","text":"<p>Some of the widgets and logic in fireship throw <code>FireshipException</code> exception.</p> <p>Those exceptions and whatever exceptions derived from other packages may NOT be handled by fireship. The app is responsible for handling the exceptions.</p>"},{"location":"english/extensions/","title":"Extensions","text":""},{"location":"english/extensions/#string-extensions","title":"String extensions","text":"<p>You can use <code>orAnonymousUrl</code>, <code>orWhiteUrl</code>, <code>orBlackUrl</code> to display anonymous, or white, black iamge when the string of the url is empty string.</p> <pre><code>Avatar(\n    photoUrl: my!.photoUrl.orAnonymousUrl,\n),\n</code></pre> <p><code>ifEmpty</code> and <code>or</code> have same fuctionality that if the string is empty, it will use the parameter value. Note that it's not working if the string is null.</p>"},{"location":"english/forum/","title":"Forum","text":""},{"location":"english/forum/#database-strucuture","title":"Database strucuture","text":"<ul> <li><code>/post-summary/&lt;category&gt;</code> is for listing posts in a category list. It will have a summary of the post.<ul> <li>It includes <code>64 letters of title</code>, <code>128 letters of content</code>, <code>category</code>, <code>id</code>, <code>uid</code>, <code>createdAt</code>, <code>order</code>.</li> <li>it does not include <code>no of likes</code>, <code>no of comments</code>. It needs to get those information from <code>/posts</code>.</li> <li>The client app is reponsible to manage(crud) the summary posts under <code>/post-summary/&lt;category&gt;</code>.</li> </ul> </li> <li><code>posts</code> is for saving all the post data.</li> <li> <p><code>posts/&lt;category&gt;/&lt;postId&gt;/comments</code> is for saving the comments for the post.</p> </li> <li> <p><code>/post-all-summary</code> is a place(path) that all post summaries are being saved.</p> <ul> <li>You can use this data to display all the posts of all categories in the same page.</li> <li>The data under <code>/post-all-summary</code> is managed by cloud functions. And you need to install <code>managePostAllSummary</code> cloud function to make it work.</li> <li>See install.md to know how to install <code>managePostAllSummary</code> function.</li> </ul> </li> </ul>"},{"location":"english/forum/#coding-guideline","title":"Coding Guideline","text":"<ul> <li><code>category</code> cannot be changed due to the node structure.</li> </ul>"},{"location":"english/forum/#observing-post-changes-and-update-data","title":"Observing post changes and update data","text":"<p>As you know, we are using realtime database. This means the app should observe for data change as small portiona as it can be. And we made it simple for post data changes. Use <code>PostModel.onFieldChange(field, callback)</code>.</p> <p>The example below listens the title changes and if it is changed, it wil update on screen.</p> <pre><code>@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: post.onFieldChange(Field.title, (v) =&gt; Text(v ?? '')),\n    )\n  );\n}\n</code></pre>"},{"location":"english/forum/#test-code","title":"Test code","text":"<p>You can load a post like below and do whatever test.</p> <pre><code>SchedulerBinding.instance.addPostFrameCallback((timeStamp) {\n  Timer(const Duration(microseconds: 200), () async {\n    final post = await PostModel.get(category: 'discussion', id: '-No5q8HHMw7ZDZSjR-Qu');\n    print('length of comment; ${post?.comments.length}');\n    for (final c in post?.comments ?? []) {\n      print(\"[${c.depth}] ${c.content}\");\n    }\n  });\n});\n</code></pre>"},{"location":"english/forum/#comments","title":"Comments","text":"<p>Refer to Comment doc.</p>"},{"location":"english/forum/#posts","title":"Posts","text":"<p>Refer to Post doc.</p>"},{"location":"english/function/","title":"Functions","text":"<p>These functions are provided to be used anywhere in the code as needed.</p>"},{"location":"english/function/#error","title":"Error","text":"<p>To display an error, there is a widget that displays a dialog. You can use that dialog widget with <code>showDialog</code>. Or you can use <code>error</code> function.</p>"},{"location":"english/function/#toast","title":"toast","text":"<p>Toast can be used to show a snackbar with a message.</p> <pre><code>toast(context: context, message: 'Hello User.');\n</code></pre> <p>Parameters:</p> <ul> <li>context</li> <li>required BuildContext</li> <li>the build context of the current widget</li> <li>title</li> <li>String</li> <li>title text of the snackbar</li> <li>message</li> <li>required String</li> <li>message to show as text</li> <li>icon</li> <li>Icon</li> <li>The icon to add in the snackbar</li> <li>duration</li> <li>Duration</li> <li>how long does the snackbar shows?</li> <li>default: const Duration(seconds: 8)</li> <li>onTap</li> <li>Function(Function)</li> <li>on tap function</li> <li>error</li> <li>bool</li> <li>is it an error message?</li> <li>hideCloseButton</li> <li>bool</li> <li>default: false</li> <li>backgroundColor</li> <li>Color</li> <li>foregroundColor</li> <li>Color</li> <li>runSpacing</li> <li>double</li> <li>default: 12</li> <li>spacing between the icon and the message</li> </ul>"},{"location":"english/function/#confirm","title":"confirm","text":"<p>The <code>confirm</code> is a prompt that will let the user choose from yes or no.</p> <pre><code>final re = await confirm(\n    context: context,\n    title: 'Delete Account',\n    message: 'Are you sure you want to delete your account?'\n);\n</code></pre> <p>The <code>re</code> in the example will be a nullable bool. If <code>re</code> is <code>true</code> means user chooses yes. If <code>false</code> means user chooses no. If <code>null</code> means neither user chooses yes nor no.</p> <p>Parameters:</p> <ul> <li>[required] BuildContext context</li> <li>[required] String title</li> <li>title of the message</li> <li>[required] String message</li> <li>Add the question or confirmation message here.</li> </ul>"},{"location":"english/function/#input","title":"input","text":"<p>The <code>input</code> function can be used to ask for an input from user.</p> <pre><code>final re = await input(\n    context: context,\n    title: 'Name',\n    subtitle: 'Enter your lovely name',\n    hintText: 'Last Name, First Name',\n);\n</code></pre> <p>Parameters:</p> <ul> <li>[required] BuildContext context</li> <li>[required] String title</li> <li>The title of the prompt</li> <li>String subtitle</li> <li>The subtitle or additional info for input box</li> <li>[required] String hintText</li> <li>hintText for the input box</li> <li>String initialValue</li> <li>the default input value</li> </ul>"},{"location":"english/install/","title":"Install","text":"<p>Follow the instruction below to install Fireship into your app</p>"},{"location":"english/install/#install-fireship","title":"Install Fireship","text":""},{"location":"english/install/#install-fireship-as-a-package","title":"Install Fireship as a package","text":"<p>Simply add the latest version of fireship from pub.dev</p>"},{"location":"english/install/#install-fireship-as-a-package-developer","title":"Install Fireship as a package developer","text":"<p>You may wish to develop your app while building(or updating) the Fireship package together.</p> <ul> <li> <p>Fork the Fireship from <code>https://github.com/thruthesky/fireship</code></p> </li> <li> <p>Then, clone it</p> </li> <li> <p>Then, create a branch in Fireship local repository</p> </li> <li> <p>Create <code>apps</code> folder under the root of Fireship folder and create your app inside <code>apps</code> folder.</p> </li> </ul> <pre><code>mkdir apps\ncd apps\nflutter create your_project\n</code></pre> <ul> <li>You need to add the path of the dependency as <code>../..</code>. Add the fireship dependency like below.</li> </ul> <pre><code>dependencies:\n  fireship:\n    path: ../..\n</code></pre> <ul> <li>If you have update any code in Fireship, consider to submit a <code>pull request</code>.</li> </ul>"},{"location":"english/install/#install-firebase-realtime-database-secuirty","title":"Install Firebase Realtime Database Secuirty","text":"<p>Copy the security rules and paste it into your firebase project.</p>"},{"location":"english/install/#default-app-environment-entitlement","title":"Default app-environment entitlement","text":"<p>Add the following code into <code>info.plist</code>. These will be needed for access to camera and gallery.</p> <pre><code>&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the camera to share the photo on profile, chat, forum.&lt;/string&gt;\n&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the microphone to share vioce with other users.&lt;/string&gt;\n&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the photo library to share the photo on profile, chat, forum.&lt;/string&gt;\n</code></pre>"},{"location":"english/install/#install-cloud-functions","title":"Install Cloud Functions","text":"<p>Run the following command to install all the push notification cloud functions.</p> <pre><code>% cd firebase/function\n% npm run deploy:message\n</code></pre> <p>And set the end point URL to <code>MessagingService.instance.init(sendPushNotificationsUrl: ..)</code></p> <p>Run the following command to install typesense related cloud functions.</p> <pre><code>% cd firebase/function\n% npm run deploy:typesense\n</code></pre> <p>Run the following command to install a function that manages summarization of all posts under <code>/posts-all-summary</code>. See the Forum document for the details.</p> <pre><code>% cd firebase/function\n% npm run deploy:managePostsAllSummary\n</code></pre>"},{"location":"english/install/#initializing-textservice","title":"Initializing TextService","text":"<p>Fireship has some UI and you may want to show it in different languages.</p> <p>And you can use the text translation funtionality in your app.</p> <pre><code>\n/// Call this somewhere while the app boots.\ninitTextService();\n\nvoid initTextService() {\n  print('--&gt; AppService.initTextService()');\n\n  TextService.instance.texts = {\n    ...TextService.instance.texts,\n    if ( languageCode == 'ko' ) ...{\n      T.ok: '\ud655\uc778',\n      T.no: '\uc544\ub2c8\uc624',\n      T.yes: '\uc608',\n      T.error: '\uc5d0\ub7ec',\n      T.dismiss: '\ub2eb\uae30',\n      Code.profileUpdate: '\ud504\ub85c\ud544 \uc218\uc815',\n      Code.recentLoginRequiredForResign:\n          '\ud68c\uc6d0 \ud0c8\ud1f4\ub294 \ubcf8\uc778 \uc778\uc99d\uc744 \uc704\ud574\uc11c, \ub85c\uadf8\uc544\uc6c3 \ud6c4 \ub2e4\uc2dc \ub85c\uadf8\uc778 \ud55c \ub2e4\uc74c \ud0c8\ud1f4\ud558\uc154\uc57c\ud569\ub2c8\ub2e4.',\n      Categories.qna: '\uc9c8\ubb38',\n      Categories.discussion: '\ud1a0\ub860',\n      Categories.buyandsell: '\uc7a5\ud130',\n      Categories.info: '\uc815\ubcf4/\uc54c\ub9bc',\n      T.notVerifiedMessage: '\ubcf8\uc778 \uc778\uc99d\uc744 \ud558\uc154\uc57c \uc804\uccb4 \uae30\ub2a5\uc744 \uc774\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.',\n      T.chatRoomNoMessageYet: '\uc557, \uc544\uc9c1 \uba54\uc2dc\uc9c0\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\\n\ucc44\ud305\uc744 \uc2dc\uc791 \ud574 \ubcf4\uc138\uc694.',\n    },\n    if ( languageCode == 'en' ) ...{\n      T.ok: 'Ok',\n      // ...\n    }\n  };\n}\n</code></pre>"},{"location":"english/install/#initializing-userservice","title":"Initializing UserService","text":""},{"location":"english/install/#admin","title":"Admin","text":"<ul> <li>See Admin Doc</li> </ul>"},{"location":"english/install/#unit-tests","title":"Unit tests","text":"<ul> <li>There are many unit test codes. You can read other document of fireship on how to install and test the unit test codes.</li> </ul>"},{"location":"english/known_issues/","title":"Knonw issues","text":""},{"location":"english/known_issues/#user-initialization-error","title":"User initialization error","text":"<p>Fireship provides <code>my</code> as global variable. This holds login user's UserModel object. And if you are going to use it without initializing <code>UserService</code>, it will throw an exception of <code>Null check operator used on a null value</code>.</p>"},{"location":"english/messaging/","title":"Messaging","text":""},{"location":"english/messaging/#overview","title":"Overview","text":""},{"location":"english/messaging/#fcm-and-tokens","title":"FCM and tokens","text":"<p>Fireship uses FCM to send messages to devices.</p> <p>The tokens are saved under <code>/user-fcm-tokens/&lt;token&gt; { uid: [user uid], platform: [android or ios]}</code>. So, if you want to get the tokens of a user, you must get the tokens by searching the uid.</p>"},{"location":"english/messaging/#sending-messages-to-user","title":"Sending messages to user","text":"<p>One user may use multiple devices and one device may have multiple tokens. So, if the app sends a message to A, the app must query to get the tokens of A in <code>/user-fcm-tokens</code></p> <p>The code below shows how send a message to multiple users.</p> <pre><code>final List&lt;String&gt; uids = some.users;\n\n//sending notification to the list of uids\nawait MessagingService.instance.sendTo(\n  uids: uids,\n  title: '... message title ...',\n  body: '... message body ...',\n  image: url,\n);\n</code></pre> <p>To use this method, The firebase cloud function named <code>sendPushNotifications</code> in <code>firebase/functions/src/messaging/functions.ts</code> must be installed. See installation on how to install firebsae functions.</p>"},{"location":"english/messaging/#sending-messages-for-forum-category-subscription-and-chat-room-subscription","title":"Sending messages for forum category subscription and chat room subscription","text":"<p>There are firebase cloud functions that work with fireship for sending messages to subscribers on forum categories and chat rooms.</p> <p>You will need to install <code>sendMessagesToCategorySubscribers</code> and <code>sendMessagesToChatRoomSubscribers</code> in <code>firebase/functions/src/messaging/functions.ts</code> to make it work.</p> <p>The source code is under <code>firebase/functions</code> and the test code is under <code>firebase/functions/tests</code>.</p>"},{"location":"english/messaging/#unit-testing","title":"Unit testing","text":"<p>See <code>firebase/functions/tests</code> folder for unit testing on push notification. To run the unit test code, you need to set the environment variable - <code>GOOGLE_APPLICATION_CREDENTIAILS</code></p>"},{"location":"english/post/","title":"Post","text":"<p>A post is used for forum that is under a category, that has title, content, comments created by users.</p>"},{"location":"english/post/#post-model","title":"Post Model","text":""},{"location":"english/post/#fields","title":"Fields","text":"<ul> <li>DatabaseReference ref;<ul> <li>DatabaseReference</li> <li>Reference in RTDB to access the post</li> </ul> </li> <li>id<ul> <li>String</li> <li>The ID of the category</li> </ul> </li> <li>title<ul> <li>String</li> <li>The title of the post</li> </ul> </li> <li>content<ul> <li>String</li> <li>The actual content of the post</li> </ul> </li> <li>category<ul> <li>String</li> <li>The category where the post belongs.</li> </ul> </li> <li>uid<ul> <li>String</li> <li>The ID of the User who posted it.</li> </ul> </li> <li>createdAt<ul> <li>DateTime</li> <li>When was the post created.</li> <li>In RTDB it is saved as int, milliseconds since epoch.</li> </ul> </li> <li>order<ul> <li>int</li> <li>This is negated createdAt.</li> <li>It is being used to sort the posts since RTDB doesen't have descending order yet.</li> </ul> </li> <li>likes<ul> <li>List of String</li> <li>The uid's of user who liked the post.</li> </ul> </li> <li>urls;<ul> <li>List of String</li> <li>urls of the attached files (mostly for photos)</li> </ul> </li> <li>noOfLikes<ul> <li>int</li> <li>The number of Likers</li> </ul> </li> <li>noOfComments<ul> <li>int</li> <li>The number of comments</li> <li>This is save only under '/posts-summary'. This is not saved under '/posts'.</li> </ul> </li> <li>deleted<ul> <li>bool</li> <li>Whether the comment is deleted. True means deleted. Otherwise, not deleted.</li> </ul> </li> </ul>"},{"location":"english/post/#onpostcreate-onpostupdate-onpostdelete","title":"onPostCreate, onPostUpdate, onPostDelete","text":"<p>To add custom code upon creating, updating or deleting the post, you may set <code>onPostCreate</code>, <code>onPostUpdate</code> and <code>onPostDelete</code> in the <code>ForumService.instance.init()</code> at the app start.</p> <p>The custom codes will be ran after the event.</p>"},{"location":"english/post/#initializing","title":"Initializing","text":"<p>Check the example code below to understand how to set these onPostCreate, onPostUpdate, and onPostDelete. Put initialize recommendedly on initialization in main.</p> <pre><code>initForum() {\n    ForumService.instance.init(\n        onPostCreate: (PostModel post) =&gt; toast(\"Created post: $post\"),\n        onPostUpdate: (PostModel post) =&gt; toast(\"Updated post: $post\"),\n        onPostDelete: (PostModel post) =&gt; toast(\"Deleted post: $post\"),\n        // ... \n    );\n}\n</code></pre>"},{"location":"english/post/#viewing-a-post","title":"Viewing a post","text":"<p>You can use the <code>ForumService</code> to View the Post in a screen.</p> <pre><code>final post = PostModel(\n  // get the post\n);\n\nForumService.instance.showPostViewScreen(\n  context,\n  post: post,\n);\n</code></pre> <p>It uses Fireship's <code>PostViewScreen</code> widget. This is the default screen widget to view post.</p> <p>For customization, modify the code below.</p> <pre><code>final post = PostModel(\n  // get the post\n);\n\nawait showGeneralDialog(\n  context: context,\n  pageBuilder: ($, $$, $$$) =&gt; PostViewScreen(\n    post: post,\n  ),\n);\n</code></pre>"},{"location":"english/post/#posts-listing","title":"Posts Listing","text":"<p>The <code>PostListTile</code> widget can be used as List Tile. Show a list of posts like the code below.</p> <pre><code>FirebaseDatabaseListView(\n  query: Ref.postsSummary.child(category).orderByChild(Field.order),\n  itemBuilder: (context, snapshot) {\n    return PostListTile(\n      post: PostModel.fromSnapshot(snapshot),\n    );\n  },\n);\n</code></pre> <p>Replace the <code>PostListTile</code> widget as needed (like customization).</p>"},{"location":"english/post/#post-creation-logic","title":"Post Creation Logic","text":"<ul> <li> <p>Post will be creatd with the following data. There is no <code>category</code> or post <code>id</code>.</p> <ul> <li>uid (required)</li> <li>title (optional)</li> <li>content (optinal)</li> <li>urls (optional)</li> <li>createdAt (required)</li> <li>order (required)</li> </ul> </li> <li> <p>Right after creation of the post, it will update the post with new <code>order</code>. So, if you are working on cloud functions with event trigger, don't be supprised that it may cause multiple write events.</p> </li> <li> <p>When a post is created, the counter part summary record will be created under <code>/posts-summary</code> with the following fields.</p> <ul> <li>content</li> <li>createdAt</li> <li>order</li> <li>title</li> <li>uid</li> <li>url</li> </ul> </li> </ul>"},{"location":"english/report/","title":"Report","text":"<p>Users can report another user, post, comment, chat room.</p> <ul> <li>To report a user</li> </ul> <pre><code>ElevatedButton(\n    onPressed: () async {\n        // Ask user the reason why he reports.\n        final re = await input(\n            context: context,\n            title: T.reportInputTitle.tr,\n            subtitle: T.reportInputMessage.tr,\n            hintText: T.reportInputHint.tr,\n        );\n        // If the user submits\n        if (re == null || re == '') return;\n        await ReportService.instance.report(\n            commentId: widget.comment.id,\n            reason: re,\n        );\n        if (mounted) {\n            toast(context: context, message: 'You have reported this comment.');\n        }\n    },\n    child: Text(T.report.tr),\n),\n</code></pre> <ul> <li>To report a chat room</li> </ul> <pre><code>final re = await input(\n    context: context,\n    title: T.reportInputTitle.tr,\n    subtitle: T.reportInputMessage.tr,\n    hintText: T.reportInputHint.tr,\n);\nif (re == null || re == '') return;\nawait ReportService.instance.report(chatRoomId: chat.room.id, reason: re);\n</code></pre> <ul> <li>To report a post</li> </ul> <pre><code></code></pre>"},{"location":"english/storage/","title":"Storage","text":"<p>To upload an image, you may use <code>StorageService.instance.upload</code> method.</p>"},{"location":"english/storage/#uploading","title":"Uploading","text":""},{"location":"english/storage/#deleting","title":"Deleting","text":""},{"location":"english/storage/#accessing","title":"Accessing","text":"<p>In accessing the file, it will depend on the type of the file that was uploaded. It is important to know that we need to save the url of the uploaded file since we need it to access the file.</p> <p>For instance, we have uploaded a photo and we want to access it in the app:</p> <pre><code>CachedNetworkImage(\n    imageUrl: savedUrl,\n);\n</code></pre> <p>Choose the correct widget for the file type.</p>"},{"location":"english/storage/#replacing","title":"Replacing","text":"<p>There are times that the app needs to replace existing image, In this case, it needs to delete the exsiting images like below.</p> <pre><code>// Upload\nfinal url = await StorageService.instance.upload(\n    context: context,\n    progress: (p) =&gt; setState(() =&gt; progress = p),\n    complete: () =&gt; setState(() =&gt; progress = null),\n);\nif (url == null) return;\n\nfinal oldUrl = UserService.instance.user?.photoUrl;\n\nawait user.update(\n    photoUrl: url,\n);\n\n// Delete existing image\nawait StorageService.instance.delete(oldUrl);\n</code></pre> <p>For the replacement of exisiting (or file), you can use <code>uploadAt</code> to make it simplifying. It will replace the image at the path.</p> <pre><code>await StorageService.instance.uploadAt(\n    context: context,\n    path: \"users/${user.uid}/photoUrl\",\n    progress: (p) =&gt; setState(() =&gt; progress = p),\n    complete: () =&gt; setState(() =&gt; progress = null),\n);\n</code></pre>"},{"location":"english/test/","title":"Test","text":""},{"location":"english/test/#test-cloud-functions-locally","title":"Test cloud functions locally","text":"<p>To run the cloud functions locally, you will need to export <code>GOOGLE_APPLICATION_CREDENTIALS</code> with the service account.</p> <pre><code>% export GOOGLE_APPLICATION_CREDENTIALS=../../apps/momcafe/tmp/service-account.json\n</code></pre>"},{"location":"english/test/#fcm-tests","title":"FCM tests","text":"<ul> <li>For sending push notification locally, see <code>firebase/functions/src/test/send-message.ts</code></li> </ul>"},{"location":"english/todo/","title":"TODO","text":"<ul> <li>Count(stat) no of users, posts (per category), comments (per category)</li> <li>Log histories (all user activities)</li> <li>Feed</li> <li>Image deletion.</li> <li>If user closes app (or what so ever), the image is left as garbage.</li> <li> <p>To handle this, when an image is being uploaded and attached to a post/comment/user/whatever, we need to save a meta data on the image in storage. So, the garbage will not have that meta data. And then, we can put a menu in admin screen to list all the garbages and delete them.</p> </li> <li> <p>Save <code>noOfUsers</code> in each chat room. So, it can display how many users in the room anywhere in the app.</p> </li> </ul>"},{"location":"english/translation/","title":"Text","text":"<p>The default language is English. And you can change it into different language or change it into your own texts.</p>"},{"location":"english/translation/#changing-the-texts","title":"Changing the texts","text":"<p>You can change it inside your app.</p> <p>For instance, simply set the text code as following.</p> <pre><code>TextService.instance.texts['name'] = '\uc774\ub984';\nTextService.instance.texts[Code.profileUpdate] = '\ud504\ub85c\ud544 \uc218\uc815';\n</code></pre> <p>To know the whole list of text code, you may open <code>lib/src/text/text.service.dart</code>.</p> <p>You may add your own text code and text for your app. So, you don't have to maintain another multi-lingual logic.</p> <p>For instance, define your own text code for your app like below</p> <pre><code>TextService.instance.texts['appName'] = 'My App';\n</code></pre> <p>And use it when you need,</p> <pre><code>Text('appName').tr\n</code></pre> <p>If the key is not defined in <code>texts</code> variable inside <code>text.service.dart</code>, then it will be shown as it is.</p>"},{"location":"english/translation/#pre-defined-texts","title":"Pre-defined texts","text":"<p>Some texts are predefined in <code>src/text/texts.dart</code> and you can use it like below.</p> <pre><code>Text(T.setting.tr)\n</code></pre> <p>Note that, <code>T.setting</code> is not defined in <code>texts</code>. So it is used as it is.</p>"},{"location":"english/typesense/","title":"Typesense","text":""},{"location":"english/typesense/#how-to","title":"How to","text":"<ul> <li>Typesense is not tightly coupled with fireship. Meaning, you have to manually code to index.</li> <li>TypesenseService must be initialized before using it.</li> </ul>"},{"location":"english/typesense/#how-to-index","title":"How to index","text":"<ul> <li>Below is an example of indexing.</li> </ul> <pre><code>TypesenseService.instance.init(\n    apiKey: '12345a',\n    scheme: 'http',\n    host: 'file.philgo.com',\n    port: 8108,\n    searchCollection: 'search',\n);\nUserService.instance.init(\n    onCreate: TypesenseService.instance.upsertUser,\n    onUpdate: Types\n    enseService.instance.upsertUser,\n);\nForumService.instance.init(\n    onPostCreate: TypesenseService.instance.upsertPost,\n    onPostUpdate: TypesenseService.instance.upsertPost,\n    onPostDelete: TypesenseService.instance.delete,\n    onCommentCreate: TypesenseService.instance.upsertComment,\n    onCommentUpdate: TypesenseService.instance.upsertComment,\n    onCommentDelete: TypesenseService.instance.delete,\n);\n</code></pre>"},{"location":"english/typesense/#how-to-search","title":"How to search","text":"<p>To search, <code>TypesenseService.instance.search</code> can be used. Check the example code below:</p> <pre><code>final searchParameters = {\n    'q': 'Your Searching Text',\n    'query_by': 'user,post,comment',\n    'filter_by': 'category:=discussion',\n    'page': '1',\n    'per_page': '10',\n    'sort_by': 'createdAt:desc'\n};\n\nfinal re = await TypesenseService.instance.search(searchParameters: searchParameters);\n\nfinal itemsResult = re.getDocs;\n\nreturn ListView.builder(\n    itemCount: itemsResult.length,\n    itemBuilder: (context, index) {\n        final resDoc = itemsResult[index];\n        if (resDoc.type == TypesenceDocType.user) {\n            final user = UserModel.fromJson(resDoc.toJson());\n            return Text(\"User uid: ${user.uid}\");\n        }\n        if (resDoc.type == TypesenceDocType.post) {\n            final post = PostModel.fromJson(resDoc.toJson(), id: resDoc.id);\n            return PostListTile( post: post );\n        }\n        if (resDoc.type == TypesenceDocType.comment) {\n            final comment = CommentModel.fromMap(resDoc.toJson(), resDoc.id, category: resDoc.category ?? '', postId: resDoc.postId ?? '');\n            return Text(\"Comment id: ${comment.id}\");\n        }\n        return Text(\"Error: document is not form user, post, or comment\");\n    }\n);    \n</code></pre>"},{"location":"english/user/","title":"User","text":"<p>Much of the code is already included in Fireship.</p> <p>For example, features like modifying user information or public profile pages are already in working codes. You can customize these UI elements.</p>"},{"location":"english/user/#user-database-structure","title":"User database structure","text":"<ul> <li>The user data is saved under <code>/users/&lt;uid&gt;</code>.</li> </ul> <p><code>displayName</code> is the name of the user. Fireship (including all the widgets) will always use <code>dispalyName</code> to display the name of the user. This can be a real name, or it can be a nickname. If you want to keep user's name in different format like <code>firstName</code>, <code>middleName</code>, <code>lastName</code>, you can do it in your app. You may get user's real name and save it in <code>name</code> field in your app.</p> <p><code>createdAt</code> has the time of the first login. This is the account creation time.</p> <p>\uc0ac\uc6a9\uc790\uc758 \ubcf8\uba85 \ub610\ub294 \ud654\uba74\uc5d0 \ub098\ud0c0\ub098\uc9c0 \uc54a\ub294 \uc774\ub984\uc740 <code>name</code> \ud544\ub4dc\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud654\uba74\uc5d0 \ud45c\uc2dc\ub418\ub294 \uc774\ub984\uc740 <code>displayName</code> \ud544\ub4dc\uc5d0 \uc800\uc7a5\uc744 \ud55c\ub2e4. The user's real name or a name not displayed on the screen is stored in the name field. The displayed name is saved in the <code>displayName</code> field.</p> <p><code>isVerified</code> \ub294 \uad00\ub9ac\uc790\ub9cc \uc218\uc815 \ud560 \uc218 \uc788\ub294 \ud544\ub4dc\uc774\ub2e4. \ube44\ub85d \uc0ac\uc6a9\uc790 \ubb38\uc11c\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4\ub3c4 \uc0ac\uc6a9\uc790\uac00 \uc218\uc815 \ud560 \uc218 \uc5c6\ub2e4. \uad00\ub9ac\uc790\uac00 \uc9c1\uc811 \uc218\ub3d9\uc73c\ub85c \ud68c\uc6d0 \uc2e0\ubd84\uc99d\uc744 \ud655\uc778\ud558\uace0 \uc601\uc0c1 \ud1b5\ud654\ub97c \ud55c \ub2e4\uc74c <code>isVerified</code> \uc5d0 true \ub97c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. <code>isVerified</code> is a field that only administrators can modify. Even if it's included in the user document, users cannot modify it. Administrators manually confirm identity documents and conduct video calls. Afterward, they can set <code>isVerified</code> to true.</p> <p><code>gender</code> \ub294 <code>M</code> \ub610\ub294 <code>F</code> \uc758 \uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, null (\ud544\ub4dc\uac00 \uc5c6\ub294 \uc0c1\ud0dc) \uc0c1\ud0dc\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4. \ucc38\uace0\ub85c, <code>isVerified</code> \uac00 true \uc77c \ub54c\uc5d0\ub9cc \uc131\ubcc4 \uc5ec\ubd80\ub97c \ubbff\uc744 \uc218 \uc788\ub2e4. \uc989, <code>isVerified</code> \uac00 true \uac00 \uc544\ub2c8\uba74, <code>gender</code> \uc815\ubcf4\ub3c4 \uac00\uc9dc\uc77c \uc218 \uc788\ub2e4. <code>gender</code> can have values of <code>M</code> or <code>F</code> and may be in a null state (no field). Note that the gender information can only be trusted when <code>isVerified</code> is true. In other words, if <code>isVerified</code> is not true, gender information may also be false.</p> <ul> <li>User profile photo is saved under <code>/users/&lt;uid&gt;</code> and <code>/user-profile-photos/&lt;uid&gt;</code>.<ul> <li>The reason why it saves the photo url into <code>/user-profile-photos</code> is to list the users who has profile photo. Without <code>/user-profile-photos</code> node, It can list with <code>/users</code> data but it cannot sort by time.</li> <li><code>/user-profile-photos/&lt;uid&gt;</code> has <code>updatedAt</code> field that is updated whenever the user changes profile photo.</li> <li>It is managed by <code>UserModel</code>.</li> </ul> </li> </ul>"},{"location":"english/user/#ui-customizing-user-ui","title":"\uc0ac\uc6a9\uc790 UI \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 (Customizing User UI)","text":""},{"location":"english/user/#ui-login-error-ui","title":"\ub85c\uadf8\uc778 \uc5d0\ub7ec UI (Login Error UI)","text":"<p>\ub85c\uadf8\uc778\uc774 \ud544\uc694\ud55c \uc0c1\ud669\uc5d0\uc11c \ub85c\uadf8\uc778\uc744 \ud558\uc9c0 \uc54a\uace0 \ud574\ub2f9 \ud398\uc774\uc9c0\ub97c \uc774\uc6a9\ud558\ub824\uace0 \ud55c\ub2e4\uba74, <code>DefaultLoginFirstScreen</code> \uc774 \uc0ac\uc6a9\ub41c\ub2e4. \uc774\uac83\uc740 \uc544\ub798\uc640 \uac19\uc774 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc744 \ud560 \uc218 \uc788\ub2e4. If someone tries to access a page that requires login without logging in, <code>DefaultLoginFirstScreen</code> is used. You can customize it as follows:</p> <pre><code>UserService.instance.init(\n  customize: UserCustomize(\n    loginFirstScreen: const Text('\ub85c\uadf8\uc778\uc744 \uba3c\uc800 \ud574 \uc8fc\uc138\uc694. (Please login first!)'),\n  ...\n  ),\n)\n</code></pre> <p><code>loginFirstScreen</code> \uc740 builder \uac00 \uc544\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc815\uc801 widget \uc744 \ub9cc\ub4e4\uc5b4\uc8fc\uba74 \ub418\ub294\ub370, Scaffold \ub97c \ud1b5\uc9f8\ub85c \ub9cc\ub4e4\uc5b4 \ub123\uc73c\uba74 \ub41c\ub2e4. <code>loginFirstScreen</code> is not a builder. So, you can create a static widget, and if you put it in a Scaffold, it will work.</p>"},{"location":"english/user/#user-profile-update-screen","title":"User profile update screen","text":"<p>Fireship provides a few widgets to update user's profile information like below</p>"},{"location":"english/user/#defaultprofileupdateform","title":"DefaultProfileUpdateForm","text":"<p><code>DefaultProfileUpdateForm</code> provides with the options below - state image (profile background image) - profile photo - name - state message - birthday picker - gender - nationality selector - region selector(for Korean nation only) - job</p> <p><code>DefaultProfileUpdateForm</code> also provides more optoins.</p> <p>You you can call <code>UserService.instance.showProfileScreen(context)</code> mehtod which shows the <code>DefaultProfileUpdateForm</code> as dialog.</p> <p>It is important to know that fireship uses <code>UserService.instance.showProfileScreen()</code> to display the login user's profile update screen. So, if you want to customize everything by yourself, you need to copy the code and make it your own widget. then conect it to <code>UserService.instance.init(customize: UserCustomize(showProfile: ... ))</code>.</p>"},{"location":"english/user/#simpleprofileupdateform","title":"SimpleProfileUpdateForm","text":"<p>This is very simple profile update form widget and we don't recommend it for you to use it. But this is good to learn how to write the user update form.</p> <pre><code>Scaffold(\n  appBar: AppBar(\n    title: const Text('Profile'),\n  ),\n  body: Padding(\n    padding: const EdgeInsets.all(md),\n    child: Theme(\n      data: bigButtonTheme(context),\n      child: SimpleProfileUpdateForm(\n        onUpdate: () =&gt; toast(\n          context: context,\n          message: context.ke('\uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4.', 'Profile updated.'),\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>"},{"location":"english/user/#access-to-other-user-data","title":"Access to other user data","text":"<p>You can use <code>UserDoc</code> to access other user's data. Note that you can use it to get your data also.</p> <p><code>UserDoc</code> caches the data in memory by default. This mean, it will get the data only once from Database. You may use <code>cache</code> option with false to get the data from the Database again.</p> <pre><code>UserDoc(\n  uid: uid,\n  builder: (data) {\n    if (data == null) return const SizedBox.shrink();\n    final user = UserModel.fromJson(data, uid: uid);\n    return Column(\n      children: [\n        Text(\n          user.displayName ?? 'No name',\n          style: Theme.of(context).textTheme.titleLarge!.copyWith(\n                color: Colors.white,\n                fontWeight: FontWeight.bold,\n              ),\n        ),\n        if (user.stateMessage != null)\n          Text(\n            user.stateMessage!,\n            style: Theme.of(context).textTheme.labelLarge!.copyWith(\n                  color: Colors.white.withAlpha(200),\n                ),\n          ),\n      ],\n    );\n  },\n),\n</code></pre> <p>It's important to know that you can use <code>field</code> property to get only the value of the field. It's recommended to use <code>field</code> whenever possible since the size of user data may be large.</p> <p>You can use <code>sync</code> method to update (rebuild) the widget whenever the value changes.</p> <pre><code>UserDoc.sync(uid: user.uid, field: 'displayName', builder: (data, $) =&gt; Text(data)),\n</code></pre>"},{"location":"english/user/#accessing-my-logged-in-user-information","title":"\ub098\uc758 (\ub85c\uadf8\uc778 \uc0ac\uc6a9\uc790) \uc815\ubcf4 \uc561\uc138\uc2a4 Accessing My (Logged-in User) Information","text":"<p>\ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790(\ub098)\uc758 \uc815\ubcf4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 <code>MyDoc</code> \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4. \ubb3c\ub860, <code>UserDoc</code> \ub97c \uc0ac\uc6a9\ud574\ub3c4 \ub418\uc9c0\ub9cc, <code>MyDoc</code> \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ud6a8\uacfc\uc801\uc774\ub2e4. To reference the information of the logged-in user (yourself), you can use MyDoc. While using UserDoc is acceptable, using MyDoc is more effective.</p> <p>Fireship \uc740 <code>UserService.instance.myDataChanges</code> \ub97c \ud1b5\ud574\uc11c \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130\uac00 \ubcc0\uacbd \ub420 \ub54c \ub9c8\ub2e4, \uc790\ub3d9\uc73c\ub85c BehaviorSubject \uc778 <code>myDataChanges</code> \uc774\ubca4\ud2b8 \uc2dc\ud0a4\ub294\ub370 \uadf8 \uc774\ubca4\ud2b8\ub97c \ubc1b\uc544\uc11c <code>MyDoc</code> \uc704\uc82f\uc774 \ub3d9\uc791\ud55c\ub2e4. \uadf8\ub798\uc11c \ucd94\uac00\uc801\uc73c\ub85c DB \uc561\uc138\uc2a4\ub97c \ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ub294 \uac83\uc774\ub2e4. Fireship uses UserService.instance.myDataChanges to automatically trigger the BehaviorSubject myDataChanges event whenever the data of the logged-in user changes. MyDoc widgets respond to this event, eliminating the need for additional DB access.</p> <pre><code>MyDoc(builder: (my) =&gt; Text(\"isAdmin: ${my?.isAdmin}\"))\n</code></pre> <p>\uad00\ub9ac\uc790\uc774\uba74 \uc704\uc82f\uc744 \ud45c\uc2dc\ud558\ub294 \uc608. An example of displaying a widget if the user is an administrator:</p> <pre><code>MyDoc(builder: (my) =&gt; isAdmin ? Text('I am admin') : Text('I am not admin'))\n</code></pre> <p>If you are going to watch(listen) a value of a field, then you can use <code>MyDoc.field</code>.</p> <pre><code>MyDoc.field('${Field.blocks}/$uid', builder: (v) {\n  return Text(v == null ? T.block.tr : T.unblock.tr);\n})\n</code></pre>"},{"location":"english/user/#displaying-admin-widgets","title":"\uad00\ub9ac\uc790 \uc704\uc82f \ud45c\uc2dc (Displaying Admin Widgets)","text":"<p>\uad00\ub9ac\uc790 \uc778\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uac04\ub2e8\ud558\uac8c \ud558\uba74 \ub41c\ub2e4. To check if a user is an administrator, you can do it as follows:</p> <pre><code>Admin( builder: () =&gt; Text('I am an admin') );\n</code></pre>"},{"location":"english/user/#user-information-update","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc815 (User Information Update)","text":"<p><code>UserModel.update()</code> \ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \uc218\uc815 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098 UserModel \uc758 \uac1d\uccb4\ub294 DB \uc5d0 \uc800\uc7a5\ub418\uae30 \uc804\uc758 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8\ub798\uc11c, DB \uc5d0 \uc5c5\ub370\uc774\ud2b8 \ub41c \uac12\uc744 \uc4f0\uae30 \uc704\ud574\uc11c\ub294 <code>UserModel.reload()</code> \ub97c \uc4f0\uba74 \ub41c\ub2e4.</p> <pre><code>await user.update(displayName: 'Banana');\nawait user.reload();\nprint(user.displayName);\n</code></pre>"},{"location":"english/user/#displaying-user-data","title":"Displaying user data","text":"<ul> <li>You can use <code>UserDoc</code> or <code>MyDoc</code> to display user data.</li> <li>The most commonly used user properties are name and photos. Fireship provides <code>UserDisplayName</code> and <code>UserAvatar</code> for your convinience.</li> </ul>"},{"location":"english/user/#userdoc","title":"UserDoc","text":"<p>The <code>UserDoc</code> can be used like this:</p> <pre><code>UserDoc(\n  uid: uid,\n  builder: (data) {\n    if (data == null) return const SizedBox.shrink();\n    final user = UserModel.fromJson(data, uid: uid);\n    return Text( user.displayName ?? 'No name' );\n  },\n),\n</code></pre>"},{"location":"english/user/#mydoc","title":"MyDoc","text":"<p>The <code>MyDoc</code> can be used like this:</p> <pre><code>MyDoc(\n  builder: (my) {\n    return Text( user.displayName ?? 'No name');\n  }\n),\n\n</code></pre>"},{"location":"english/user/#userdisplayname","title":"UserDisplayName","text":"<p>The <code>UserDisplayName</code> widget can be used like this:</p> <pre><code>UserDisplayName(uid: uid),\n</code></pre> <p>This will show <code>displayName</code>, not <code>name</code> of the user.</p>"},{"location":"english/user/#useravatar","title":"UserAvatar","text":"<p>The <code>UserAvatar</code> widget can be used like this:</p> <pre><code>UserAvatar(uid: uid, size: 100, radius: 40),\n</code></pre>"},{"location":"english/user/#block-and-unblock","title":"Block and unblock","text":"<p>You can block or unblock other user like below.</p> <pre><code>final re = await my?.block(chat.room.otherUserUid!);\n</code></pre> <p>You may want to let the user know if the other user has blocked or unblocked.</p> <pre><code>final re = await my?.block(chat.room.otherUserUid!);\ntoast(\n  context: context,\n  title: re == true ? 'Blocked' : 'Unblocked',\n  message: re == true ? 'You have blocked this user' : 'You have unblocked this user',\n);\n</code></pre>"},{"location":"english/user/#widgets","title":"Widgets","text":""},{"location":"english/user/#updatebirthdayfield","title":"UpdateBirthdayField","text":"<p>You can use this widget to display birthday and let user to update his birthday in profile screen.</p>"},{"location":"english/user/#usertile","title":"UserTile","text":"<p>Use this widget to display the user information in a list. <code>onTap</code> is optional and if it is not specified, the widget does not capture the tap event.</p> <pre><code>FirebaseDatabaseListView(\n  query: Ref.users,\n  itemBuilder: (_, snapshot) =&gt; UserTile(\n    user: UserModel.fromSnapshot(snapshot),\n    trailing: const Column(\n      children: [\n        FaIcon(FontAwesomeIcons.solidCheck),\n        spaceXxs,\n        Text('\uc778\uc99d\uc644\ub8cc'),\n      ],\n    ),\n    onTap: (user) {\n      user.update(isVerified: true);\n    },\n  ),\n),\n</code></pre> <p>You can use <code>trailing</code> to add your own buttons intead of using <code>onTap</code>.</p>"},{"location":"english/user/#userlistview","title":"UserListView","text":"<p>Fireship provides a widget to display user list. We can use this if we don't have to customize the view.</p> <pre><code>UserListView()\n</code></pre>"},{"location":"english/user/#user-likes","title":"User likes","text":"<ul> <li>User likes are saved under <code>/user-likes</code> and <code>/user-who-i-like</code>.</li> <li>If A likes U, then A is saved under <code>/user-likes/U {A: true}</code> and U is saved under <code>/user-who-i-like/A { U: true}</code>.</li> <li> <p>The fireship client code needs to save <code>/user-likes/U {A: true}</code> only. The cloud function <code>userLike</code> will take action and it will save the counter part <code>/user-who-i-like</code> data and update the <code>noOfLikes</code> on the user's node.</p> </li> <li> <p>The data structure will be like below.</p> </li> <li>When A like U,</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-who-i-like/A { U: true }\n/users/U {noOfLikes: 1}\n</code></pre> <ul> <li>When A, B likes U,</li> </ul> <pre><code>/user-likes/U { A: true, B: true}\n/user-who-i-like/A {U: true}\n/user-who-i-like/B {U: true}\n/users/U {noOfLikes: 2}\n</code></pre> <ul> <li>When B unlinke U,</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-who-i-like/A { U: true }\n/users/U {noOfLikes: 1}\n</code></pre> <ul> <li>When A likes U, W</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-likes/W { A: true }\n/user-who-i-like/A { U: true, W: true }\n/users/U {noOfLikes: 1}\n/users/W {noOfLikes: 1}\n</code></pre> <p>You can use the <code>like</code> method to perform a like and unlike user like bellow.</p> <pre><code>IconButton(\n  onPressed: () async {\n     await my?.like(uid);\n  },\n  icon: const FaIcon(FontAwesomeIcons.heart),\n),\n</code></pre>"},{"location":"korean/","title":"Fireship","text":"<p>\ud50c\ub7ec\ud130\uc640 Firebase \ub97c \ud1b5\ud574\uc11c \ucc44\ud305, \uac8c\uc2dc\ud310 \ubc0f \uc18c\uc15c \ucee4\ubba4\ub2c8\ud2f0 \uc571\uc744 \uc27d\uace0 \ube60\ub974\uac8c \ub9cc\ub4e4 \uc218 \uc788\uac8c \ud574 \uc8fc\ub294 Fireship \ud328\ud0a4\uc9c0 \uc124\uba85 \ubb38\uc11c\uc785\ub2c8\ub2e4.</p> <p>Fireship \uc744 \ud655\uc7a5\ud558\uc5ec \uc1fc\ud551\ubab0, CMS \ub4f1 \ub2e4\uc591\ud55c \uc571\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"korean/#_1","title":"\uc124\uce58","text":"<ul> <li>\uc124\uce58\uc5d0 \ub300\ud55c \uc124\uba85</li> </ul>"},{"location":"korean/#_2","title":"\ud65c\uc6a9\ubc95","text":"<p>\ube4c\ub529 \ube14\ub85d\ub97c \ucc38\uace0\ud558\uc2dc\uba74, fireship \uc744 \ud1b5\ud574\uc11c \uc571\uc744 \uac1c\ubc1c \ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc5d0 \uc5ec\ub7ec\uac00\uc9c0 \uc124\uba85\uc744 \ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>block-beta\n    columns 3\n    %% whitespace has been added to make the code easier to read\n    space             a((\"\ud83d\ude80\"))               space\n                       space:3\n                      c(\"\ud83c\udf1d\"):3\n    d1&lt;[\" \"]&gt;(down) d2&lt;[\" \"]&gt;(down) d3&lt;[\" \"]&gt;(down)\n\n    block:e1:3\n        sube1((\"\ud83d\udc7d\")) sube2((\"\ud83d\udc7e\"))   sube3((\"\ud83d\udef8\"))\n    end\n\n    d4&lt;[\" \"]&gt;(down)                         space:2\n    g(\"\ud83e\udd2f\")         r1&lt;[\" \"]&gt;(right)      f((\"\ud83d\udc6f\u200d\u2642\ufe0f\"))\n\n    a --&gt; c\n</code></pre>"},{"location":"korean/action/","title":"\uc561\uc158 \ub85c\uadf8","text":"<ul> <li> <p>\ud2b9\uc815 \ud65c\ub3d9(\uc608: \ud504\ub85c\ud544 \ubcf4\uae30 \ub610\ub294 \ucc44\ud305 \ub4f1)\uc744 \uc911\ubcf5 \uc5c6\uc774 \uae30\ub85d\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4.   \ucc38\uace0\ub85c \uc911\ubcf5\ud574\uc11c \uae30\ub85d\uc774 \ud544\uc694\ud558\ub2e4\uba74 activity \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> </li> <li> <p>\ud55c\ubc88\ub9cc \uae30\ub85d\ud558\ubbc0\ub85c \ud2b9\uc815 \ud65c\ub3d9\uc744 \ud558\ub8e8\uc5d0 \uba87 \ubc88\ub9cc \ud560 \uc218 \uc788\ub3c4\ub85d \uc81c\ud55c\ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub798\uc11c \uce74\uc6b4\ud2b8 \uae30\ub2a5\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4.</p> </li> <li> <p>\uce74\uc6b4\ud2b8 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uace0, \ud574\ub2f9 \uc561\uc158\uc744 \uc81c\ud55c\ud558\ub824\uba74, \ubbf8\ub9ac \ub3d9\uc791\uc744 \uce74\uc6b4\ud2b8 \ud574 \ub193\uc544\uc57c \ud55c\ub2e4. \ucc44\ud305\ubc29 \uc785\uc7a5\uc774\ub098 \ud504\ub85c\ud544 \ubcf4\uae30\ub97c \ud560 \ub54c, \uce74\uc6b4\ud2b8\ub97c \ud558\uba74 \ub290\ub824\uc11c \uc548\ub41c\ub2e4.</p> </li> <li> <p>Action \uae30\ub2a5\uc740 Activity \uae30\ub2a5\uacfc \uc720\uc0ac\ud55c \uba74\uc774 \uc788\uace0, \ub370\uc774\ud130\uac00 \uacb9\uccd0\uc11c \uc911\ubcf5\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4.</p> </li> </ul>"},{"location":"korean/action/#_2","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4","text":"<ul> <li> <p>\ud55c\ubc88 \ud55c \ub3d9\uc791\uc744 \ub450 \ubc88 \uce74\uc6b4\ud2b8\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc124\uacc4\ud55c\ub2e4.   \uc608\ub97c \ub4e4\uba74, A \uac00 B \ud504\ub85c\ud544\uc744 \ubcf4\uc558\ub2e4\uba74, \uadf8 \uc774\ud6c4 A \uac00 B \uc758 \ud504\ub85c\ud544\uc744 \uba87 \ubc88\uc744 \ub354 \ubcf4\uc544\ub3c4, \ub9e8 \ucc98\uc74c \ud55c\ubc88\ub9cc \uae30\ub85d\uc744 \ud55c\ub2e4.</p> </li> <li> <p><code>action/&lt;uid&gt;/user-profile-view/&lt;otherUserUid&gt; { createdAt: ... }</code> \uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \ubcf4\uae30 \uae30\ub85d \ud558\ub294 \uac83\uc774\ub2e4 \ucc98\uc74c \ud55c\ubc88\ub9cc \uae30\ub85d\ud558\uace0, \uc911\ubcf5 \uae30\ub85d\uc744 \ud558\uc9c0 \uc54a\ub294\ub2e4.</p> </li> <li><code>action/&lt;uid&gt;/chat-join/&lt;chatRoomId&gt; { createdAt: ... }</code> \uc740 \ucc44\ud305\ubc29\uc5d0 \uc811\uc18d\ud55c \uae30\ub85d\uc774\ub2e4. \ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \uc804\uc1a1\ud558\uc9c0 \uc54a\uace0, \uc785\uc7a5\ub9cc \ud558\uba74 \ubc14\ub85c \uae30\ub85d\ub41c\ub2e4. \ucc98\uc74c \ud55c\ubc88\ub9cc \uae30\ub85d\ud558\uace0, \uc911\ubcf5 \uae30\ub85d\uc744 \ud558\uc9c0 \uc54a\ub294\ub2e4.</li> <li><code>action/&lt;uid&gt;/post-create/&lt;post-id&gt;/ { createdAt: ..., category: ... }</code> \uc0c8 \uac8c\uc2dc\uae00 \uae30\ub85d. category \uc640 \ud568\uaed8 \uae30\ub85d\uc744 \ud55c\ub2e4.</li> <li><code>action/&lt;uid&gt;/comment-create/&lt;post-id&gt;/ { createdAt: ..., postId: ... }</code> \uc0c8 \ucf54\uba58\ud2b8 \uae30\ub85d. \ucf54\uba58\ud2b8\uc640 \ud568\uaed8 \uae30\ub85d\uc744 \ud55c\ub2e4.</li> </ul>"},{"location":"korean/action/#_3","title":"\uc81c\ud55c \uae30\ub2a5","text":"<p>\uae30\ubcf8\uc801\uc73c\ub85c action \ub85c\uadf8\ub97c \uae30\ub85d\ud558\ub294 \uac83\uc774\ub2e4. \ucd94\uac00\uc801\uc778 \uae30\ub2a5\uc73c\ub85c \ud2b9\uc815 action \uc744 \uc81c\ud55c \ud560 \uc218 \uc788\ub294\ub370,</p> <p>\uc608\ub97c \ub4e4\uba74, 24\uc2dc\uac04 \uc774\ub0b4\uc5d0 \ud55c \uc0ac\uc6a9\uc790\uac00 \uae30\uc874\uc5d0 \ubcf4\uc9c0 \uc54a\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544\uc744 5\uba85 \uc774\uc0c1 \ubcf4\uc9c0 \ubabb\ud558\uac8c \ub9c9\uc744 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c\ud558\uba74 \uae30\uc874 \uc0ac\uc6a9\uc790\uc758 \ud504\ub85c\ud544\uc744 \ubcf4\ub294 \uac83\uc740 \uce74\uc6b4\ud2b8\uc5d0 \ub4e4\uc5b4\uac00\uc9c0 \uc54a\ub294\ub2e4.</p> <p>\uc989, 24\uc2dc\uac04\uc5d0 \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544\uc744 5\ubc88 \ubcfc \uc218 \uc788\ub2e4\uba74, 24\uc2dc\uac04 \uc774\uc804\uc5d0 \ubcf8 \uc0ac\uc6a9\uc790\uc758 \ud504\ub85c\ud544\uc740 \uce74\uc6b4\ud2b8\uc5d0 \uc18d\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucc38\uace0\ub85c, createdAt \uac12\uc744 \ucd5c\uc2e0 \uac12\uc73c\ub85c \ubcc0\uacbd\ud558\uba74, \ud604\uc7ac\ub85c \ubd80\ud130 24\uc2dc\uac04 \uc774\ub0b4\uc5d0 \uc18d\ud558\uac8c \ub418\ubbc0\ub85c, \ub2e4\uc2dc \uce74\uc6b4\ud2b8\uac00 \ub41c\ub2e4. \ub530\ub77c\uc0ac \ub9ac\uc14b\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, \uc774 \uc810\uc744 \uc798 \ud65c\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <p>\ucc38\uace0, \uae00 \uc4f0\uae30\uc640 \ucf54\uba58\ud2b8 \uc4f0\uae30\ub294 \uc911\ubcf5 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \ubcf4\uae30\uc640 \ucc44\ud305\ubc29 \uc785\uc7a5\uc740 \uc911\ubcf5\uc73c\ub85c \ud504\ub85c\ud544 \ubcf4\uae30 \ubc0f \ucc44\ud305\ubc29 \uc785\uc7a5\uc774 \ub420 \uc218 \uc788\ub294\ub370, \uc774 \ub54c, \ucd5c\ucd08 \ud55c\ubc88\ub9cc \uae30\ub85d\ud55c\ub2e4. \uc8fc\uc758, \uc88b\uc544\uc694\ub294 \uae30\ub85d\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc88b\uc544\uc694\ub294 \uc88b\uc544\uc694 \ud574\uc81c\uac00 \uc788\uc5b4\uc11c, \uc870\uae08 \ub354 \uc0dd\uac01\uc744 \ud574 \ubcfc \ud544\uc694\uac00 \uc788\ub2e4.</p>"},{"location":"korean/action/#_4","title":"\ud65c\uc6a9","text":"<ul> <li> <p>\ub2e4\ub978 \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \ubcf4\uae30\ub97c 1\ubd84\uc5d0 3\ud68c\ub85c \uc81c\ud55c \ud55c \uacbd\uc6b0, 3\ud68c \uc81c\ud55c\uc774 \uac78\ub9ac\uba74, \uc774\uc804\uc5d0 \ubcf8 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uc758 \ud504\ub85c\ud544\ub3c4 \ubaa8\ub450 \ubcfc \uc218 \uc5c6\ub2e4. \ub2e8, \uc774\uc804\uc5d0 \ubcf8 \uc0ac\uc6a9\uc790\uc758 \ud504\ub85c\ud544\uc744 \ub2e4\uc2dc \ubcf4\uae30 \ud574\ub3c4, \uce74\uc6b4\ud2b8\uac00 \uc99d\uac00\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4.</p> </li> <li> <p>\uac8c\uc2dc \uae00 \uc0dd\uc131\uc758 \uacbd\uc6b0, limit \uc5d0 \uac78\ub9ac\uba74, \uae00 \uc791\uc131 \ud398\uc774\uc9c0\ub85c \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \ubbf8\ub9ac \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \uac83\uc774 \uc88b\ub2e4.</p> </li> <li> <p>\ucc44\ud305\ubc29\uc758 \uacbd\uc6b0, \uc785\uc7a5\uc744 \ud560 \ub54c, action \uae30\ub85d\uc744 \ud55c\ub2e4. \uc989, 1\ubd84\uc5d0 2 \uac1c\ub85c \uc81c\ud55c\ud558\uba74, 1\ubd84 \ub0b4\uc5d0 2\ubc88\uc9f8 \uc785\uc7a5\uc740 \ud5c8\uc6a9\ud55c\ub2e4. \ub2e8, \ucc44\ud305\uc744 \ud560 \ub54c, \uc81c\ud55c\uc744 \uacc4\uc0b0\ud574\uc11c \uc5d0\ub7ec\ub97c \ud45c\uc2dc\ud558\ub294\ub370, \uc785\uc7a5\uc740 \uc774\ubbf8 \ud588\uc73c\ub098, \uc785\uc7a5\ud55c \ud6c4 \uc81c\ud55c\uc5d0 \uac78\ub9ac\uac8c\ub41c\ub2e4. \uc989, \ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \ub450\ubc88\uc9f8\uc5d0\uc11c \ubabb\ubcf4\ub0b4\uac8c \ub41c\ub2e4.</p> </li> <li> <p>\ucc38\uace0\ub85c <code>init()</code> \ud568\uc218\ub294 \uc5ec\ub7ec\ubc88 \ud638\ucd9c \ud560 \uc218 \uc788\uace0, \ud544\uc694\ud55c \uac83\ub9cc init \ud558\uba74 \ub418\uace0, \uc774\uc804\uc5d0 init \ud55c \uac83\ub4e4\uc740 \uc720\uc9c0\ub41c\ub2e4.</p> </li> </ul> <p>// void initActivityService() {   //   ActivityService.instance.init(   //     userView: true,   //     userLike: true,   //     postCreate: true,   //     commentCreate: true,   //   );   // }</p> <p>// void initActionService() {   //   ActionService.instance.init(   //     userView: ActionOption(enable: true, limit: 2, minutes: 2),   //     chatJoin: ActionOption(enable: true, limit: 2, minutes: 2),   //     postCreate: ActionOption(enable: true, limit: 2, minutes: 2),   //     commentCreate: ActionOption(enable: true, limit: 2, minutes: 2),   //   );   // }</p>"},{"location":"korean/activity/","title":"\ud65c\ub3d9 \ub85c\uadf8","text":"<ul> <li>\uc0ac\uc6a9\uc790\uac00 \uc5b4\ub5a4 \ud589\ub3d9(\ud65c\ub3d9)\uc744 \ud558\ub294\uc9c0 \uae30\ub85d\uc744 \ub0a8\uae30\uae30 \uc704\ud55c \uac83\uc774\ub2e4.</li> <li>\uc608\ub97c \ub4e4\uba74, \ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\uc758 \uae00 \uc4f0\uae30, \ucf54\uba58\ud2b8 \uc4f0\uae30, \uc88b\uc544\uc694, \ud504\ub85c\ud544 \ubcf4\uae30 \ub4f1\uc758 \ud65c\ub3d9\uc744 \uae30\ub85d\ud558\ub294 \uae30\ub2a5\uc774\ub2e4.</li> <li>\ub2e8, \ucc44\ud305 \uba54\uc2dc\uc9c0 \uc804\uc1a1 \ubc0f \ud504\ub85c\ud544 \uc218\uc815 \ud398\uc774\uc9c0 \ub4f1 \uc5ec\ub7ec\uac00\uc9c0\ub294 \uc81c\uc678 \ub420 \uc218 \uc788\ub2e4.</li> <li>\uc911\ubcf5\uc73c\ub85c \uae30\ub85d\uc744 \ub0a8\uae30\ub294 \uac83\uc774 \ud2b9\uc9d5\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, A \uac00 B \ub97c \uc88b\uc544\uc694 \ud558\uba74 \uae30\ub85d\uc774 \uc0dd\uae30\uace0, \uc88b\uc544\uc694 \ud574\uc81c\ub97c \ud574\ub3c4 \uae30\ub85d\uc774 \uc0dd\uae30\uba70 \uace7 \ubc14\ub85c \ub2e4\uc2dc \uc88b\uc544\uc694 \ud574\ub3c4 \uae30\ub85d\uc774 \uc0dd\uae34\ub2e4. \ub9cc\uc57d \uc911\ubcf5 \uae30\ub85d\uc744 \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, Action \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</li> </ul>"},{"location":"korean/activity/#_2","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4","text":"<ul> <li><code>activity/&lt;uid&gt;/user-profile-view</code> \ub294 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uc758 \uacf5\uac1c \ud504\ub85c\ud544 \ubcf4\uae30.</li> <li><code>activity/&lt;uid&gt;/user-like</code> \ub294 \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc88b\uc544\uc694.</li> <li><code>activity/&lt;uid&gt;/post-create</code> \ub294 \uae00 \uc0dd\uc131.</li> <li><code>activity/&lt;uid&gt;/comment-create</code> \uc740 \ucf54\uba58\ud2b8 \uc0dd\uc131.</li> <li><code>activity/&lt;uid&gt;/chat-join</code> \uc740 \ucc44\ud305\ubc29 \uc785\uc7a5 \uae30\ub85d. \ub3d9\uc77c\ud55c \ucc44\ud305\ubc29\uc5d0 \uc5ec\ub7ec\ubc88 \uc785\uc7a5\uc744 \ud574\ub3c4, \uc785\uc7a5 \ud560 \ub54c\ub9c8\ub2e4 \uae30\ub85d\uc774 \ub41c\ub2e4.</li> </ul> <p>\uac01 \ub370\uc774\ud130\ub294 \uc544\ub798\uc640 \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4.</p> <pre><code>{\n  createdAt: ...server-timestamp...\n  category: ...,\n  postId: ...,\n  commentId: ...,\n  otherUserUid: ...,\n  chatRoomId: ...,\n}\n</code></pre> <p>\uc704 \uad6c\uc870\uc5d0\uc11c, - \uae00\uc758 \uacbd\uc6b0 postId \uc640 category \uac00 \uac19\uc774 \uc800\uc7a5\ub418\uace0, - \ucf54\uba58\ud2b8\uc758 \uacbd\uc6b0, commentId \uc640 postId \uac00 \uac19\uc774 \uc800\uc7a5\ub41c\ub2e4. - \ub2e4\ub978 \uc0ac\uc6a9\uc790\uc758 \ud504\ub85c\ud544\uc744 \ubcf4\ub294 \uacbd\uc6b0, otherUserUid \uc5d0 \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 uid \uac00 \uc800\uc7a5\ub41c\ub2e4. - \ucc44\ud305\ubc29\uc5d0 \uc785\uc7a5\ud558\ub294 \uacbd\uc6b0, chatRoomId \uac00 \uc800\uc7a5\ub41c\ub2e4.</p> <p>\ucc38\uace0\ub85c \ud504\ub85c\uc2e4 \uc218\uc815(profile update) \ub294 \ud558\uc9c0 \uc54a\ub294\ub370, \uadf8 \uc774\uc720\ub294</p> <ul> <li>\ud504\ub85c\ud544 \uc218\uc815\uc740 \uc5ec\ub7ec \uc7a5\uc18c\uc5d0\uc11c \uc5ec\ub7ec \ud615\ud0dc\ub85c \ub098\ud0c0\ub0a0 \uc218 \uc788\ub2e4.   \uc608\ub97c \ub4e4\uba74, \ud544\uc218 \uc815\ubcf4 \uc785\ub825\uc744 \ud560 \ub54c \ub610\ub294 \uc774\ub984\uc744 \uc785\ub825\ud558\ub294 UI \uac00 \ub2e4\ub97c \ub54c \ub4f1. \uadf8\ub9ac\uace0 \ud504\ub85c\ud544 \uc218\uc815 \ud398\uc774\uc9c0 \ub4f1\uc5d0\uc11c \ud560 \uc218 \uc788\ub294\ub370, \ub108\ubb34 \ucc3e\uc740 \ud504\ub85c\ud544 \uc218\uc815\uc774 \ubc1c\uc0dd\ud558\uac70\ub098 \uc5b4\ub514\uc11c \ud558\ub294 \uac83\uc778\uc9c0, \ub610 \ucf54\ub4dc\ub97c \uc5b4\ub514\uc5d0 \uc801\uc6a9\ud574\uc57c\ud558\ub294\uc9c0 \ud587\uac08\ub9ac\uae30 \ub54c\ubb38\uc774\ub2e4.</li> </ul> <p>\ucc38\uace0, Firestore \ub97c \uc0ac\uc6a9\ud558\uba74, A \uac00 B \ub97c \uc88b\uc544\uc694 \ud558\uba74, B \uac00 \ub098\ub97c \uc88b\uc544\uc694 \ud55c \uc0ac\ub78c\ub4e4\uc758 \ubaa9\ub85d\uc744 \ubcfc \uc218 \uc788\uc9c0\ub9cc, Realtime Database \ub294 \uc790\ub8cc \uad6c\uc870\ub97c \ub2e4\uc2dc \ub9cc\ub4e4\uc5b4\uc57c \ud574\uc11c, \uadf8\ub807\uac8c \ud558\uc9c0 \uc54a\ub294\ub2e4. \ubb3c\ub860 \ubcc4\ub3c4\uc758 \uc790\ub8cc\uad6c\uc870\ub97c \ub9cc\ub4e4\uba74 \uac00\ub2a5\ud560 \uac83\uc774\ub2e4.</p> <p>\ucc38\uace0, A \uac00 B \ub97c \uc88b\uc544\uc694 \ud558\uba74 <code>activity/&lt;A&gt;/&lt;push-id&gt;/{ createdAt: ..., otherUserUid: B}</code> \uc640 \uac19\uc774 \uc0dd\uc131\ub41c\ub2e4. \uadf8\ub9ac\uace0 \uc88b\uc544\uc694 \ud574\uc81c\ub97c \ud574\ub3c4 \ub610 \uc0dd\uc131\ub418\uace0, \ub2e4\uc2dc \uc88b\uc544\uc694 \ud574\ub3c4 \ub610 \uc0dd\uc131\ub41c\ub2e4. \uc989, \ud55c \uc0ac\uc6a9\uc790\uc5d0 \ub300\ud574\uc11c \uc5ec\ub7ec\ubc88 \uc88b\uc544\uc694/\ud574\uc81c\ub97c \ud574\ub3c4 \ud560 \ub54c \ub9c8\ub2e4 acitivty \uac00 \uc0dd\uc131\ub41c\ub2e4.</p> <p>\ucc38\uace0, \ub85c\uadf8\uc778\uc740 \ubcf4\ud1b5 \uac00\uc785 \ud560 \ub54c \ucd5c\ucd08\ub85c \ud55c\ubc88 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370, \ub530\ub85c \uae30\ub85d\uc744 \ud558\uc9c0\ub294 \uc54a\ub294\ub2e4.</p>"},{"location":"korean/activity/#_3","title":"\uc0ac\uc6a9\ud558\uae30","text":"<p>\uc544\ub798\uc640 \uac19\uc774 \uc124\uc815\uc744 \ud558\uba74, \ud574\ub2f9 \ub85c\uadf8\uac00 \uae30\ub85d\ub41c\ub2e4.</p> <pre><code>ActivityService.instance.init(\n  userView: true,\n  userLike: true,\n  postCreate: true,\n  commentCreate: true,\n);\n</code></pre> <p>\ucc38\uace0\ub85c, 2024. 02. 26 \ud604\uc7ac, \uc544\uc9c1 \ub85c\uadf8\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uc704\uc82f\uc740 \ub9cc\ub4e4\uc5b4 \ub193\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\ub2e4.</p>"},{"location":"korean/bookmark/","title":"\ubd81\ub9c8\ud06c","text":"<ul> <li>\ubd81\ub9c8\ud06c\ub294 <code>\uc88b\uc544\uc694</code>\uc640\ub294 \ub2e4\ub974\uac8c \ub098\uc911\uc5d0 \ub2e4\uc2dc \ubcf4\uace0 \uc2f6\uc740 \uc815\ubcf4\ub97c \uc800\uc7a5 \ud574 \ub193\ub294 \uac83\uc774\ub2e4.</li> <li>\ubd81\ub9c8\ud06c\ub294 \uc990\uaca8\ucc3e\uae30 \ub610\ub294 Favorite \uacfc \uac19\uc740 \uc758\ubbf8\uc774\ub2e4.</li> <li><code>/bookmarks/&lt;\ub85c\uadf8\uc778_\uc0ac\uc6a9\uc790_UID&gt;/&lt;Target_UID&gt;</code> \uc640 \uac19\uc774 \uc800\uc7a5\ub41c\ub2e4.</li> <li> <p>\uac12\uc5d0</p> <ul> <li>otherUserUid \uac00 \ub4e4\uc5b4\uac00 \uc788\uc73c\uba74, \uc0ac\uc6a9\uc790 \ubd81\ub9c8\ud06c</li> <li>category \uac00 \uc788\uc73c\uba74 \uae00 \ubd81\ub9c8\ud06c</li> <li>commentId \uac00 \uc788\uc73c\uba74 \ucf54\uba58\ud2b8 \ubcf5\ub9c8\ud06c\uc774\ub2e4.</li> <li>\ucc44\ud305\ubc29\uc740 \ubd81\ub9c8\ud06c\ub97c \ud558\uc9c0 \uc54a\ub294\ub2e4.</li> </ul> </li> <li> <p>\ubd81\ub9c8\ud06c\uc640 \ubd81\ub9c8\ud06c \ud574\uc81c\ub294 <code>BookmarkModel.toggle()</code> \uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> </li> </ul>"},{"location":"korean/bookmark/#_2","title":"\ubd81\ub9c8\ud06c \ubaa9\ub85d","text":"<p>\uc544\ub798\ub294 \ubd81\ub9c8\ud06c \uae30\ubcf8 \ucf54\ub4dc\uc774\uba70, \ud544\uc694\ud55c \uacbd\uc6b0, <code>BookMarkListView</code> \ub97c \ubcf5\uc0ac\ud574\uc11c \uc218\uc815\ud574\uc11c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <pre><code>import 'package:fireship/fireship.dart';\nimport 'package:flutter/material.dart';\n\nclass BookmarkScreen extends StatefulWidget {\n  static const String routeName = '/Bookmark';\n  const BookmarkScreen({super.key});\n\n  @override\n  State&lt;BookmarkScreen&gt; createState() =&gt; _BookmarkScreenState();\n}\n\nclass _BookmarkScreenState extends State&lt;BookmarkScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Favorites'),\n      ),\n      body: const BookmarkListView(),\n    );\n  }\n}\n</code></pre>"},{"location":"korean/building_blocks/","title":"\ube4c\ub529 \ube14\ub85d","text":"<p>\ubcf8 \ubb38\uc11c\uc5d0\uc11c\ub294 Fireship \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ubcf8 \uc704\uc82f\ub4e4\uc744 \uc0ac\uc6a9\uc5ec \ub808\uace0 \ube14\ub85d\uc744 \uc313\ub4ef\uc774 \uc571\uc744 \uc644\uc131\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud55c\ub2e4. \ubb3c\ub860 \uae30\ubcf8 \uc704\uc82f\ub4e4\uc758 \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uc790\uc2e0\ub9cc\uc758 \uc704\uc82f\uc73c\ub85c \ubcc0\ud615\ud574\uc11c \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4.</p>"},{"location":"korean/building_blocks/#_2","title":"\uc5d0\ub7ec \ud578\ub4e4\ub9c1","text":"<p>Fireship \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc704\uc82f \ub610\ub294 \ub85c\uc9c1\uc5d0\uc11c exception \uc744 \ubc1c\uc0dd \uc2dc\ud0a4\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub7ec\ud55c exception \uc911\uc5d0\uc11c \uc5b4\ub5a4 \uac83\uc740 fireship \ub0b4\uc5d0\uc11c \ud578\ub4e4\ub9c1\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \uc989, \uc571 \ub0b4\uc5d0\uc11c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \ud574\uc57c\ud558\ub294 \uac83\uc774\ub2e4.</p> <p>\uc571 \ub0b4\uc5d0\uc11c \uc5d0\ub7ec \ucc98\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \ud558\ub294 runZoneGuarded \ubc29\uc2dd\uc73c\ub85c \ud558\uba74 \ub41c\ub2e4.</p> <p>\uc608\uc81c</p> <pre><code>runZonedGuarded(\n    () async {\n      runApp(const MyApp());\n      /// Flutter error happens here like Overflow, Unbounded height\n      FlutterError.onError = (FlutterErrorDetails details) {\n        FlutterError.dumpErrorToConsole(details);\n      };\n    },\n    zoneErrorHandler,\n  );\n  zoneErrorHandler(error, stackTrace) {\n    print(\"----&gt; runZoneGuarded() : exceptions outside flutter framework.\");\n    print(\"---&gt; runtimeType: ${error.runtimeType}\"); \n    if (error is FirebaseAuthException) {\n      if (AppService.instance.smsCodeAutoRetrieval) {\n        if (error.code.contains('session-expired') ||\n            error.code.contains('invalid-verification-code')) {\n          print(\"....\");\n          return;\n        }\n      } else {}\n\n      toast(\n          context: context,\n          message: 'Error :  ${error.code} - ${error.message}');\n    } else if (error is FirebaseException) {\n      print(\"FirebaseException :  $error }\");\n    } else {\n      print(\"Unknown Error :  $error\");\n      // toast(context: context, message: \"\ubc31\uc5d4\ub4dc \uc5d0\ub7ec :  ${error.code} - ${error.message}\");\n    }\n    debugPrintStack(stackTrace: stackTrace);\n  }\n</code></pre>"},{"location":"korean/building_blocks/#_3","title":"\ub2e4\uad6d\uc5b4","text":"<p>\ub2e4\uad6d\uc5b4\ub97c \uc4f0\uae30 \uc704\ud574\uc11c\ub294 iOS \uc5d0\uc11c\ub294 <code>Info.plist</code> \uc5d0 \uc544\ub798\uc640 \uac19\uc774 \ucd94\uac00\ub97c \ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4.</p> <pre><code>    &lt;key&gt;CFBundleLocalizations&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;en&lt;/string&gt;\n        &lt;string&gt;ko&lt;/string&gt;\n    &lt;/array&gt;\n</code></pre> <p>\uadf8\ub9ac\uace0 \uc571\uc5d0 \uc801\uc808\ud788 \uc5b8\uc5b4 \uc124\uc815\uc744 \ud558\uace0 <code>TextService.instance.texts</code> \uc5d0 \uad6d\uac00\ubcc4 \uc5b8\uc5b4\ub97c \uc124\uc815\ud558\uba74 \ub41c\ub2e4.</p> <pre><code>// \uc544\ub798\uc640 \uac19\uc774 \uc6d0\ud558\ub294 \uc5b8\uc5b4\ub97c \ucd94\uac00\ud558\uace0,\nTextService.instance.texts = {\n  ...TextService.instance.texts,\n    'login': systemLanguageCode == 'ko' ? '\ub85c\uadf8\uc778' : 'Login',\n};\n\n// \uc544\ub798\uc544 \uac19\uc774 \uc4f0\uba74 \ub41c\ub2e4.\nText('login'.tr);\n</code></pre>"},{"location":"korean/building_blocks/#_4","title":"\ub85c\uadf8\uc778 \uad00\ub828 \uc704\uc82f","text":""},{"location":"korean/building_blocks/#simpleemailpasswordloginform","title":"SimpleEmailPasswordLoginForm","text":"<p>\uac04\ub2e8\ud55c email \uacfc \ube44\ubc00\ubc88\ud638 \ub85c\uadf8\uc778 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc774 \uc704\uc82f\uc758 \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uc218\uc815\ud574\uc11c \uc4f0\uba74 \ub41c\ub2e4.</p>"},{"location":"korean/building_blocks/#simplephonesignin","title":"SimplePhoneSignIn","text":"<p>\uac04\ub2e8\ud55c \uc804\ud654\ubc88\ud638 \ub85c\uadf8\uc778 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4.</p> <p>\uc608\uc81c</p> <pre><code>Scaffold(\n  appBar: AppBar(\n    title: const Text('\uc804\ud654\ubc88\ud638 \ub85c\uadf8\uc778'),\n  ),\n  body: Padding(\n    padding: const EdgeInsets.all(lg),\n    child: SimplePhoneSignIn(\n      emailLogin: true,\n      reviewEmail: Config.reviewEmail,\n      reviewPassword: Config.reviewPassword,\n      reviewPhoneNumber: Config.reviewPhoneNumber,\n      reviewRealPhoneNumber: Config.reviewRealPhoneNumber,\n      reviewRealSmsCode: Config.reviewRealSmsCode,\n      onCompleteNumber: (value) {\n        String number = value.trim();\n        number = number.replaceAll(RegExp(r'[^\\+0-9]'), '');\n        number = number.replaceFirst(RegExp(r'^0'), '');\n        number = number.replaceAll(' ', '');\n\n        if (number.startsWith('10')) {\n          return '+82$number';\n        } else if (number.startsWith('9')) {\n          return '+63$number';\n        } else\n        // \ud14c\uc2a4\ud2b8 \uc804\ud654\ubc88\ud638\n        if (number.startsWith('+1')) {\n          return number;\n        } else if (number == Config.reviewPhoneNumber) {\n          return number;\n        } else {\n          error(\n              context: context,\n              title: '\uc5d0\ub7ec',\n              message:\n                  '\uc5d0\ub7ec\\n\ud55c\uad6d \uc804\ud654\ubc88\ud638 \ub610\ub294 \ud544\ub9ac\ud540 \uc804\ud654\ubc88\ud638\ub97c \uc785\ub825\ud558\uc138\uc694.\\n\uc608) 010 1234 5678 \ub610\ub294 0917 1234 5678');\n          throw '\uc804\ud654\ubc88\ud638\uac00 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc22b\uc790\ub9cc \uc785\ub825\ud558\uc138\uc694.';\n        }\n      },\n      onSignin: () {\n        context.pop();\n        context.go(HomeScreen.routeName);\n      },\n    ),\n  ),\n);\n</code></pre>"},{"location":"korean/building_blocks/#chat-widgets","title":"Chat widgets","text":"<p>Whatever app that has the chat feature has common screens and widgets.</p>"},{"location":"korean/building_blocks/#chat-room-list","title":"Chat room list","text":"<p>To list chat rooms that the login user joined, use <code>DefaultChatRoomListView</code> widget. You can use the options to customize. Or simply copy all the code of the widget and customize with your own code.</p>"},{"location":"korean/building_blocks/#chat-room-create","title":"Chat room create","text":""},{"location":"korean/building_blocks/#_5","title":"\uc4f0\uae30 \uc26c\uc6b4 \uac00\ud3b8\ud55c \uc704\uc82f","text":""},{"location":"korean/building_blocks/#labelfield","title":"LabelField","text":"<p>\uc704\uc82f \ud56d\ubaa9\uc744 \ucc38\uace0\ud55c\ub2e4.</p>"},{"location":"korean/building_blocks/#-myprofilesticker","title":"\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc2a4\ud2f0\ucee4 \ud45c\uc2dc - MyProfileSticker","text":"<p>\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc2a4\ud2f0\ucee4\ub294 \uc544\ub798\uc758 \uc0ac\uc9c4 \ucc98\ub7fc \uc67c\ucabd\uc5d0 \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uc758 \uc0ac\uc9c4, \uc624\ub978\ucabd\uc5d0 \ud504\ub85c\ud544 \uc218\uc815 \ubc84\ud2bc, \uadf8\ub9ac\uace0 \uc911\uc559 \uc0c1\ub2e8\uc5d0 \uc774\ub984, \uc911\uc559\ud558\ub2e8\uc5d0 \uc0c1\ud0dc \uba54\uc2dc\uc9c0\ub97c \ud45c\uc2dc\ud574 \uc8fc\ub294 \uc704\uc82f\uc774\ub2e4.</p> <p>\ub514\uc790\uc778 \ubcc0\uacbd\uc740 <code>Theme</code> \uc704\uc82f\uc73c\ub85c \ud558\uace0, \ud544\uc694\ud55c \uacbd\uc6b0, \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uc218\uc815\ud558\uc5ec \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <p></p> <p>\uc544\ub798\uc758 \ucf54\ub4dc\ub294 Sliver \uc2a4\ud06c\ub864 \ubdf0\uc5d0 \ucd94\uac00\ud55c \uac83\uc73c\ub85c \ud504\ub85c\ud544 \uc218\uc815 \ubc84\ud2bc\uc758 \ub514\uc790\uc778\uc744 \ubcc0\uacbd \ud55c \uac83\uc774\ub2e4. \uc774 \ucc98\ub7fc \ub514\uc790\uc778\uc740 \uc18c\uc2a4 \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uace0 \uc5bc\ub9c8\ub4e0\uc9c0 \ubcc0\uacbd \ud560 \uc218 \uc788\ub2e4.</p> <pre><code>SliverToBoxAdapter(\n  child: Theme(\n    data: Theme.of(context).copyWith(\n      chipTheme: ChipThemeData(\n        padding:\n            const EdgeInsets.symmetric(vertical: 0, horizontal: 0),\n        backgroundColor: context.onSurface.withAlpha(10),\n        side: BorderSide(color: context.onSurface.withAlpha(20)),\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(20),\n        ),\n        selectedColor: context.primary,\n        labelStyle:\n            Theme.of(context).textTheme.labelMedium!.copyWith(\n                  fontSize: 14,\n                  fontWeight: FontWeight.w400,\n                  color: context.onSurface,\n                ),\n      ),\n    ),\n    child: const MyProfileSticker(),\n  ),\n),\n</code></pre>"},{"location":"korean/building_blocks/#-newprofilephotos","title":"\uc0ac\uc6a9\uc790 \ubaa9\ub85d - NewProfilePhotos","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc0ac\uc9c4\uc744 \ubcc0\uacbd\ud558\uba74, <code>/user-profile-photos</code> \uc5d0 \ubcf5\uc0ac\ub41c\ub2e4. <code>NewProfilePhotos</code> \ub294 \uc774 \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c \uc0ac\uc6a9\uc790\uc758 \uc0ac\uc9c4\uc744 \ud654\uba74\uc5d0 \ud45c\uc2dc\ud55c\ub2e4.</p> <p></p> <p>\uc608\uc81c</p> <pre><code>NewProfilePhotos()\n</code></pre>"},{"location":"korean/chat/","title":"\ucc44\ud305","text":""},{"location":"korean/chat/#design-concept","title":"Design Concept","text":"<ul> <li>You can open multiple chat rooms simultaneously.</li> </ul>"},{"location":"korean/chat/#chat","title":"Chat \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad6c\uc870","text":"<ul> <li><code>/chat-rooms</code> \ucc44\ud305 \ubc29 \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\ub294 \uacbd\ub85c.</li> <li><code>/chat-messages</code> \ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \uc800\uc7a5\ud558\ub294 \uacbd\ub85c</li> <li> <p><code>/chat-joins</code> \ucc44\ud305 \ubc29\uc5d0 \ucc38\uc5ec\ud55c \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ucc44\ud305\ubc29 \uc815\ubcf4\ub97c \uc7a5\ud558\ub294 \uacbd\ub85c. \uc608\ub97c \ub4e4\uc5b4, \uc0ac\uc6a9\uc790\ubcc4 \uc77d\uc9c0 \uc54a\uc740 (\uc0c8\ub85c\uc6b4) \uba54\uc2dc\uc9c0 \uc218\ub97c \ud45c\uc2dc\ud558\ub294 \ub370 \uc0ac\uc6a9. \ucc38\uace0\ub85c, <code>/chat-rooms</code> \uacfc <code>/chat-joins</code> \ub458 \ubaa8\ub450 <code>ChatRoomModel</code> \uc744 \uc0ac\uc6a9\ud574\uc11c modeling \ud55c\ub2e4.</p> </li> <li> <p><code>noOfUsers</code> is updated in <code>/chat-rooms</code> when a new user joins or leaves a group chat room,</p> <ul> <li>and is updated in <code>/chat-joins</code> when a chat message is sent.</li> </ul> </li> <li> <p>When sending a chat message, if the text contains a URL, information for previewing the URL is extracted. The appropriate values are stored in the following fields below the message:</p> <ul> <li><code>previewUrl</code> - URL</li> <li><code>previewTitle</code> - Title</li> <li><code>previewDescription</code> - Description</li> <li><code>previewImageUrl</code> - Image</li> </ul> </li> </ul>"},{"location":"korean/chat/#chat-rooms","title":"chat-rooms","text":"<ul> <li><code>blocks</code> - \uad00\ub9ac\uc790\uac00 \ucc44\ud305\ubc29\uc758 \ube14\ub7ed \ub9ac\uc2a4\ud2b8\ub97c \uad00\ub9ac\ud55c\ub2e4. \uc5ec\uae30\uc5d0 \ucd94\uac00\ub41c \uc0ac\uc6a9\uc790\ub294 \ucc44\ud305\ubc29\uc5d0 \uc785\uc7a5\uc744 \ud560 \uc218 \uc5c6\ub2e4. \ub610\ud55c \uc790\ub3d9\uc73c\ub85c \ucc44\ud305\ubc29\uc5d0\uc11c \ud295\uaca8\ub098\uac00\ub3c4\ub85d \ud55c\ub2e4. (TODO: 2024-02-22 \ud604\uc7ac \uae30\ub2a5 \uad6c\ud604\ub418\uc9c0 \uc54a\uc74c.)</li> </ul>"},{"location":"korean/chat/#chat-messages","title":"chat-messages \uad6c\uc870","text":"<ul> <li><code>uid</code> \uba54\uc2dc\uc9c0 \uc804\uc1a1\ud55c \uc0ac\uc6a9\uc790\uc758 uid</li> <li><code>createdAt</code> \uba54\uc2dc\uc9c0 \uc804\uc1a1\ud55c \uc2dc\uac04</li> <li><code>order</code> \uba54\uc2dc\uc9c0 \ubaa9\ub85d \uc21c\uc11c</li> <li><code>text</code> \ud14d\uc2a4\ud2b8\ub97c \uc804\uc1a1\ud55c \uacbd\uc6b0.</li> <li><code>url</code> \uc0ac\uc9c4 URL. \uc0ac\uc9c4\uc744 \uc804\uc1a1\ud55c \uacbd\uc6b0.</li> </ul>"},{"location":"korean/chat/#_2","title":"\ucf54\ub529 \uae30\ubc95","text":""},{"location":"korean/chat/#_3","title":"\ucc44\ud305 \ubc29\uc5d0\uc11c \uc0ac\uc6a9\uc790\uc758 \uc804\uccb4 \ucc44\ud305 \uba54\uc2dc\uc9c0 \uac00\uc838\uc624\uae30","text":"<p>\uc544\ub798\uc640 \uac19\uc774 \ud558\uba74, \ud574\ub2f9 \ucc44\ud305\ubc29\uc758 \ubaa8\ub4e0 \uba54\uc2dc\uc9c0\ub97c <code>uid</code> \uc21c\uc11c\ub85c \ud55c\ubc88\uc5d0 \ub2e4 \uac00\uc838\uc628\ub2e4. \ub2e4\uc6b4\ub85c\ub4dc \uc6a9\ub7c9\uc774 \ub9ce\uc544 \ub370\uc774\ud130\ub97c \ub108\ubb34 \uac00\uc838\uc624\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758 \ud560 \ud544\uc694\uac00 \uc788\ub2e4.</p> <pre><code>final snapshot = await Ref.chatRoomMessages('chat-room-id')\n    .orderByChild('uid')\n    .get();\n\nif (snapshot.exists) {\n  print((snapshot.value as Map).keys.length);\n  for (var key in (snapshot.value as Map).keys) {\n    print((snapshot.value as Map)[key]['uid'] +\n        ' : ' +\n        ((snapshot.value as Map)[key]['text'] ?? '--'));\n  }\n}\n</code></pre>"},{"location":"korean/chat/#_4","title":"\ucc44\ud305\ubc29\uc5d0\uc11c \ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\uc758 \uba54\uc2dc\uc9c0 \ud55c \uac1c\ub9cc \uac00\uc838\uc624\uae30","text":"<p>\uc608\ub97c \ub4e4\uc5b4, \ubaa8\ub4e0 \ud68c\uc6d0\uc774 \uc758\ubb34\uc801\uc73c\ub85c(\uc790\ub3d9\uc73c\ub85c \ucc44\ud305\ubc29 \uc785\uc7a5) \uc0ac\uc6a9\ud558\ub294 \uc804\uccb4 \ucc44\ud305\ubc29\uc774 \uc788\ub294 \uacbd\uc6b0, \ud68c\uc6d0 \uac00\uc785\uc744 \ud55c \ub2e4\uc74c, \ud574\ub2f9 \ucc44\ud305 \ubc29\uc5d0 (\uac00\uc785\uc778\uc0ac) \ucc44\ud305\uc744 \ub0a8\uae30\ub3c4\ub85d \uad8c\uc720\ud558\ub294 \uacbd\uc6b0, \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uac00 \ud574\ub2f9 \ucc44\ud305\ubc29\uc5d0 \ucc44\ud305\uc744 \ud588\ub294\uc9c0 \uc548\ud588\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c, \ub531 \ud558\ub098\uc758 \ucc44\ud305 \uba54\uc2dc\uc9c0\ub9cc \uac00\uc838\uc640\uc11c, \ucc44\ud305\uc744 \ud588\ub294\uc9c0 \ud558\uc9c0 \uc54a\uc558\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4.</p> <p>\uc544\ub798\uc640 \uac19\uc774 \ucf54\ub529\uc744 \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>final snapshot = await Ref.chatRoomMessages('chat-room-id')\n    .orderByChild('uid')\n    .startAt(myUid!)\n    .endAt('$myUid\\f8ff')\n    .limitToFirst(1)\n    .get();\n\nif (snapshot.exists) {\n  print((snapshot.value as Map).entries.first.value['text']);\n}\n</code></pre>"},{"location":"korean/chat/#get-chatroommodel-on-chatroom","title":"Get ChatRoomModel on ChatRoom","text":"<ul> <li>The complete chat room model instance is needed before display the chat room message. For instance,<ul> <li>to check if the user is in the room,</li> <li>to check if site preview displaying or image displaying options,</li> <li>to show password input box based on the chat room settings,</li> <li>etc</li> </ul> </li> </ul>"},{"location":"korean/chat/#order","title":"Order","text":"<ul> <li>Chat message order is sorted by the last message's <code>order</code> field.<ul> <li>It must have a smaller value than the previous message.</li> <li>When you send a chat message programatically without <code>order</code>, the message may be shown at the top.</li> </ul> </li> </ul>"},{"location":"korean/chat/#creating-chat-room","title":"Creating Chat Room","text":"<p>A simple way to create a chat room is as follows:</p> <pre><code>ChatModel chat = ChatModel(room: ChatRoomModel.fromRoomdId('all'))..join();\nChatMessageListView(chat: chat);\n</code></pre> <p>Creating a <code>ChatModel</code> alone does not create the chat room. Therefore, <code>join()</code> is called additionally.</p> <p>When join() is called, {[uid]: true} is created in /chat-rooms/all/users.</p> <p>And when the <code>ChatMessageListView</code> widget is displayed on the screen, it internally saves <code>{order: 0}</code> in RTDB <code>chat-joins/all</code> in <code>ChatMessageListView::initState() -&gt; ChatModel::resetNewMessage()</code>.</p> <p>However, if you want to create a chat room more easily, you can use the pre-made <code>ChatService.instance.showChatRoomCreate()</code> function. If you want to customize the design, you can copy and modify <code>DefaultChatRoomEditDialog</code>.</p>"},{"location":"korean/chat/#viewing-chat-room","title":"Viewing Chat Room","text":"<p>A <code>ChatRoom()</code> widget can be used to show chat room (room's messages with room input box).</p> <pre><code>// For 1:1 chat room, using other user's uid\nChatRoom(uid: 'user-uid');\n\n...\n\n// Using room-id for 1:1 or group chat room\nChatRoom(roomId: 'room-id');\n\n...\n\n// Using snapshot -&gt; ChatRoomModel\nChatRoomModel chatRoom = ChatRoomModel.fromSnapshot(dataSnapshot);\nChatRoom(room: chatRoom);\n</code></pre>"},{"location":"korean/chat/#updating-chat-room","title":"Updating Chat Room","text":"<p>To update a chat room, call <code>ChatService.instance.showChatRoomSettings(roomId: ...)</code>, and use the <code>DefaultChatRoomEditDialog</code> widget, which is the same widget used for creating a chat room.</p> <p>When updating a chat room, you can optionally specify authenticated members and gender. If the <code>gender</code> has a value of <code>M</code> or <code>F</code>, only members of that gender can access (enter) the room. For <code>verified</code>, regardless of gender, if the user is verified, they can access the room. Note that authenticated members and gender refer to user information.</p>"},{"location":"korean/chat/#sending-chat-messages","title":"Sending Chat Messages","text":"<p>To send a chat message into a room (or to a user), <code>ChatMessageInputBox()</code> can be used as Input box. You can copy this widget and customize by yourself.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\n// the `chat` should be the model of the room\nChatModel chat = ChatModel(room: room);\n\nChatMessageInputBox(\n  chat: chat,\n),\n</code></pre> <p>You can also send a chat message to a user or to a room programatically (without entering a chat room screen) like below.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\nChatModel chat = ChatModel(room: room);\n\n// This may throw error if user is not logged in.\nchat.sendMessage(text: 'Text Message to send', url: 'photo.url.com');\n\n</code></pre>"},{"location":"korean/chat/#getting-chat-messages-in-a-room","title":"Getting Chat Messages in a Room","text":"<p>To display chat messages in a room, <code>ChatMessageListView()</code> can be used.</p> <pre><code>// the ChatRoomModel is required. Get it.\nChatRoomModel room = ChatRoomModel.fromSnaphot(snapshot);\n\n// the `chat` should be the model of the room\nChatModel chat = ChatModel(room: room);\n\nChatMessageListView(\n  chat: chat,\n),\n</code></pre> <p>For customization, these can be used. Edit them as needed:</p> <pre><code>DatabaseReference ref = ChatService.instance.messageRef(roomId: roomId).orderByChild('order');\n\nFirebaseDatabaseQueryBuilder(\n  pageSize: 100,\n  query: ref,\n  builder: (context, snapshot, _) {\n    if (snapshot.isFetching) {\n      return CircularProgressIndicator();\n    }\n    if (snapshot.hasError) {\n      return Text('Something went wrong! ${snapshot.error}');\n    }\n    if (snapshot.docs.isEmpty) {\n      return Center(child: Text('There is no message, yet.'));\n    }\n    // finally return the list\n    return ListView.builder(\n      reverse: true,\n      itemCount: snapshot.docs.length,\n      itemBuilder: (context, index) {\n        if (snapshot.hasMore &amp;&amp; index + 1 == snapshot.docs.length) {\n          snapshot.fetchMore();\n        }\n        final message = ChatMessageModel.fromSnapshot(snapshot.docs[index]);\n\n        /// \ucc44\ud305\ubc29\uc758 \ub9e8 \ub9c8\uc9c0\ub9c9 \uba54\uc2dc\uc9c0\uc758 order \ub97c \uc9c0\uc815.\n        chat.resetRoomMessageOrder(order: message.order);\n\n        return YourCustomChatBubble(\n          message: message,\n        );\n      },\n\n    );\n  },\n);\n\n</code></pre>"},{"location":"korean/chat/#opening-the-settings-for-the-chat-room","title":"Opening the Settings for the Chat Room","text":"<p>To open the</p> <pre><code>ChatService.instance.showChatRoomSettings(\n  context: context,\n  roomId: chat.room.id,\n);\n</code></pre>"},{"location":"korean/chat/#chat-room-list","title":"\ucc44\ud305\ubc29 \ubaa9\ub85d (Chat Room List)","text":"<p>Due to the characteristics of RTDB, it is challenging to list chat rooms:</p> <ul> <li>My 1:1 chat room list by date</li> <li>My entire chat room list by date</li> <li>Open chat list by date</li> </ul> <p>Therefore, by using <code>isSingleChat</code> with a negative time, you can display my 1:1 chat room list in chronological order. This is the same for <code>isGroupChat</code> and <code>isOpenGroupChat</code>.</p> <p>To display the entire chat room list at once, get all chat rooms and display them. For example, when displaying my 1:1 chat room list, get the entire list and display it in chronological order. Do the same for my entire group chat room and all open chat room. However, this method may not be suitable if each individual's (user's) chat rooms are too numerous. Overall, it seems reasonable to have up to 500 per person. Up to 2,000 should also be acceptable. However, if a user has more than 2,000 rooms, it might be a bit challenging. Therefore, limiting the number of rooms may be one way. Additionally, having more than 2,000 open chats might be problematic.</p> <p>Here is an example code to show chat room list. This will show list of all Chat Rooms by the currently logged in user. Take note that the <code>Field.order</code> is the same as 'order'.</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.joinsRef\n      .child(myUid!)\n      .orderByChild(Field.order),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    if (snapshot.isFetching) {\n      return const Center(child: CircularProgressIndicator());\n    }\n    if (snapshot.hasError) {\n      return Text('Something went wrong! ${snapshot.error}');\n    }\n    if (snapshot.hasMore == false &amp;&amp; snapshot.docs.isEmpty) {\n      return Text('No chat rooms');\n    }\n    return ListView.builder(\n      padding: EdgeInsets.zero,\n      itemCount: snapshot.docs.length,\n      itemBuilder: (context, index) {\n        if (snapshot.hasMore &amp;&amp; index + 1 == snapshot.docs.length) {\n          snapshot.fetchMore();\n        }\n        final room = ChatRoomModel.fromSnapshot(snapshot.docs[index]);\n        return ChatRoomListTile(room: room);\n      },\n    );\n  },\n);\n\n</code></pre>"},{"location":"korean/chat/#chat-list-widget","title":"Chat List Widget","text":"<p>Fireship provides a default Widget for displaying a list of Chat Rooms if we don't have to customize it.</p> <p>Chat List is a List view of Chats. We can use this widget to show a list of chats.</p> <pre><code>DefaultChatRoomListView(),\n</code></pre>"},{"location":"korean/chat/#querying-specific-type-of-chat-rooms","title":"Querying Specific Type of Chat Rooms","text":"<p>You may want to show specific types of Chat Rooms, like Single Chat Rooms only, Group Chats Only, or Open Group Chats only.</p>"},{"location":"korean/chat/#chat-rooms-joined-by-the-currently-logged-in-user-joinsref","title":"Chat Rooms Joined by the Currently Logged in User (joinsRef)","text":"<p>In the earlier example, the query in FirebaseDatabaseQueryBuilder uses <code>Field.order</code>:</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.joinsRef\n      .child(myUid!)\n      .orderByChild(Field.order)\n      .startAt(false),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    ...\n  },\n);\n</code></pre> <p>For <code>ChatService.instance.joinsRef.child(myUid!)</code>, the <code>joinsRef</code> is the reference for the chat rooms. In RTDB the node is <code>chat-joins/user-uid/room-id</code>. Therefore, <code>myUid</code> is required.</p> <p>The <code>Field.order</code> is the same with 'order'. This can be used to get all the group chat that the currently logged in user is joined. Here are the list of fields can be used in <code>joinsRef</code>:</p> <ol> <li><code>Field.order</code> - same as 'order'.</li> <li>All chat room - single or group chat</li> <li><code>Field.singleChatOrder</code> - same as 'singleChatOrder'.</li> <li>All single chat room</li> <li><code>Field.groupChatOrder</code> - same as 'groupChatOrder'.</li> <li>All group chat room</li> </ol>"},{"location":"korean/chat/#chat-rooms-not-necessarily-joined-by-the-currently-logged-in-user-roomsref","title":"Chat Rooms not Necessarily Joined by the Currently Logged in User (roomsRef)","text":"<p>For <code>ChatService.instance.roomsRef</code>, the <code>roomsRef</code> is the reference for the chat rooms. In RTDB the node is <code>chat-rooms/roon-id</code>.</p> <pre><code>FirebaseDatabaseQueryBuilder(\n  query: ChatService.instance.roomsRef\n      .orderByChild(Field.openGroupChatOrder)\n      .startAt(false),\n  pageSize: 50,\n  builder: (context, snapshot, _) {\n    ...\n  }\n);\n</code></pre> <p>Here are the list of fields can be used in <code>roomsRef</code>:</p> <ol> <li><code>Field.groupChatOrder</code> - same as 'groupChatOrder'.</li> <li>All group chat room - open or closed</li> <li><code>Field.openGroupChatOrder</code> - same as 'openGroupChatOrder'.</li> <li>All open group chat room</li> </ol>"},{"location":"korean/chat/#toggling-notifications","title":"Toggling Notifications","text":"<p>The on and off switch for push notification is set under each user's uid in <code>users</code> field of the chat room. For instance, if the value is <code>true</code> like <code>/chat-rooms/&lt;room-id&gt;/users/ {uid-a: true}</code>, then the user of <code>uid-a</code> will get push notification. If it's <code>false</code>, then the user will not get any push notification.</p> <p>You can set true or false for the login uid in the 'users' field of the chat room like below;</p> <pre><code>IconButton(\n  onPressed: () async {\n    await chat.room.toggleNotifications();\n  },\n  icon: Database(\n    path: Path.chatRoomUsersAt(chat.room.id, myUid!),\n    builder: (v) =&gt; v == true\n        ? const Icon(Icons.notifications_rounded)\n        : const Icon(Icons.notifications_outlined),\n  ),\n),\n</code></pre> <p>When <code>v</code> is true, notifications is toggled on. Else, toggled off.</p>"},{"location":"korean/chat/#group-chat-room","title":"Group Chat Room","text":""},{"location":"korean/chat/#creating-a-group-chat","title":"Creating a Group Chat","text":"<p>Use <code>ChatService.instance.showChatRoomCreate()</code> for the default way on creating a chat room.</p> <pre><code>\nIconButton(\n  onPressed: () async {\n    final room = await ChatService.instance.showChatRoomCreate(context: context);\n    // It is recommended to show the newly created room to the user.\n    if (room != null &amp;&amp; mounted) {\n      ChatService.instance.showChatRoom(context: context, roomId: room.id);\n    }\n  },\n  icon: const Icon(Icons.comment),\n),\n\n</code></pre> <p>Automatically, creator of the room will join to the newly created room after submitting.</p>"},{"location":"korean/chat/#inviting-users-into-a-chat-room","title":"Inviting users into a Chat Room","text":"<p>To show the default invite screen, add these code:</p> <pre><code>IconButton(\n  onPressed: () async {\n    ChatService.instance.showInviteScreen(context: context, room: chat.room);\n  },\n  icon: const Icon(Icons.person_add_rounded),\n),\n</code></pre> <p>The <code>ChatService.instance.showInviteScreen()</code> will show a list of users in a list view who can be added. It uses <code>DefaultChatRoomInviteScreen</code> widget. Check this code for reference in customization:</p> <pre><code>// Showing the list screen\nawait showGeneralDialog&lt;ChatRoomModel?&gt;(\n  context: context,\n  pageBuilder: (_, __, ___) =&gt; CustomChatRoomInviteScreen(room: room),\n);\n...\n// Update this into your custom Invite screen\nclass CustomChatRoomInviteScreen extends StatelessWidget {\n  const CustomChatRoomInviteScreen({\n    super.key,\n    required this.room,\n  });\n  final ChatRoomModel room;\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('\uce5c\uad6c \ucd08\ub300'),\n      ),\n      body: FirebaseDatabaseListView(\n        query: Ref.users.orderByChild('order'),\n        itemBuilder: (context, snapshot) {\n          final user = UserModel.fromSnapshot(snapshot);\n          return ListTile(\n            leading: UserAvatar(uid: user.uid),\n            title: Text(user.displayName ?? ''),\n            trailing: const Icon(Icons.add),\n            onTap: () async {\n              await room.invite(user.uid);\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"korean/chat/#group-chat-members","title":"Group Chat Members","text":"<p>To show the default members screen, add these code:</p> <pre><code>await ChatService.instance.showMembersScreen(\n  context: context,\n  room: chat.room,\n);\n</code></pre> <p>It uses the <code>DefaultChatRoomMembersScreen(room: room)</code> when it is not customized.</p>"},{"location":"korean/chat/#removing-a-group-chat-member","title":"Removing a Group Chat Member","text":"<p>Here is an example of a button that removes a user from the group chat. It uses <code>room.remove(member.uid)</code> code to remove the user.</p> <pre><code>final room = ChatRoomModel.fromSnapshot(snapshot);\n// ...\nfinal member = UserModel.fromSnapshot(snapshot);\n// ...\nTextButton(\n  onPressed: () {\n    room.remove(member.uid);\n    Navigator.pop(context);\n  },\n  child: const Text('Remove User'),\n),\n</code></pre>"},{"location":"korean/chat/#management","title":"Management","text":"<ul> <li>You can use the default admin screen. Just call <code>AdminService.instance.showDashboard()</code>.</li> </ul>"},{"location":"korean/chat/#delete-open-chat-message-data","title":"Delete Open Chat Message Data","text":""},{"location":"korean/chat/#_5","title":"\ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \uc804\uc1a1\ud558\uae30 \uc804\uc5d0 \ub85c\uc9c1 \ubcc0\uacbd\ud558\uae30","text":"<p>\ucc44\ud305 \uba54\uc2dc\uc9c0(\ub610\ub294 \uc0ac\uc9c4)\ub97c \uc804\uc1a1\ud558\uae30 \uc804\uc5d0 \uc6d0\ud558\ub294 \ub85c\uc9c1\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uba74, <code>testBeforeSendMessage</code> \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <p>\uc608\ub97c \ub4e4\uc5b4, \ud68c\uc6d0\uc758 \uc0ac\uc9c4 \ub610\ub294 \uc774\ub984\uc774 \uc5c6\ub294 \uc0c1\ud0dc\ub77c\uba74 \ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \ubcf4\ub0b4\uc9c0 \uc54a\uac8c \uc0ac\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>ChatService.instance.init(testBeforeSendMessage: (chat) {\n  if (my!.photoUrl.isEmpty || my!.displayName.isEmpty) {\n    error(\n        context: context,\n        title: '\ud68c\uc6d0 \uc815\ubcf4 \ubbf8\uc644\uc131',\n        message: '\ube60\uc9c4 \ud68c\uc6d0 \uc815\ubcf4\ub97c \ubaa8\ub450 \uc785\ub825\ud574 \uc8fc\uc138\uc694.');\n    throw '\ud504\ub85c\ud544\uc774 \ubbf8\uc644\uc131\uc785\ub2c8\ub2e4.';\n  }\n});\n</code></pre>"},{"location":"korean/cloud_functions/","title":"\ud074\ub77c\uc6b0\ub4dc \ud568\uc218","text":"<p>I thought that I will not use Firebase cloud functions since it is a bit difficult to maintain the code. And we already have all the neccessary code in Flutter. But the code in the Flutter is not efficient. For instance, sending push notifications for a group chat from the Flutter app can downgrade the performance seriously. Even if the work is done in isolated, still it will consume a hugh resource. I am expecing that there are more than 1,000 uesrs who are chatting a lot every day. That's what acctually happens. And every time a user send a message, the push message ... (I will not explain it details.)</p> <p>So, the app should not do this work from the Flutter app. You may send the push notification from client only if it will not consume a lot of resource.</p> <p>And here comes the cloud functions</p>"},{"location":"korean/cloud_functions/#sending-push-notificaiton-on-each-chat-message","title":"Sending push notificaiton on each chat message","text":""},{"location":"korean/cloud_functions/#sending-push-notification-on-post-and-comment-create","title":"Sending push notification on post and comment create","text":""},{"location":"korean/cloud_functions/#indexing-data-into-typesense","title":"Indexing data into typesense","text":""},{"location":"korean/cloud_functions/#indexing-post-data-issues","title":"indexing post data issues","text":"<ul> <li>When ever comment is created/updated/deleted, the post write event trigger unneccessarily causing extra function call, document read(including all the comments), and band width, and unneccessary typesense indexing. As of now, we just let it be this way. This is the cheapest for now.</li> </ul>"},{"location":"korean/cloud_functions/#post-summaries-upon-post-createupdatedelete","title":"Post Summaries upon Post Create/Update/Delete","text":"<ul> <li>We have cloud functions that whenever a post is created/updated/deleted in <code>posts</code>, it updates <code>post-all-summaries</code> and <code>post-summaries</code>.</li> </ul>"},{"location":"korean/cloud_functions/#managepostsallsummary","title":"managePostsAllSummary","text":"<p>This cloud function updates <code>post-all-summaries</code> and <code>post-summaries</code> based on <code>posts</code>.</p> <p>Be informed that we are only saving the first url of the post in summaries.</p>"},{"location":"korean/cloud_functions/#_2","title":"\uc0ac\uc6a9\uc790 \ud074\ub77c\uc6b0\ub4dc \ud568\uc218","text":"<p>\ucc38\uace0, \uc0ac\uc6a9\uc790 \ubb38\uc11c\ub97c \ubb38\uc11c\ub97c \ucc38\uace0\ud55c\ub2e4. \ucc38\uace0, <code>user.functions.ts</code> \ub97c \uc0b4\ud3b4 \ubcf8\ub2e4.</p> <p>\ud074\ub77c\uc6b0\ub4dc \ud568\uc218\ub294 \uc0ac\uc6a9\uc790 \uae30\ub2a5\uc744 \uc880 \ub354 \ubcf4\uac15\ud558\uae30 \uc704\ud574\uc11c \uc5ec\ub7ec\uac00\uc9c0 \ud568\uc218\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc73c\uba70, \ud544\uc694\ud55c \uac83\ub9cc \uc124\uce58\ub97c \ud574\uc11c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <ul> <li> <p><code>userLike</code> \ub294 A \uac00 B \ub97c \uc88b\uc544\uc694 \ud560 \ub54c, B \uac00 A \ub97c \uc88b\uc544\uc694 \ud558\uace0 \uc788\ub2e4\uace0 \uc54c\ub824\uc8fc\uc5b4\uc57c \ud558\uba70, \ucd1d \uc88b\uc544\uc694 \uac2f \uc218\ub3c4 \uc99d/\uac10 \uc2dc\ucf1c \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub7ec\ud55c \uc7a1\ub2e4\ud55c \uc77c\uc744 <code>userLike</code> \uac00 \ud574 \uc900\ub2e4.</p> </li> <li> <p><code>userMirror</code> \ub294 rtdb \uc758 <code>/users</code> \ub178\ub4dc \uac12\uc744 firestore \uc758 <code>/users</code> \uceec\ub809\uc158\uc73c\ub85c \uc774\ub3d9 \uc2dc\ucf1c\uc900\ub2e4. \uc774\ub807\uac8c \ud558\ubbc0\ub85c\uc11c, \uc0ac\uc6a9\uc790 \uac80\uc0c9\uc744 \ubcf4\ub2e4 \ubcf5\uc7a1\ud558\uac8c \ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0, firestore \ub97c \ud1b5\ud574\uc11c \ud544\ud130\ub9c1\ud574\uc11c \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc8fc\uba74 \ub41c\ub2e4. \uc774 \ub54c, \ud55c\uac00\uc9c0 \uc8fc\uc758 \ud560 \uc810\uc740 <code>noOfLikes</code> \ud544\ub4dc\ub294 mirror \ud558\uc9c0 \uc54a\ub294\ub370 \uadf8 \uc774\uc720\ub294 \uc0ac\uc6a9\uc790 \ubaa9\ub85d\uc5d0\uc11c \uc88b\uc544\uc694/\uc88b\uc544\uc694\ucde8\uc18c \ub97c \ud558\ub294 \uacbd\uc6b0, rtdb \uc758 <code>/users/&lt;uid&gt;/noOfLikes</code> \uac00 \uc99d/\uac10\ud558\uba74 firestore \uc758 <code>/users</code> \ub370\uc774\ud130 \uac12\uc774 \ubcc0\uacbd\ub41c\ub2e4. \ub9cc\uc57d, FirestoreListView \uc640 \uac19\uc774 \ucffc\ub9ac\ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\uc790 \ud544\ud130\ub9c1\uc744 \ud558\ub294 \uacbd\uc6b0, \uc0ac\uc6a9\uc790\uc758 \ubb38\uc11c\uac00 \ud558\ub098 \ubcc0\uacbd\ub418\uba74, \ubaa8\ub4e0 \ubaa9\ub85d(\uac80\uc0c9\ub418\ub294 \uc544\uc774\ud15c)\uc774 \ub2e4\uc2dc \uadf8\ub824\uc838\uc57c\ud558\ub294\ub370, \uc774 \ub54c \ud654\uba74 \ubc18\uc9dd\uc784\uc774 \ubc1c\uc0dd\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.</p> </li> </ul>"},{"location":"korean/cloud_functions/#_3","title":"\uc804\ud654\ubc88\ud638 \uac00\uc785","text":"<p>\uc804\ud654\ubc88\ud638 \uac00\uc785\uc744 \ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \ub9cc\ub4e4\uc5b4 \uc84c\ub2e4.</p> <pre><code>\ub178\uc778\ub4e4\uc744 \uc704\ud55c \uc571\uc744 \ub9cc\ub4dc\ub294\ub370, \ub178\uc778\ub4e4\uc740 \ud68c\uc6d0 \uac00\uc785\uc744 \ub9e4\uc6b0 \uc5b4\ub824\uc6cc\ud55c\ub2e4. \uc804\ud654\ubc88\ud638 \uc778\uc99d\uc744 \ud558\uba74 \ubb38\uc790\ub97c \ud655\uc778\ud574\uc11c \uc785\ub825\ud558\uae30 \uc5b4\ub835\uace0, \ube44\ubc00\ubc88\ud638\ub97c \uc9c0\uc815\ud558\uba74 \ube44\ubc00\ubc88\ud638\ub97c \ub9cc\ub4dc\ub294\uac83\uacfc \uc678\uc6b0\uc9c0 \ubabb\ud574\uc11c \ub098\uc911\uc5d0 \uae4c\uba39\uc5b4 \ubc84\ub9ac\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \uadf8\ub798\uc11c, \uc804\ud654\ubc88\ud638\ub9cc \uc785\ub825\ud558\uba74 \uace7 \ubc14\ub85c \uac00\uc785\uc774 \ub418\uac8c \ud558\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d, \uc804\ud654\ubc88\ud638\uac00 \uc774\ubbf8 \uac00\uc785\ub418\uc5b4\uc838 \uc788\ub294\ub370, \uac00\uc785\uc744 \ud558\ub824\uba74 \uadf8\ub54c\uc5d0\ub294 \uc804\ud654\ubc88\ud638 \uc778\uc99d\uc744 \ud558\uac8c \ud55c\ub2e4. \uc989, \uccab\ubc88\uc9f8 \ub85c\uadf8\uc778\uc740 \ubb38\uc790 \uc778\uc99d \uc5c6\uc774 \uac00\uc785. \ub450\ubc88\uc9f8 \ub85c\uadf8\uc778\uc740 \ubb38\uc790 \uc778\uc99d\uc744 \ud574\uc11c \uac00\uc785\uc744 \ud558\ub294 \uac83\uc774\ub2e4.\n</code></pre> <p>\uc694\uccad\uc744 \ud560 \ub54c\uc5d0\ub294 <code>phoneNumber</code> \uc5d0 \uac00\uc785\ud560 \uc804\ud654\ubc88\ud638\ub97c \uc785\ub825\ud558\uba74 \ub41c\ub2e4. \uc804\ud654\ubc88\ud638\uac00 \uc785\ub825\ub418\uc9c0 \uc54a\uac70\ub098, \ub108\ubb34 \uc9e7\uac70\ub098, \uae34 \uacbd\uc6b0\ub294 \ud568\uc218\uc5d0\uc11c \uc5d0\ub7ec\ub97c \ub0b8\ub2e4. \uadf8 \uc678\uc5d0\ub294 Firebase \uc5d0\uc11c \uc5d0\ub7ec\ub97c \ub0b8\ub2e4. \uc804\ud654\ubc88\ud638\ub294 \uad6d\uc81c \uc804\ud654\ubc88\ud638 \ud3ec\uba67\uc5d0 \ub9de\uc544\uc57c \ud55c\ub2e4.</p> <ul> <li>\uc694\uccad: <code>?phoneNumber=12345</code></li> <li>\uacb0\uacfc: <code>{ code: 'auth/invalid-phone-number', message: '...' }</code></li> <li>\uc694\uccad: <code>?phoneNumber=1234567890123456</code></li> <li>\uacb0\uacfc: <code>{ code: 'auth/invalid-phone-number', message: '...' }</code></li> <li>\uc694\uccad: <code>/?phoneNumber=1234567890</code></li> <li> <p>\uacb0\uacfc: <code>{ code: 'auth/invalid-phone-number', message: '...' }</code></p> </li> <li> <p>\uc804\ud654\ubc88\ud638\uac00 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0, <code>{ code: 'auth/phone-number-already-exists', message: '...' }</code> \uc640 \uac19\uc774 \uc5d0\ub7ec\uac00 \ub098\uc628\ub2e4.</p> </li> <li> <p>\uc131\uacf5\ud558\ub294 \uacbd\uc6b0</p> </li> <li>\uacb0\uacfc: <code>{ uid: 'YSr8fJwQASSF4QApILkaAEjbfCd2' }</code></li> </ul> <p>\ucc38\uace0\ub85c, \ud074\ub77c\uc6b0\ub4dc \ud568\uc218 \ud638\ucd9c\uc774 \uc18d\ub3c4\uac00 \uc880 \ub290\ub9b0\ud3b8\uc774\ub2e4. \uadf8\ub098\ub9c8 \ub9e8 \ucc98\uc74c (\uc0c8\ub85c\uc6b4) \uc804\ud654\ubc88\ud638\ub97c \uc785\ub825\ud574\uc11c \uac00\uc785\uc744 \ud560 \ub54c\uc5d0\ub294 Firebase Phone Sign-in \uacfc\uc815\uc774 \uc5c6\uc5b4\uc11c \uc870\uae08\uc740 \ube68\ub9ac \ub85c\uadf8\uc778\uc774 \ub418\uc9c0\ub9cc, \ub450\ubc88\uc9f8 \ub85c\uadf8\uc778\uc744 \ud560 \ub54c\uc5d0\ub294 Phone Sign-in \uc744 \ud574\uc57c \ud574\uc11c \ub85c\uadf8\uc778 \uc18d\ub3c4\uac00 \uc880 \ub354 \ub290\ub9b4 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/cloud_functions/#_4","title":"\ud568\uc218 \ud14c\uc2a4\ud2b8","text":"<p>\ud14c\uc2a4\ud2b8 \ubb38\uc11c\ub97c \ucc38\uace0\ud55c\ub2e4.</p>"},{"location":"korean/country_picker/","title":"\uad6d\uac00 \uc815\ubcf4 \uc120\ud0dd","text":"<p><code>CountryPicker</code> \uc5d0 \uac04\ub2e8\ud55c \uc704\uc82f\uc744 \ub9cc\ub4e4\uc5b4 \ub193\uc558\ub2e4.</p> <p>\ud544\uc694\ud558\ub2e4\uba74 <code>countryList()</code> \ud568\uc218\uc758 \uad6d\uac00 \uc815\ubcf4\ub97c \ubc1b\uc544\uc11c, \uc6d0\ud558\ub294\ub370\ub85c \uc704\uc82f\uc744 \ub9cc\ub4e4\uc5b4 \uc4f8 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/country_picker/#_2","title":"\uad6d\uac00 \uc120\ud0dd \uc608\uc81c","text":"<pre><code>CountryPicker(\n    onChanged: (v) {\n        print(v);\n    },\n),\n</code></pre> <p>\uc544\ub798\ub294 \uba87\uac1c \ub098\ub77c\ub9cc \ubaa9\ub85d\uc5d0 \ubcf4\uc5ec\uc8fc\ub294 \uc608\uc81c\uc774\ub2e4.</p> <pre><code>CountryPicker(\n    filters: const ['KR', 'VN', 'TH', 'LA', 'MM'],\n    onChanged: (v) {\n        print(v);\n    },\n),\n</code></pre> <p>\ub9cc\uc57d \ubcf4\uc5ec\uc8fc\ub294 \ub098\ub77c \uac1c\uc218\uac00 \uc801\ub2e4\uba74, search box \ub97c \ud45c\uc2dc \ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.</p> <pre><code>CountryPicker(\n  filters: const ['KR', 'VN', 'TH', 'LA', 'MM'],\n  search: false,\n  onChanged: (v) {\n    print(v);\n  },\n),\n</code></pre> <p>\uc544\ub798\uc640 \uac19\uc774 \ud5e4\ub354\uc640 \ubc84\ud2bc UI \ub97c \uc9c1\uc811 \ub514\uc790\uc778 \ud560 \uc218 \uc788\ub2e4.</p> <pre><code>CountryPicker(\n    filters: const ['KR', 'VN', 'TH', 'LA', 'MM'],\n    search: false,\n    headerBuilder: () =&gt; const Text('Select your country'),\n    labelBuilder: (Map&lt;String, String&gt; country) {\n        return Text(country['name'] ?? 'Choose your country');\n    },\n    onChanged: (v) {\n        print(v);\n    },\n),\n</code></pre> <p>\uc544\ub798\uc640 \uac19\uc774 \uc804\uccb4\ub97c \uc644\uc804\ud788 \uc6d0\ud558\ub294 \ub370\ub85c \ub514\uc790\uc778\uc744 \ud560 \uc218 \uc788\ub2e4. \uc774\uac83\uc774 \uac00\ub2a5\ud55c \uac83\uc740 \ub0b4\ubd80\uc5d0 \uc788\ub294 CountryPicker \uc5d0\uc11c \ucd5c\uc18c\ud55c\uc758 \ub514\uc790\uc778\uc744 \ud588\uae30 \ub54c\ubb38\uc774\ub2e4.</p> <pre><code>SizedBox(\n    width: double.infinity,\n    child: Theme(\n        data: Theme.of(context).copyWith(\n        inputDecorationTheme:\n            Theme.of(context).inputDecorationTheme.copyWith(\n                    border: OutlineInputBorder(\n                    borderSide: BorderSide(\n                        color: context.colorScheme.primary,\n                    ),\n                    ),\n                    contentPadding: const EdgeInsets.all(0),\n                ),\n        ),\n        child: CountryPicker(\n        // filters: const ['KR', 'VN', 'TH', 'LA', 'MM'],\n        // search: false,\n        headerBuilder: () =&gt; const Text('Select your country'),\n        itemBuilder: (country) =&gt; Row(\n            children: [\n            Text(\n                country.flag,\n                style: TextStyle(\n                fontSize:\n                    Theme.of(context).textTheme.displaySmall!.fontSize,\n                ),\n            ),\n            Expanded(\n                child: Text(\n                '  ${country.englishName} ',\n                style: TextStyle(\n                    color: Theme.of(context).colorScheme.primary,\n                    fontSize:\n                        Theme.of(context).textTheme.titleMedium!.fontSize,\n                ),\n                maxLines: 1,\n                overflow: TextOverflow.ellipsis,\n                ),\n            ),\n            ],\n        ),\n        labelBuilder: (country) {\n            if (country == null) {\n            return const Text('Choose your country');\n            } else {\n            return Row(\n                children: [\n                Text(\"${country.flag} ${country.officialName}\"),\n                ],\n            );\n            }\n        },\n        onChanged: (v) {\n            print(v);\n        },\n        ),\n    ),\n),\n</code></pre> <p>\uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30 \uac12\uc744 \uc904 \uc218 \uc788\ub2e4.</p> <pre><code>CountryPicker(\n    initialValue: 'KR',\n    filters: const ['KR', 'VN', 'TH', 'LA', 'MM'],\n    search: false,\n    headerBuilder: () =&gt; const Text('Select your country'),\n    onChanged: (v) {\n    nationality = v.alpha2;\n    },\n),\n</code></pre>"},{"location":"korean/database/","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4","text":"<p>Fireship \uc5d0\uc11c\ub294 Realtime Database \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucd08\uae30\uc5d0\ub294 Firestore \ub97c \ud1b5\ud574 (Fireship \uc758 \uc804\uc2e0\uc778) FireFlutter \ub97c \ud65c\ubc1c\ud788 \uac1c\ubc1c \ubc0f \uc0ac\uc6a9\ud558\ub2e4\uac00 2024\ub144 \ucd08\uc5d0 Realtime Database \ub85c \ucda9\ubd84\ud788 \uc798 \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \ub354 \uac04\uacb0\ud558\uace0 \ube60\ub974\uac8c \ub3d9\uc791\ud558\ub294 \ud328\ud0a4\uc9c0\ub97c \uac1c\ubc1c\ud558\uc790\ub77c\ub294 \uc0dd\uac01\uc5d0 Fireship \uc73c\ub85c \ud328\ud0a4\uc9c0 \uba85\uc744 \ubcc0\uacbd\ud558\uace0 Realtime Database \ub97c \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 \ud328\ud0a4\uc9c0\ub97c \uac1c\ubc1c\ud558\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.</p>"},{"location":"korean/database/#_2","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac00\uc774\ub4dc\ub77c\uc778","text":"<ul> <li>Firestore \ub300\uc2e0 Realtime Database \ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c\uc11c</li> <li>\ub370\uc774\ud130\uc758 \uc804\uccb4\uac00 \uc544\ub2cc \ubd80\ubd84\uc744 listen \ud560 \uc218 \uc788\uc73c\uba70, \ucd5c\uc18c \ub2e8\uc704\uc758 \ub370\uc774\ud130\ub97c (DB \ub85c \ubd80\ud130) \uac00\uc838 \uc62c \uc218 \uc788\uace0,</li> <li>\uc774\ub85c \uc778\ud574 \ub370\uc774\ud130\ub97c \ubcf4\ub2e4 \ube60\ub974\uac8c \uac00\uc838\uc640 \ud654\uba74\uc5d0 \ubcf4\uc5ec \uc904 \uc218 \uc788\uace0,</li> <li> <p>\ube44\uc6a9 \uc808\uac10\uc758 \ud6a8\uacfc\ub97c \uac00\uc838 \uc62c \uc218 \uc788\ub2e4.</p> </li> <li> <p>\ub370\uc774\ud130\ubca0\uc774 \uacbd\ub85c\uc5d0\ub294 \uac00\ub2a5\ud55c \uc5b8\ub354\ubc14(_) \ub300\uc2e0 \ud558\uc774\ud508(-)\uc744 \uc0ac\uc6a9\ud55c\ub2e4.</p> </li> <li>\uc608\ub97c \ub4e4\uba74, <code>user_private</code> \ub300\uc2e0 <code>user-private</code> \uc744 \uc0ac\uc6a9\ud55c\ub2e4.</li> </ul>"},{"location":"korean/database/#_3","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad6c\uc870","text":"<ul> <li>\uac00\ub2a5\ud55c flat style \uc744 \uc9c0\ud5a5\ud55c\ub2e4.</li> <li>\uac00\ub2a5\ud55c \ud558\uc704 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc608\ub97c \ub4e4\uba74, \uae00 \ub178\ub4dc \ud558\uc704\uc5d0 \ucf54\uba58\ud2b8\ub97c \ubcf4\uad00\ud558\uc9c0 \uc54a\ub294\ub2e4.   \uc608\ub97c \ub4e4\uba74,</li> <li><code>/posts/&lt;postId&gt;/comments/...</code> \uc640 \uac19\uc774 \uae00 \uc544\ub798\uc5d0 \ucf54\uba58\ud2b8\ub97c \uc800\uc7a5\ud558\uc9c0 \ud558\uc9c0 \uc54a\uace0,</li> <li><code>/posts/&lt;postId&gt;</code> \uc5d0 \uae00 \uc800\uc7a5, <code>/comments/&lt;postId&gt;/...</code> \uc5d0 \ucf54\uba58\ud2b8\uc744 \ud558\uc5ec \ub370\uc774\ud130 \uadf8\ub8f9\uc744 \ubd84\ub9ac\ud55c\ub2e4.</li> </ul>"},{"location":"korean/database/#_4","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc704\uc82f","text":"<ul> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc27d\uac8c \uc704\uc82f\uc744 \uc81c\uacf5\ud55c\ub2e4.</li> </ul>"},{"location":"korean/database/#value","title":"Value \uc704\uc82f","text":"<p>Value \uc704\uc82f\uc740 Realtime Database \uc5d0 \uc788\ub294 \uc815\ubcf4\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. DB \uc5d0 \uc788\ub294 \uac12\uc744 \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc904 \ub54c\uc5d0\ub294 \uaf2d \uc774 \uc704\uc82f\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4.</p> <p><code>path</code> \uc5d0 DB \uacbd\ub85c\ub97c \uc9c0\uc815\ud558\uba74 <code>builder</code> \uc5d0 dynamic \ud0c0\uc785\uc73c\ub85c \uc804\ub2ec\ub418\uc5b4 \uc628\ub2e4. \ub9cc\uc57d <code>path</code> \uc5d0 \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0 \uac12\uc774 \uc5c6\uc73c\uba74 null \uac12\uc774 builder \ub85c \uc804\ub2ec\ub41c\ub2e4.</p> <p>DB \uc5d0 \uc874\uc7ac\ud558\ub294 \uac12\uacfc \ub3d9\uc77c\ud55c \uac12\uc744 <code>initialData</code> \uc5d0 \uc8fc\uba74 \ud654\uba74 \uae5c\ube61\uac70\ub9bc\uc744 \ud604\uc800\ud558\uac8c \uc904\uc77c \uc218 \uc788\ub2e4.</p> <p>\uc608\uc81c 1 - test/banana \ub178\ub4dc \uac12\uc744 \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc900\ub2e4.</p> <pre><code>Value(\n  initialData: 'BANANA',\n  path: 'test/banana',\n  builder: (v) =&gt; Text(v.toString()),\n),\n</code></pre> <p>\uc608\uc81c 2 - \ub85c\uadf8\uc778 \uc0ac\uc6a9\uc790\uc758 \uc804\ud654\ubc88\ud638\ub97c \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc900\ub2e4.</p> <pre><code>Value(path: Path.phoneNumber, builder: (v) =&gt; Text(v ?? ''))\n</code></pre> <p><code>onLoading</code> \uc5d0 loader \uc544\uc774\ucf58\uc744 \ubcf4\uc5ec \uc904 \uc218\ub3c4 \uc788\uace0, \uae30\ubcf8 \uc704\uc82f\uc744 \ubcf4\uc5ec\uc8fc\uc5b4 \ud654\uba74\uc5d0 \ubc18\uc9dd\uc784\uc744 \uc904 \uc77c \uc218 \uc788\ub2e4.</p> <pre><code>Database(\n  path: post.ref.child(Field.noOfLikes).path,\n  builder: (no) =&gt; Text('\uc88b\uc544\uc694${likeText(no)}'),\n  onLoading: const Text('\uc88b\uc544\uc694'),\n),\n</code></pre> <p><code>Value.once</code> \ub97c \ud1b5\ud574\uc11c, \ud654\uba74\uc5d0 \ud55c\ubc88\ub9cc \uac12\uc744 \ubcf4\uc5ec \uc904 \uc218 \uc788\ub2e4. \uc989, \uac12\uc774 \uacc4\uc18d \ud574\uc11c \uc218\uc815\ub418\ub294 \uacbd\uc6b0, \uc2e4\uc2dc\uac04\uc73c\ub85c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ucc98\uc74c \ud55c\ubc88\ub9cc \uac12\uc744 \uac00\uc838\uc640 \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc8fc\uace0 \uc5c5\ub370\uc774\ud2b8\uac00 \ub418\uc5b4\ub3c4 \ud654\uba74\uc5d0 \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\ub294\ub2e4.</p> <pre><code>Value.once(\n  initialData: 'BANANA',\n  path: 'test/banana',\n  builder: (v) =&gt; Text(v.toString()),\n),\n</code></pre>"},{"location":"korean/database/#user-database","title":"User Database","text":"<p>See user document.</p>"},{"location":"korean/extensions/","title":"Extensions","text":""},{"location":"korean/extensions/#string-extensions","title":"String extensions","text":"<p>You can use <code>orAnonymousUrl</code>, <code>orWhiteUrl</code>, <code>orBlackUrl</code> to display anonymous, or white, black iamge when the string of the url is empty string.</p> <pre><code>Avatar(\n    photoUrl: my!.photoUrl.orAnonymousUrl,\n),\n</code></pre> <p><code>ifEmpty</code> and <code>or</code> have same fuctionality that if the string is empty, it will use the parameter value. Note that it's not working if the string is null.</p> <p><code>upTo</code> \ub294 \ucc98\uc74c \ubd80\ud130 \ud2b9\uc815 \uae38\uc774 \ub9cc\ud07c \ubb38\uc790\uc5f4\uc744 \uc790\ub978\ub2e4.</p> <p><code>sanitize</code> \ub294 \ud2b9\uc218 \ubb38\uc790\ub97c \uc5c6\uc564\ub2e4.</p> <p><code>cut</code> \uc740 \ubb38\uc790\uc5f4\uc744 \ud2b9\uc815 \uae38\uc774 \ub9cc\ud07c \uc790\ub974\ub294\ub370, \uc911\uac04\uc5d0 \ud2b9\uc218\ubb38\uc790\ub3c4 \uac19\uc774 \uc798\ub77c \ub0b8\ub2e4. <code>cut</code> \uc740 <code>upTo</code> \uc640 <code>sanitize</code> \ub450 \ud568\uc218\ub97c \ud558\ub098\ub85c \ud569\uce5c \uac83\uc774\ub2e4.</p> <p><code>isEmail</code> \uc740 \uc774\uba54\uc77c \uc8fc\uc18c\uc778\uc9c0 \uac80\uc0ac\ud55c\ub2e4.</p> <p><code>tryInt</code> \uc640 <code>tryDouble</code> \uc740 int \uc640 double \ud615\uc73c\ub85c \ubcc0\ud658\ud55c\ub2e4. \ubcc0\ud658 \uc2e4\ud328\ud558\uba74 null \uc744 \ubc18\ud658\ud55c\ub2e4.</p> <p><code>replace</code> \ub294 map \ub370\uc774\ud130\ub97c \ubc1b\uc544\uc11c, \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c replace \ud55c\ub2e4.</p>"},{"location":"korean/forum/","title":"Forum","text":""},{"location":"korean/forum/#database-strucuture","title":"Database strucuture","text":"<ul> <li><code>/post-summary/&lt;category&gt;</code> is for listing posts in a category list. It will have a summary of the post.<ul> <li>It includes <code>64 letters of title</code>, <code>128 letters of content</code>, <code>category</code>, <code>id</code>, <code>uid</code>, <code>createdAt</code>, <code>order</code>.</li> <li>it does not include <code>no of likes</code>, <code>no of comments</code>. It needs to get those information from <code>/posts</code>.</li> <li>The client app is reponsible to manage(crud) the summary posts under <code>/post-summary/&lt;category&gt;</code>.</li> </ul> </li> <li><code>posts</code> is for saving all the post data.</li> <li> <p><code>posts/&lt;category&gt;/&lt;postId&gt;/comments</code> is for saving the comments for the post.</p> </li> <li> <p><code>/post-all-summary</code> is a place(path) that all post summaries are being saved.</p> <ul> <li>You can use this data to display all the posts of all categories in the same page.</li> <li>The data under <code>/post-all-summary</code> is managed by cloud functions. And you need to install <code>managePostAllSummary</code> cloud function to make it work.</li> <li>See install.md to know how to install <code>managePostAllSummary</code> function.</li> </ul> </li> </ul>"},{"location":"korean/forum/#coding-guideline","title":"Coding Guideline","text":"<ul> <li><code>category</code> cannot be changed due to the node structure.</li> </ul>"},{"location":"korean/forum/#observing-post-changes-and-update-data","title":"Observing post changes and update data","text":"<p>As you know, we are using realtime database. This means the app should observe for data change as small portiona as it can be. And we made it simple for post data changes. Use <code>PostModel.onFieldChange(field, callback)</code>.</p> <p>The example below listens the title changes and if it is changed, it wil update on screen.</p> <pre><code>@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: post.onFieldChange(Field.title, (v) =&gt; Text(v ?? '')),\n    )\n  );\n}\n</code></pre>"},{"location":"korean/forum/#test-code","title":"Test code","text":"<p>You can load a post like below and do whatever test.</p> <pre><code>SchedulerBinding.instance.addPostFrameCallback((timeStamp) {\n  Timer(const Duration(microseconds: 200), () async {\n    final post = await PostModel.get(category: 'discussion', id: '-No5q8HHMw7ZDZSjR-Qu');\n    print('length of comment; ${post?.comments.length}');\n    for (final c in post?.comments ?? []) {\n      print(\"[${c.depth}] ${c.content}\");\n    }\n  });\n});\n</code></pre>"},{"location":"korean/forum/#comments","title":"Comments","text":"<p>Refer to Comment doc.</p>"},{"location":"korean/forum/#posts","title":"Posts","text":"<p>Refer to Post doc.</p>"},{"location":"korean/forum/#_1","title":"\uae00 \ubaa9\ub85d","text":"<pre><code>import 'package:fireship/fireship.dart';\nimport 'package:flutter/material.dart';\nimport 'package:silvers/defines/categories.dart';\n\nclass PostListScreen extends StatelessWidget {\n  static const String routeName = '/PostList';\n  const PostListScreen({\n    super.key,\n    required this.category,\n  });\n\n  final String category;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(Categories.getLabel(context, category)),\n        actions: [\n          IconButton(\n            onPressed: () {\n              ForumService.instance\n                  .showPostCreateScreen(context, category: category);\n            },\n            icon: const Icon(Icons.add),\n          ),\n        ],\n      ),\n      body: PostListView(\n        category: category,\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"korean/forum/#_2","title":"\ud478\uc2dc \uc54c\ub9bc \uad6c\ub3c5","text":"<p>\uac8c\uc2dc\ud310 \uce74\ud14c\uace0\ub9ac \ubcc4 \ud478\uc2dc \uc54c\ub9bc \uad6c\ub3c5\uacfc \ud574\uc81c\ub294 \uc544\ub798\uc640 \uac19\uc774 \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>IconButton(\n  onPressed: () async {\n    toggle(Path.postSubscription(category));\n  },\n  icon: Value(\n    path: Path.postSubscription(category),\n    builder: (v) =&gt; v == true\n        ? const Icon(Icons.notifications_rounded)\n        : const Icon(Icons.notifications_outlined),\n  ),\n),\n</code></pre>"},{"location":"korean/function/","title":"Fireship \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ud568\uc218\ub4e4","text":"<p>These functions are provided to be used anywhere in the code as needed.</p>"},{"location":"korean/function/#_1","title":"\uc5d0\ub7ec \ud45c\uc2dc \ud568\uc218","text":"<p>\uc8fc\ub85c \uc544\ub798\uc758 \ub450\uac00\uc9c0 \ubc29\uc2dd\uc73c\ub85c \uc5d0\ub7ec\ub97c \ud654\uba74\uc5d0 \ud45c\uc2dc \ud560 \uc218 \uc788\ub2e4.</p> <ul> <li><code>error</code> \ud568\uc218\ub294 showDialog \ub97c \uc774\uc6a9\ud574\uc11c, <code>ErrorDialog</code> \ub97c \ud654\uba74\uc5d0 \uc5d0\ub7ec\ub97c \ud45c\uc2dc\ud55c\ub2e4.</li> <li><code>errorToast</code> \ub294 <code>toast</code> \ub97c \uc774\uc6a9\ud574\uc11c, \ud654\uba74\uc5d0 \uc5d0\ub7ec\ub97c \ud45c\uc2dc\ud55c\ub2e4.</li> </ul>"},{"location":"korean/function/#toast","title":"toast","text":"<p>Toast can be used to show a snackbar with a message.</p> <pre><code>toast(context: context, message: 'Hello User.');\n</code></pre> <p>Parameters:</p> <ul> <li>context</li> <li>required BuildContext</li> <li>the build context of the current widget</li> <li>title</li> <li>String</li> <li>title text of the snackbar</li> <li>message</li> <li>required String</li> <li>message to show as text</li> <li>icon</li> <li>Icon</li> <li>The icon to add in the snackbar</li> <li>duration</li> <li>Duration</li> <li>how long does the snackbar shows?</li> <li>default: const Duration(seconds: 8)</li> <li>onTap</li> <li>Function(Function)</li> <li>on tap function</li> <li>error</li> <li>bool</li> <li>is it an error message?</li> <li>hideCloseButton</li> <li>bool</li> <li>default: false</li> <li>backgroundColor</li> <li>Color</li> <li>foregroundColor</li> <li>Color</li> <li>runSpacing</li> <li>double</li> <li>default: 12</li> <li>spacing between the icon and the message</li> </ul>"},{"location":"korean/function/#confirm","title":"confirm","text":"<p>The <code>confirm</code> is a prompt that will let the user choose from yes or no.</p> <pre><code>final re = await confirm(\n    context: context,\n    title: 'Delete Account',\n    message: 'Are you sure you want to delete your account?'\n);\n</code></pre> <p>The <code>re</code> in the example will be a nullable bool. If <code>re</code> is <code>true</code> means user chooses yes. If <code>false</code> means user chooses no. If <code>null</code> means neither user chooses yes nor no.</p> <p>Parameters:</p> <ul> <li>[required] BuildContext context</li> <li>[required] String title</li> <li>title of the message</li> <li>[required] String message</li> <li>Add the question or confirmation message here.</li> </ul>"},{"location":"korean/function/#input","title":"input","text":"<p>The <code>input</code> function can be used to ask for an input from user.</p> <pre><code>final re = await input(\n    context: context,\n    title: 'Name',\n    subtitle: 'Enter your lovely name',\n    hintText: 'Last Name, First Name',\n);\n</code></pre> <p>Parameters:</p> <ul> <li>[required] BuildContext context</li> <li>[required] String title</li> <li>The title of the prompt</li> <li>String subtitle</li> <li>The subtitle or additional info for input box</li> <li>[required] String hintText</li> <li>hintText for the input box</li> <li>String initialValue</li> <li>the default input value</li> </ul>"},{"location":"korean/install/","title":"\uc124\uce58","text":"<p>Follow the instruction below to install Fireship into your app</p>"},{"location":"korean/install/#install-fireship","title":"Install Fireship","text":""},{"location":"korean/install/#install-fireship-as-a-package","title":"Install Fireship as a package","text":"<p>Simply add the latest version of fireship from pub.dev</p>"},{"location":"korean/install/#install-fireship-as-a-package-developer","title":"Install Fireship as a package developer","text":"<p>You may wish to develop your app while building(or updating) the Fireship package together.</p> <ul> <li> <p>Fork the Fireship from <code>https://github.com/thruthesky/fireship</code></p> </li> <li> <p>Then, clone it</p> </li> <li> <p>Then, create a branch in Fireship local repository</p> </li> <li> <p>Create <code>apps</code> folder under the root of Fireship folder and create your app inside <code>apps</code> folder.</p> </li> </ul> <pre><code>mkdir apps\ncd apps\nflutter create your_project\n</code></pre> <ul> <li>You need to add the path of the dependency as <code>../..</code>. Add the fireship dependency like below.</li> </ul> <pre><code>dependencies:\n  fireship:\n    path: ../..\n</code></pre> <ul> <li>If you have update any code in Fireship, consider to submit a <code>pull request</code>.</li> </ul>"},{"location":"korean/install/#firebase-realtime-database-secuirty","title":"Firebase Realtime Database Secuirty \uc124\uce58","text":"<p>Firebase Realtime Database Security \ub97c \ubcf5\uc0ac\ud574\uc5b4 Firebase project \uc5d0 \ubd99\uc5ec \ub123\uae30 \ud55c \ub2e4\uc74c \uc800\uc7a5\ud574 \uc8fc\uc138\uc694.</p>"},{"location":"korean/install/#default-app-environment-entitlement","title":"Default app-environment entitlement","text":"<p>Add the following code into <code>info.plist</code>. These will be needed for access to camera and gallery.</p> <pre><code>&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the camera to share the photo on profile, chat, forum.&lt;/string&gt;\n&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the microphone to share vioce with other users.&lt;/string&gt;\n&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;\n&lt;string&gt;PhiLov app requires access to the photo library to share the photo on profile, chat, forum.&lt;/string&gt;\n</code></pre>"},{"location":"korean/install/#install-cloud-functions","title":"Install Cloud Functions","text":"<p>Run the following command to install all the push notification cloud functions.</p> <pre><code>% cd firebase/function\n% npm run deploy:message\n</code></pre> <p>And set the end point URL to <code>MessagingService.instance.init(sendPushNotificationsUrl: ..)</code></p> <p>Run the following command to install typesense related cloud functions.</p> <pre><code>% cd firebase/function\n% npm run deploy:typesense\n</code></pre> <p>Run the following command to install a function that manages summarization of all posts under <code>/posts-all-summary</code>. See the Forum document for the details.</p> <pre><code>% cd firebase/function\n% npm run deploy:managePostsAllSummary\n</code></pre>"},{"location":"korean/install/#initializing-textservice","title":"Initializing TextService","text":"<p>Fireship has some UI and you may want to show it in different languages.</p> <p>And you can use the text translation funtionality in your app.</p> <pre><code>\n/// Call this somewhere while the app boots.\ninitTextService();\n\nvoid initTextService() {\n  print('--&gt; AppService.initTextService()');\n\n  TextService.instance.texts = {\n    ...TextService.instance.texts,\n    if ( languageCode == 'ko' ) ...{\n      T.ok: '\ud655\uc778',\n      T.no: '\uc544\ub2c8\uc624',\n      T.yes: '\uc608',\n      T.error: '\uc5d0\ub7ec',\n      T.dismiss: '\ub2eb\uae30',\n      Code.profileUpdate: '\ud504\ub85c\ud544 \uc218\uc815',\n      Code.recentLoginRequiredForResign:\n          '\ud68c\uc6d0 \ud0c8\ud1f4\ub294 \ubcf8\uc778 \uc778\uc99d\uc744 \uc704\ud574\uc11c, \ub85c\uadf8\uc544\uc6c3 \ud6c4 \ub2e4\uc2dc \ub85c\uadf8\uc778 \ud55c \ub2e4\uc74c \ud0c8\ud1f4\ud558\uc154\uc57c\ud569\ub2c8\ub2e4.',\n      Categories.qna: '\uc9c8\ubb38',\n      Categories.discussion: '\ud1a0\ub860',\n      Categories.buyandsell: '\uc7a5\ud130',\n      Categories.info: '\uc815\ubcf4/\uc54c\ub9bc',\n      T.notVerifiedMessage: '\ubcf8\uc778 \uc778\uc99d\uc744 \ud558\uc154\uc57c \uc804\uccb4 \uae30\ub2a5\uc744 \uc774\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.',\n      T.chatRoomNoMessageYet: '\uc557, \uc544\uc9c1 \uba54\uc2dc\uc9c0\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\\n\ucc44\ud305\uc744 \uc2dc\uc791 \ud574 \ubcf4\uc138\uc694.',\n    },\n    if ( languageCode == 'en' ) ...{\n      T.ok: 'Ok',\n      // ...\n    }\n  };\n}\n</code></pre>"},{"location":"korean/install/#initializing-userservice","title":"Initializing UserService","text":""},{"location":"korean/install/#admin","title":"Admin","text":"<ul> <li>See Admin Doc</li> </ul>"},{"location":"korean/install/#unit-tests","title":"Unit tests","text":"<ul> <li>There are many unit test codes. You can read other document of fireship on how to install and test the unit test codes.</li> </ul>"},{"location":"korean/messaging/","title":"\ud478\uc2dc \uc54c\ub9bc","text":""},{"location":"korean/messaging/#fcm-token","title":"FCM \uacfc token","text":"<p>Fireship uses FCM to send messages to devices.</p> <p>The tokens are saved under <code>/user-fcm-tokens/&lt;token&gt; { uid: [user uid], platform: [android or ios]}</code>. So, if you want to get the tokens of a user, you must get the tokens by searching the uid.</p>"},{"location":"korean/messaging/#_2","title":"\uad6c\ub3c5","text":"<p>\ud1a0\ud53d\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, \uc0ac\uc6a9\uc790 \ud1a0\ud070 \ubcc4\ub85c \uba54\uc2dc\uc9c0\ub97c \ubcf4\ub0b8\ub2e4. \uadf8\ub798\uc11c \uad6c\ub3c5\uc744 \ud588\ub294\uc9c0 \uc548\ud588\ub294\uc9c0\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c DB \uc5d0 \ubcf4\uad00\ud574\uc57c\ud558\ub294\ub370, \uac01 \uae30\ub2a5\ubcc4 \ubb38\uc11c\ub97c \ucc38\uace0\ud558\ub3c4\ub85d \ud55c\ub2e4. \ucc38\uace0, \uac8c\uc2dc\ud310 \uad6c\ub3c5 \ucc38\uace0, \ucc44\ud305\ubc29 \uad6c\ub3c5</p>"},{"location":"korean/messaging/#sending-messages-to-user","title":"Sending messages to user","text":"<p>One user may use multiple devices and one device may have multiple tokens. So, if the app sends a message to A, the app must query to get the tokens of A in <code>/user-fcm-tokens</code></p> <p>The code below shows how send a message to multiple users.</p> <pre><code>final List&lt;String&gt; uids = some.users;\n\n//sending notification to the list of uids\nawait MessagingService.instance.sendTo(\n  uids: uids,\n  title: '... message title ...',\n  body: '... message body ...',\n  image: url,\n);\n</code></pre> <p>To use this method, The firebase cloud function named <code>sendPushNotifications</code> in <code>firebase/functions/src/messaging/functions.ts</code> must be installed. See installation on how to install firebsae functions.</p>"},{"location":"korean/messaging/#sending-messages-for-forum-category-subscription-and-chat-room-subscription","title":"Sending messages for forum category subscription and chat room subscription","text":"<p>There are firebase cloud functions that work with fireship for sending messages to subscribers on forum categories and chat rooms.</p> <p>You will need to install <code>sendMessagesToCategorySubscribers</code> and <code>sendMessagesToChatRoomSubscribers</code> in <code>firebase/functions/src/messaging/functions.ts</code> to make it work.</p> <p>The source code is under <code>firebase/functions</code> and the test code is under <code>firebase/functions/tests</code>.</p>"},{"location":"korean/messaging/#unit-testing","title":"Unit testing","text":"<p>See <code>firebase/functions/tests</code> folder for unit testing on push notification. To run the unit test code, you need to set the environment variable - <code>GOOGLE_APPLICATION_CREDENTIAILS</code></p>"},{"location":"korean/messaging/#_3","title":"\uc2dc\uc2a4\ud15c\ud2b8\ub808\uc774\uc5d0\uc11c \uba54\uc2dc\uc9c0\uac00 \ud0ed \ub418\uba74 \ud654\uba74 \uc5f4\uae30","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc2dc\uc2a4\ud15c\ud2b8\ub808\uc774\uc5d0\uc11c \uba54\uc2dc\uc9c0\ub97c \ud0ed\ud558\uba74, \ucc44\ud305, \uae00, \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \ub4f1\uc758 \ud398\uc774\uc9c0\ub97c \uc5f4\uc5b4\uc57c \ud55c\ub2e4.</p> <p>\uc0ac\uc6a9\uc790\uac00 \uba54\uc2dc\uc9c0\ub97c \ud0ed\ud558\uba74 \ub0b4\ubd80\uc801\uc73c\ub85c <code>parseData</code> \ub97c \ud1b5\ud574\uc11c \ud478\uc2dc \uc54c\ub9bc \ub370\uc774\ud130\ub97c \ubaa8\ub378\ub9c1\ud55c\ub2e4.</p> <p>\ud478\uc2dc \uc54c\ub9bc \uba54\uc2dc\uc9c0\uac00 \ud0ed \ub418\uba74, \ub77c\uc6b0\ud305\ub418\ub294 \ud654\uba74\uc740 \uac01 \uc571 \ub9c8\ub2e4 \ub2e4\ub97c \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub97c \ubcf4\uace0 \uc801\ub2f9\ud558\uac8c \uc218\uc815\ud574\uc11c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <pre><code>Future&lt;void&gt; _onMessageTapped(RemoteMessage message) async {\n  dog(\"onMessageTapped trigged.\");\n  dog(\"onMessageTapped: ${message.data.toString()}\");\n\n  final data = MessagingService.instance.parseData(message.data);\n\n  if (data is ChatMessageData) {\n    ChatService.instance.showChatRoom(\n      context: globalContext,\n      roomId: data.roomId,\n    );\n    return;\n  }\n\n  if (data is PostMessageData) {\n    PostModel? post =\n        await PostModel.get(category: data.category, id: data.id);\n    if (post == null) return;\n    if (globalContext.mounted) {\n      ForumService.instance.showPostViewScreen(\n        globalContext,\n        post: post,\n      );\n    }\n    return;\n  }\n\n  if (data is UserMessageData) {\n    UserService.instance.showPublicProfileScreen(\n      context: globalContext,\n      uid: data.uid,\n    );\n    return;\n  }\n}\n</code></pre>"},{"location":"korean/report/","title":"\uc2e0\uace0","text":"<p>\uc0ac\uc6a9\uc790\ub294 \uae00, \ucf54\uba58\ud2b8, \ucc44\ud305, \uc0ac\uc6a9\uc790 \ub4f1\uc744 \uc2e0\uace0 \ud560 \uc218 \uc788\ub2e4.</p> <p>\uc2e0\uace0\ub97c \ud558\uba74 <code>/reports/&lt;id&gt;</code> \uc5d0 \uc2e0\uace0 \uc815\ubcf4\uac00 \uc800\uc7a5\ub41c\ub2e4. \ucc38\uace0\ub85c, \uc2e0\uace0\ud558\ub294 \ucf54\ub4dc\ub294 <code>ReportModel.create()</code> \uc744 \ubcf4\uba74 \ub41c\ub2e4.</p> <p>\uae30\ubcf8\uc801\uc73c\ub85c \uc800\uc7a5\ub418\ub294 \ud544\ub4dc\ub294 <code>uid</code> \uc640 <code>createdAt</code> \uc774 \uc788\ub2e4. <code>uid</code> \ub294 \uc2e0\uace0\uc790\uc758 uid \uc774\uba70, <code>createdAt</code> \uc740 \uc2e0\uace0\ub41c \uc2dc\uac04\uc774\ub2e4.</p> <p>\uc2e0\uace0\ud558\ub294 \ub370\uc774\ud130\ub97c \uc800\uc7a5 \ud560 \ub54c, \ud544\ub4dc\uc5d0 \ub530\ub77c\uc11c \uc2e0\uace0 \ub300\uc0c1\uc744 \uad6c\ubd84\ud558\ub294\ub370, - \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub97c \uc2e0\uace0\ud558\uba74, <code>otherUserUid</code> \ud544\ub4dc\uc5d0 \uc2e0\uace0 \ub2f9\ud558\ub294 \uc0ac\uc6a9\uc790 UID \uac12\uc774 \uc800\uc7a5\ub418\uace0, - \uae00\uc744 \uc2e0\uace0\ud558\uba74, <code>postId</code> \ud544\ub4dc\uc5d0 \ud574\ub2f9 \uae00 ID, - \ucf54\uba58\ud2b8\ub97c \uc2e0\uace0\ud558\uba74, <code>commentId</code> \uc5d0 \ud574\ub2f9 \ucf54\uba58\ud2b8 ID, - \ucc44\ud305 \ubc29\uc744 \uc2e0\uace0\ud558\uba74, <code>chatRoomId</code> \uc5d0 \ud574\ub2f9 \ucc44\ud305 \ubc29 ID \uac12\uc774 \uc800\uc7a5\ub41c\ub2e4.</p> <p>\uc2e0\uace0\ub294 \uc911\ubcf5\uc744 \ud560 \uc218 \uc788\ub2e4. \uc989, \ud558\ub098\uc758 \ucf54\uba58\ud2b8\ub97c \uc5ec\ub7ec\ubc88 \uc2e0\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc758 \ud504\ub85c\ud544\uc774\ub098 \uae00/\ucf54\uba58\ud2b8 \ub4f1\uc744 \uc2e0\uace0 \ud560 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/report/#_2","title":"\uc0ac\uc6a9\uc790 \uc2e0\uace0\ud558\uae30","text":"<ul> <li>To report a user</li> </ul> <pre><code>ElevatedButton(\n    onPressed: () async {\n        // Ask user the reason why he reports.\n        final re = await input(\n            context: context,\n            title: T.reportInputTitle.tr,\n            subtitle: T.reportInputMessage.tr,\n            hintText: T.reportInputHint.tr,\n        );\n        // If the user submits\n        if (re == null || re == '') return;\n        await ReportService.instance.report(\n            commentId: widget.comment.id,\n            reason: re,\n        );\n        if (mounted) {\n            toast(context: context, message: 'You have reported this comment.');\n        }\n    },\n    child: Text(T.report.tr),\n),\n</code></pre>"},{"location":"korean/report/#_3","title":"\ucc44\ud305\ubc29 \uc2e0\uace0\ud558\uae30","text":"<pre><code>final re = await input(\n    context: context,\n    title: T.reportInputTitle.tr,\n    subtitle: T.reportInputMessage.tr,\n    hintText: T.reportInputHint.tr,\n);\nif (re == null || re == '') return;\nawait ReportService.instance.report(chatRoomId: chat.room.id, reason: re);\n</code></pre>"},{"location":"korean/report/#_4","title":"\uae00 \uc2e0\uace0\ud558\uae30","text":"<pre><code>TextButton(\n    onPressed: () async {\n        final re = await input(\n        context: context,\n        title: T.reportInputTitle.tr,\n        subtitle: T.reportInputMessage.tr,\n        hintText: T.reportInputHint.tr,\n        );\n        if (re == null || re == '') return;\n        await ReportService.instance.report(\n        postId: post.id,\n        category: post.category,\n        reason: re,\n        );\n    },\n    child: const Text('\uc2e0\uace0'),\n    ),\n</code></pre>"},{"location":"korean/report/#_5","title":"\ucf54\uba58\ud2b8 \uc2e0\uace0\ud558\uae30","text":""},{"location":"korean/report/#_6","title":"\ub0b4\uac00 \uc2e0\uace0\ud55c \ub0b4\uc5ed","text":"<p><code>ReportMyListView</code> \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p>"},{"location":"korean/report/#_7","title":"\uad00\ub9ac\uc790\uac00 \uc2e0\uace0\ub41c \ubaa9\ub85d \uac80\ud1a0","text":""},{"location":"korean/test/","title":"\ud14c\uc2a4\ud2b8","text":""},{"location":"korean/test/#_2","title":"\ud568\uc218\ub97c \ub85c\uceec \ucef4\ud4e8\ud130\uc5d0\uc11c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95","text":"<p><code>GOOGLE_APPLICATION_CREDENTIALS</code> \ud658\uacbd \ubcc0\uc218\uc5d0 service account \uc800\uc7a5\ud574\uc57c \ud55c\ub2e4.</p> <p>\uc608\uc81c</p> <pre><code>% export GOOGLE_APPLICATION_CREDENTIALS=../../apps/momcafe/tmp/service-account.json\n</code></pre> <p>\ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc791\uc131\uc740 <code>tests/user/phoneNumberRegister.spec.ts</code> \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ucc38\uace0\ud55c\ub2e4.</p> <p>\ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc2e4\ud589\uc740 <code>package.json</code> \ud30c\uc77c\uc744 \ucc38\uace0\ud55c\ub2e4.</p>"},{"location":"korean/test/#fcm","title":"FCM \ud14c\uc2a4\ud2b8","text":"<ul> <li>\ub85c\uceec\uc5d0\uc11c push notification \ud14c\uc2a4\ud2b8 \ud558\ub824\uba74, <code>firebase/functions/src/test/send-message.ts</code> \ub97c \ucc38\uace0\ud55c\ub2e4.</li> </ul>"},{"location":"korean/theme/","title":"\ud14c\ub9c8 \ub514\uc790\uc778","text":""},{"location":"korean/theme/#_2","title":"\ud14c\uc2a4\ud2b8 \ud14c\ub9c8","text":"<ul> <li><code>labelSmall</code> \uc740 10 \uc73c\ub85c \uc791\uc544\uc11c \uae00\uc528\uac00 \uc77d\uae30 \ud798\ub4e4 \uc815\ub3c4\uc774\ub2e4. \uac01\uc885 \ub808\uc774\ube14\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4.</li> <li>\uc0ac\uc6a9\ub418\ub294 \uacf3 \uc608<ul> <li>\ucc44\ud305\ubc29 \uba54\uc2dc\uc9c0\uc758 \uc2dc\uac04</li> <li>\ucc44\ud305\ubc29 \uba54\uc2dc\uc9c0\uc758 \uc774\ub984</li> </ul> </li> <li><code>labelMedium</code> \uc740 12 \uc815\ub3c4\ub85c \uc801\ub2f9\ud55c \uae00\uc528\uc774\uc9c0\ub9cc, \uc791\uc740 \ud3b8\uc774\ub2e4.</li> <li>\uc0ac\uc6a9\ub418\ub294 \uacf3 \uc608</li> <li> <p><code>labelLarge</code> \uc740 14 \uc815\ub3c4\ub85c \uc801\ub2f9\ud55c \uae00\uc528\uc774\ub2e4.</p> </li> <li> <p><code>bodyMedium</code> \uc740 \uc77c\ubc18\uc801\uc778 \uae00 \ud45c\uc2dc/\uc77d\uae30\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ud06c\uae30\uc774\uba70, Flutter \uc5d0\uc11c <code>Text</code> \uc704\uc82f\uc73c\ub85c \uae00\uc528\ub97c \ud45c\uc2dc \ud560 \ub54c \uae30\ubcf8\uc774 \ub418\ub294 \ud06c\uae30\uc774\ub2e4.</p> </li> <li>\uc0ac\uc6a9\ub418\ub294 \uacf3 \uc608<ul> <li>\uac8c\uc2dc \uae00, \ucf54\uba58\ud2b8 \uae00, UserDisplayName \ub4f1 \uc77c\ubc18\uc801\uc778 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4.</li> </ul> </li> </ul>"},{"location":"korean/translation/","title":"Text","text":"<p>The default language is English. And you can change it into different language or change it into your own texts.</p>"},{"location":"korean/translation/#changing-the-texts","title":"Changing the texts","text":"<p>You can change it inside your app.</p> <p>For instance, simply set the text code as following.</p> <pre><code>TextService.instance.texts['name'] = '\uc774\ub984';\nTextService.instance.texts[Code.profileUpdate] = '\ud504\ub85c\ud544 \uc218\uc815';\n</code></pre> <p>To know the whole list of text code, you may open <code>lib/src/text/text.service.dart</code>.</p> <p>You may add your own text code and text for your app. So, you don't have to maintain another multi-lingual logic.</p> <p>For instance, define your own text code for your app like below</p> <pre><code>TextService.instance.texts['appName'] = 'My App';\n</code></pre> <p>And use it when you need,</p> <pre><code>Text('appName').tr\n</code></pre> <p>If the key is not defined in <code>texts</code> variable inside <code>text.service.dart</code>, then it will be shown as it is.</p>"},{"location":"korean/translation/#pre-defined-texts","title":"Pre-defined texts","text":"<p>Some texts are predefined in <code>src/text/texts.dart</code> and you can use it like below.</p> <pre><code>Text(T.setting.tr)\n</code></pre> <p>Note that, <code>T.setting</code> is not defined in <code>texts</code>. So it is used as it is.</p>"},{"location":"korean/translation/#_1","title":"\ub2e4\uad6d\uc5b4 \uc9c0\uc6d0","text":"<p>\uc544\ub798\uc640 \uac19\uc774 \uc7a5\uce58\uc758 \uae30\ubcf8 \uc5b8\uc5b4\uc5d0 \ub530\ub77c \ubc88\uc5ed\ub41c \ubb38\uc790\uc5f4(\ubb38\uc7a5)\uc744 \ud654\uba74\uc5d0 \ubcf4\uc5ec \uc904 \uc218 \uc788\ub2e4.</p> <p>\ubc88\uc5ed\ub41c \ubb38\uc790\uc5f4 \uc124\uc815\ud558\ub294 \ubc29\ubc95</p> <pre><code>Locale locale = Localizations.localeOf(context);\n\nTextService.instance.texts = {\n    ...TextService.instance.texts,\n    if (locale.languageCode == 'ko') ...{\n    T.save: '\uc800\uc7a5',\n    T.login: '\ub85c\uadf8\uc778',\n    'phoneSignIn': '\uc804\ud654\ubc88\ud638\ub85c \ub85c\uadf8\uc778',\n    },\n    if (locale.languageCode == 'en') ...{\n    T.save: 'Save',\n    T.saved: 'Saved',\n    'phoneSignIn': 'Sign in with phone',\n    },\n    if (locale.languageCode == 'vi') ...{\n    T.save: 'L\u01b0u',\n    'phoneSignIn': '\u0110\u0103ng nh\u1eadp b\u1eb1ng s\u1ed1 \u0111i\u1ec7n tho\u1ea1i',\n    },\n    if (locale.languageCode == 'th') ...{\n    T.save: '\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01',\n    },\n    if (locale.languageCode == 'lo') ...{\n    T.save: '\u0e9a\u0eb1\u0e99\u0e97\u0eb6\u0e81',\n    },\n    if (locale.languageCode == 'my') ...{\n    T.save: '\u101e\u102d\u1019\u103a\u1038\u1006\u100a\u103a\u1038',\n    }\n};\n</code></pre> <p>\uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95</p> <pre><code>'phoneSignIn'.tr\n</code></pre>"},{"location":"korean/typesense/","title":"\uac80\uc0c9","text":"<ul> <li>\ub9cc\uc57d, \uc5b4\ub5a0\ud55c \uc774\uc720\ub85c \uc0ac\uc6a9\uc790 \uc815\ubcf4\uac00 Typesense \uc5d0 \uc0c9\uc778\ub418\uc9c0 \uc54a\uc558\uc744 \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc740 \uacbd\uc6b0, \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \uc218\uc815\ud558\uba74 Typesense \uc5d0 \uc0c9\uc778\ub41c\ub2e4.</li> </ul>"},{"location":"korean/typesense/#_2","title":"\uc124\uce58","text":"<ul> <li>Typesense \uc758 \uacbd\uc6b0 Api Key \ub97c \ubc31\uc5d4\ub4dc\uc640 \ud504\ub860\ud2b8\uc5d4\ub4dc\uc5d0 \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4.</li> <li>\ubc31\uc5d4\ub4dc\ub294 Cloud Functions \uc758 <code>firebase/functions/src/config.ts</code> \uc774\uace0,</li> <li>\ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 \ud50c\ub7ec\ud130\uc5d0\uc11c <code>TypesenseService.instnace.init()</code> \uc5d0\uc11c \ud558\uba74 \ub41c\ub2e4.</li> </ul>"},{"location":"korean/typesense/#how-to","title":"How to","text":"<ul> <li>Typesense is not tightly coupled with fireship. Meaning, you have to manually code to index.</li> <li>TypesenseService must be initialized before using it.</li> </ul>"},{"location":"korean/typesense/#how-to-index","title":"How to index","text":"<ul> <li>Below is an example of indexing.</li> </ul> <pre><code>TypesenseService.instance.init(\n    apiKey: '12345a',\n    scheme: 'http',\n    host: 'file.philgo.com',\n    port: 8108,\n    searchCollection: 'search',\n);\nUserService.instance.init(\n    onCreate: TypesenseService.instance.upsertUser,\n    onUpdate: Types\n    enseService.instance.upsertUser,\n);\nForumService.instance.init(\n    onPostCreate: TypesenseService.instance.upsertPost,\n    onPostUpdate: TypesenseService.instance.upsertPost,\n    onPostDelete: TypesenseService.instance.delete,\n    onCommentCreate: TypesenseService.instance.upsertComment,\n    onCommentUpdate: TypesenseService.instance.upsertComment,\n    onCommentDelete: TypesenseService.instance.delete,\n);\n</code></pre>"},{"location":"korean/typesense/#how-to-search","title":"How to search","text":"<p>To search, <code>TypesenseService.instance.search</code> can be used. Check the example code below:</p> <pre><code>final searchParameters = {\n    'q': 'Your Searching Text',\n    'query_by': 'user,post,comment',\n    'filter_by': 'category:=discussion',\n    'page': '1',\n    'per_page': '10',\n    'sort_by': 'createdAt:desc'\n};\n\nfinal re = await TypesenseService.instance.search(searchParameters: searchParameters);\n\nfinal itemsResult = re.getDocs;\n\nreturn ListView.builder(\n    itemCount: itemsResult.length,\n    itemBuilder: (context, index) {\n        final resDoc = itemsResult[index];\n        if (resDoc.type == TypesenceDocType.user) {\n            final user = UserModel.fromJson(resDoc.toJson());\n            return Text(\"User uid: ${user.uid}\");\n        }\n        if (resDoc.type == TypesenceDocType.post) {\n            final post = PostModel.fromJson(resDoc.toJson(), id: resDoc.id);\n            return PostListTile( post: post );\n        }\n        if (resDoc.type == TypesenceDocType.comment) {\n            final comment = CommentModel.fromMap(resDoc.toJson(), resDoc.id, category: resDoc.category ?? '', postId: resDoc.postId ?? '');\n            return Text(\"Comment id: ${comment.id}\");\n        }\n        return Text(\"Error: document is not form user, post, or comment\");\n    }\n);    \n</code></pre>"},{"location":"korean/user/","title":"\uc0ac\uc6a9\uc790","text":"<p>\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uad00\ub9ac\uc5d0 \ud544\uc694\ud55c \uae30\ubcf8 \uae30\ub2a5\uc774 fireship \uc5d0 \ud3ec\ud568\ub418\uc5b4\uc838 \uc788\uc73c\ubbc0\ub85c \uadf8 \uc704\uc82f\uc774\ub098 \ub85c\uc9c1\uc744 \uc7ac \ud65c\uc6a9\ud558\uba74 \uc88b\ub2e4. \ud2b9\ud788, \uae30\ubcf8 \uc81c\uacf5\ub418\ub294 \uc704\uc82f\uc744 \ubcf5\uc0ac\ud574\uc11c \ucee4\uc2a4\ud140\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4.</p>"},{"location":"korean/user/#user-database-structure","title":"User database structure","text":"<ul> <li>\uc0ac\uc6a9\uc790 \uc815\ubcf4\ub294 realtime database \uc758 <code>/users/&lt;uid&gt;</code> \uc5d0 \uae30\ub85d\ub41c\ub2e4.</li> </ul> <p><code>displayName</code> is the name of the user. Fireship (including all the widgets) will always use <code>dispalyName</code> to display the name of the user. This can be a real name, or it can be a nickname. If you want to keep user's name in different format like <code>firstName</code>, <code>middleName</code>, <code>lastName</code>, you can do it in your app. You may get user's real name and save it in <code>name</code> field in your app.</p> <p><code>createdAt</code> has the time of the first login. This is the account creation time.</p> <p>\uc0ac\uc6a9\uc790\uc758 \ubcf8\uba85 \ub610\ub294 \ud654\uba74\uc5d0 \ub098\ud0c0\ub098\uc9c0 \uc54a\ub294 \uc774\ub984\uc740 <code>name</code> \ud544\ub4dc\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud654\uba74\uc5d0 \ud45c\uc2dc\ub418\ub294 \uc774\ub984\uc740 <code>displayName</code> \ud544\ub4dc\uc5d0 \uc800\uc7a5\uc744 \ud55c\ub2e4. The user's real name or a name not displayed on the screen is stored in the name field. The displayed name is saved in the <code>displayName</code> field.</p> <p><code>isVerified</code> \ub294 \uad00\ub9ac\uc790\ub9cc \uc218\uc815 \ud560 \uc218 \uc788\ub294 \ud544\ub4dc\uc774\ub2e4. \ube44\ub85d \uc0ac\uc6a9\uc790 \ubb38\uc11c\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4\ub3c4 \uc0ac\uc6a9\uc790\uac00 \uc218\uc815 \ud560 \uc218 \uc5c6\ub2e4. \uad00\ub9ac\uc790\uac00 \uc9c1\uc811 \uc218\ub3d9\uc73c\ub85c \ud68c\uc6d0 \uc2e0\ubd84\uc99d\uc744 \ud655\uc778\ud558\uace0 \uc601\uc0c1 \ud1b5\ud654\ub97c \ud55c \ub2e4\uc74c <code>isVerified</code> \uc5d0 true \ub97c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. <code>isVerified</code> is a field that only administrators can modify. Even if it's included in the user document, users cannot modify it. Administrators manually confirm identity documents and conduct video calls. Afterward, they can set <code>isVerified</code> to true.</p> <p><code>gender</code> \ub294 <code>M</code> \ub610\ub294 <code>F</code> \uc758 \uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, null (\ud544\ub4dc\uac00 \uc5c6\ub294 \uc0c1\ud0dc) \uc0c1\ud0dc\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4. \ucc38\uace0\ub85c, <code>isVerified</code> \uac00 true \uc77c \ub54c\uc5d0\ub9cc \uc131\ubcc4 \uc5ec\ubd80\ub97c \ubbff\uc744 \uc218 \uc788\ub2e4. \uc989, <code>isVerified</code> \uac00 true \uac00 \uc544\ub2c8\uba74, <code>gender</code> \uc815\ubcf4\ub3c4 \uac00\uc9dc\uc77c \uc218 \uc788\ub2e4. <code>gender</code> can have values of <code>M</code> or <code>F</code> and may be in a null state (no field). Note that the gender information can only be trusted when <code>isVerified</code> is true. In other words, if <code>isVerified</code> is not true, gender information may also be false.</p> <p><code>blocks</code> \ub294 \ucc28\ub2e8\ud55c \uc0ac\uc6a9\uc790\uc758 \ubaa9\ub85d\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \ucc28\ub2e8\uc740 \uc0ac\uc6a9\uc790\ub9cc \ud560 \uc218 \uc788\ub2e4. \ucc38\uace0\ub85c, \uc88b\uc544\uc694\ub294 \uc0ac\uc6a9\uc790, \uae00, \ucf54\uba58\ud2b8, \ucc44\ud305 \ub4f1\uc5d0 \ud560 \uc218 \uc788\uace0, \ubd81\ub9c8\ud06c\ub294 \uc0ac\uc6a9\uc790, \uae00, \ucf54\uba58\ud2b8 \ub4f1\uc5d0 \ud560 \uc218 \uc788\uc73c\ub098, \ucc28\ub2e8\uc740 \uc0ac\uc6a9\ub9cc \ud560 \uc218 \uc788\ub2e4. \ucc38\uace0\ub85c, <code>likes</code> \ub294 \uc30d\ubc29\uc73c\ub85c \uc815\ubcf4 \ud655\uc778\uc774 \uac00\ub2a5\ud574\uc57c\ud55c\ub2e4. \uc774 \ub9d0\uc740 \ub0b4\uac00 \ub204\uad6c\ub97c \uc88b\uc544\uc694 \ud588\ub294\uc9c0 \uc54c\uc544\uc57c \ud560 \ud544\uc694\uac00 \uc788\uace0, \uc0c1\ub300\ubc29\ub3c4 \ub0b4\uac00 \uc88b\uc544\uc694\ub97c \ud588\ub294\uc9c0 \uc54c\uc544\uc57c \ud560 \ud544\uc694\uac00 \uc788\ub2e4. \uadf8\ub798\uc11c \ub370\uc774\ud130 \uad6c\uc870\uac00 \ubcf5\uc7a1\ud574 <code>/user-likes</code> \uc5d0 \ub530\ub85c \uc800\uc7a5\uc744 \ud558\uc9c0\ub9cc, <code>blocks</code> \ub294 \ub0b4\uac00 \ub204\uad6c\ub97c \ucc28\ub2e8\ud588\ub294\uc9c0 \ub2e4\ub978 \uc0ac\ub78c\uc5d0\uac8c \uc54c\ub824 \uc904 \ud544\uc694\uac00 \uc5c6\ub2e4. \uadf8\ub798\uc11c <code>/users</code> \uc5d0 \uc800\uc7a5\uc744 \ud55c\ub2e4.</p> <p><code>latitude</code> \uc640 <code>longitude</code> \uc5d0 \uac12\uc774 \uc800\uc7a5\ub418\uba74 \uc790\ub3d9\uc73c\ub85c <code>geohash4</code>, <code>geohash5</code>, <code>geohash6</code>, <code>geohash7</code> \uc5d0 GeoHash \ubb38\uc790\uc5f4 4/5/6/7 \uc790\ub9ac \uac12\uc774 \uc800\uc7a5\ub41c\ub2e4. \uc989, \uc704/\uacbd\ub3c4\uc758 \uac12\uc740 \uc571\uc5d0\uc11c Location \ub610\ub294 GeoLocator \ud328\ud0a4\uc9c0\ub97c \uc368\uc11c, \ud37c\ubbf8\uc158 \uc124\uc815\uc744 \ud558\uace0, Lat/Lon \uac12\uc744 \uad6c\ud55c \ub2e4\uc74c, <code>UserModel.update()</code> \ub85c \uc800\uc7a5\ud558\uba74, \uc790\ub3d9\uc73c\ub85c geohash \ubb38\uc790\uc5f4\uc774 \uc800\uc7a5\ub418\ub294 \uac83\uc774\ub2e4. \ubcf4\ub2e4 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uac70\ub9ac \uac80\uc0c9\uc744 \ucc38\uace0\ud55c\ub2e4.</p> <ul> <li>User profile photo is saved under <code>/users/&lt;uid&gt;</code> and <code>/user-profile-photos/&lt;uid&gt;</code>.<ul> <li>The reason why it saves the photo url into <code>/user-profile-photos</code> is to list the users who has profile photo. Without <code>/user-profile-photos</code> node, It can list with <code>/users</code> data but it cannot sort by time.</li> <li><code>/user-profile-photos/&lt;uid&gt;</code> has <code>updatedAt</code> field that is updated whenever the user changes profile photo.</li> <li>It is managed by <code>UserModel</code>.</li> </ul> </li> </ul>"},{"location":"korean/user/#ui-customizing-user-ui","title":"\uc0ac\uc6a9\uc790 UI \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 (Customizing User UI)","text":""},{"location":"korean/user/#ui-login-error-ui","title":"\ub85c\uadf8\uc778 \uc5d0\ub7ec UI (Login Error UI)","text":"<p>\ub85c\uadf8\uc778\uc774 \ud544\uc694\ud55c \uc0c1\ud669\uc5d0\uc11c \ub85c\uadf8\uc778\uc744 \ud558\uc9c0 \uc54a\uace0 \ud574\ub2f9 \ud398\uc774\uc9c0\ub97c \uc774\uc6a9\ud558\ub824\uace0 \ud55c\ub2e4\uba74, <code>DefaultLoginFirstScreen</code> \uc774 \uc0ac\uc6a9\ub41c\ub2e4. \uc774\uac83\uc740 \uc544\ub798\uc640 \uac19\uc774 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc744 \ud560 \uc218 \uc788\ub2e4. If someone tries to access a page that requires login without logging in, <code>DefaultLoginFirstScreen</code> is used. You can customize it as follows:</p> <pre><code>UserService.instance.init(\n  customize: UserCustomize(\n    loginFirstScreen: const Text('\ub85c\uadf8\uc778\uc744 \uba3c\uc800 \ud574 \uc8fc\uc138\uc694. (Please login first!)'),\n  ...\n  ),\n)\n</code></pre> <p><code>loginFirstScreen</code> \uc740 builder \uac00 \uc544\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc815\uc801 widget \uc744 \ub9cc\ub4e4\uc5b4\uc8fc\uba74 \ub418\ub294\ub370, Scaffold \ub97c \ud1b5\uc9f8\ub85c \ub9cc\ub4e4\uc5b4 \ub123\uc73c\uba74 \ub41c\ub2e4. <code>loginFirstScreen</code> is not a builder. So, you can create a static widget, and if you put it in a Scaffold, it will work.</p>"},{"location":"korean/user/#user-profile-update-screen","title":"User profile update screen","text":"<p>Fireship provides a few widgets to update user's profile information like below</p>"},{"location":"korean/user/#defaultprofileupdateform","title":"DefaultProfileUpdateForm","text":"<p><code>DefaultProfileUpdateForm</code> provides with the options below - state image (profile background image) - profile photo - name - state message - birthday picker - gender - nationality selector - region selector(for Korean nation only) - job</p> <p><code>DefaultProfileUpdateForm</code> also provides more optoins.</p> <p>You you can call <code>UserService.instance.showProfileScreen(context)</code> mehtod which shows the <code>DefaultProfileUpdateForm</code> as dialog.</p> <p>It is important to know that fireship uses <code>UserService.instance.showProfileScreen()</code> to display the login user's profile update screen. So, if you want to customize everything by yourself, you need to copy the code and make it your own widget. then conect it to <code>UserService.instance.init(customize: UserCustomize(showProfile: ... ))</code>.</p>"},{"location":"korean/user/#simpleprofileupdateform","title":"SimpleProfileUpdateForm","text":"<p>This is very simple profile update form widget and we don't recommend it for you to use it. But this is good to learn how to write the user update form.</p> <pre><code>Scaffold(\n  appBar: AppBar(\n    title: const Text('Profile'),\n  ),\n  body: Padding(\n    padding: const EdgeInsets.all(md),\n    child: Theme(\n      data: bigButtonTheme(context),\n      child: SimpleProfileUpdateForm(\n        onUpdate: () =&gt; toast(\n          context: context,\n          message: context.ke('\uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4.', 'Profile updated.'),\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>"},{"location":"korean/user/#_2","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \ucc38\uace0","text":"<p><code>UserDoc</code> \uc704\uc82f\uc744 \uc0ac\uc6a9 \ud558\uba74 \ub41c\ub2e4. \uc790\uc138\ud55c \uac83\uc740, \uc704\uc82f \ubb38\uc11c\ub97c \ucc38\uace0\ud55c\ub2e4.</p>"},{"location":"korean/user/#_3","title":"\ub098\uc758 (\ub85c\uadf8\uc778 \uc0ac\uc6a9\uc790) \uc815\ubcf4 \uc561\uc138\uc2a4","text":"<p><code>UserService.instance.user</code> \ub294 DB \uc758 \uc0ac\uc6a9\uc790 \ubb38\uc11c \uac12\uc744 \ubaa8\ub378\ub85c \uac00\uc9c0\uace0 \uc788\ub294 \ubcc0\uc218\uc774\ub2e4. \uc9e7\uac8c <code>my</code> \ub85c \uc4f8 \uc218 \uc788\ub3c4\ub85d \ud574 \ub193\uc558\ub2e4. DB \uc758 \uac12\uc774 \ubcc0\uacbd\ub418\uba74 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc774 \ubcc0\uc218\uc758 \uac12\ub3c4 \uc5c5\ub370\uc774\ud2b8(sync)\ub41c\ub2e4. \uadf8\ub798\uc11c DB \uc5d0 \uac12\uc744 \ubcc0\uacbd \ud55c \ub2e4\uc74c, (\uc57d\uac04 \uc26c\uc5c8\ub2e4) <code>my</code> \ubcc0\uc218\ub85c \uc62c\ubc14\ub85c \uac12\uc774 \uc800\uc7a5\ub418\uc5c8\ub294\uc9c0 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, form field \uac12 \ubcc0\uacbd \uc989\uc2dc \uc800\uc7a5\ud558\uace0, submit \ubc84\ud2bc\uc744 \ub204\ub974\uba74 \ud655\uc778\uc744 \ud560 \uc218 \uc788\ub2e4.</p> <p>\ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790(\ub098)\uc758 \uc815\ubcf4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 <code>MyDoc</code> \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4. \ubb3c\ub860, <code>UserDoc</code> \ub97c \uc0ac\uc6a9\ud574\ub3c4 \ub418\uc9c0\ub9cc, <code>MyDoc</code> \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ud6a8\uacfc\uc801\uc774\ub2e4. To reference the information of the logged-in user (yourself), you can use MyDoc. While using UserDoc is acceptable, using MyDoc is more effective.</p> <p>Fireship \uc740 <code>UserService.instance.myDataChanges</code> \ub97c \ud1b5\ud574\uc11c \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130\uac00 \ubcc0\uacbd \ub420 \ub54c \ub9c8\ub2e4, \uc790\ub3d9\uc73c\ub85c BehaviorSubject \uc778 <code>myDataChanges</code> \uc774\ubca4\ud2b8 \uc2dc\ud0a4\ub294\ub370 \uadf8 \uc774\ubca4\ud2b8\ub97c \ubc1b\uc544\uc11c <code>MyDoc</code> \uc704\uc82f\uc774 \ub3d9\uc791\ud55c\ub2e4. \uadf8\ub798\uc11c \ucd94\uac00\uc801\uc73c\ub85c DB \uc561\uc138\uc2a4\ub97c \ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ub294 \uac83\uc774\ub2e4. Fireship uses UserService.instance.myDataChanges to automatically trigger the BehaviorSubject myDataChanges event whenever the data of the logged-in user changes. MyDoc widgets respond to this event, eliminating the need for additional DB access.</p> <pre><code>MyDoc(builder: (my) =&gt; Text(\"isAdmin: ${my?.isAdmin}\"))\n</code></pre> <p>\uad00\ub9ac\uc790\uc774\uba74 \uc704\uc82f\uc744 \ud45c\uc2dc\ud558\ub294 \uc608. An example of displaying a widget if the user is an administrator:</p> <pre><code>MyDoc(builder: (my) =&gt; isAdmin ? Text('I am admin') : Text('I am not admin'))\n</code></pre> <p>If you are going to watch(listen) a value of a field, then you can use <code>MyDoc.field</code>.</p> <pre><code>MyDoc.field('${Field.blocks}/$uid', builder: (v) {\n  return Text(v == null ? T.block.tr : T.unblock.tr);\n})\n</code></pre>"},{"location":"korean/user/#displaying-admin-widgets","title":"\uad00\ub9ac\uc790 \uc704\uc82f \ud45c\uc2dc (Displaying Admin Widgets)","text":"<p>\uad00\ub9ac\uc790 \uc778\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uac04\ub2e8\ud558\uac8c \ud558\uba74 \ub41c\ub2e4. To check if a user is an administrator, you can do it as follows:</p> <pre><code>Admin( builder: () =&gt; Text('I am an admin') );\n</code></pre>"},{"location":"korean/user/#user-information-update","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc815 (User Information Update)","text":"<p><code>UserModel.update()</code> \ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \uc218\uc815 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098 UserModel \uc758 \uac1d\uccb4\ub294 DB \uc5d0 \uc800\uc7a5\ub418\uae30 \uc804\uc758 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8\ub798\uc11c, DB \uc5d0 \uc5c5\ub370\uc774\ud2b8 \ub41c \uac12\uc744 \uc4f0\uae30 \uc704\ud574\uc11c\ub294 <code>UserModel.reload()</code> \ub97c \uc4f0\uba74 \ub41c\ub2e4.</p> <pre><code>await user.update(displayName: 'Banana');\nawait user.reload();\nprint(user.displayName);\n</code></pre>"},{"location":"korean/user/#displaying-user-data","title":"Displaying user data","text":"<ul> <li>You can use <code>UserDoc</code> or <code>MyDoc</code> to display user data.</li> <li>The most commonly used user properties are name and photos. Fireship provides <code>UserDisplayName</code> and <code>UserAvatar</code> for your convinience.</li> </ul>"},{"location":"korean/user/#userdoc","title":"UserDoc","text":"<p>The <code>UserDoc</code> can be used like this:</p> <pre><code>UserDoc(\n  uid: uid,\n  builder: (data) {\n    if (data == null) return const SizedBox.shrink();\n    final user = UserModel.fromJson(data, uid: uid);\n    return Text( user.displayName ?? 'No name' );\n  },\n),\n</code></pre>"},{"location":"korean/user/#mydoc","title":"MyDoc","text":"<p>The <code>MyDoc</code> can be used like this:</p> <pre><code>MyDoc(\n  builder: (my) {\n    return Text( user.displayName ?? 'No name');\n  }\n),\n\n</code></pre>"},{"location":"korean/user/#userdisplayname","title":"UserDisplayName","text":"<p>The <code>UserDisplayName</code> widget can be used like this:</p> <pre><code>UserDisplayName(uid: uid),\n</code></pre> <p>This will show <code>displayName</code>, not <code>name</code> of the user.</p>"},{"location":"korean/user/#useravatar","title":"UserAvatar","text":"<p>The <code>UserAvatar</code> widget can be used like this:</p> <pre><code>UserAvatar(uid: uid, size: 100, radius: 40),\n</code></pre>"},{"location":"korean/user/#block-and-unblock","title":"Block and unblock","text":"<p>You can block or unblock other user like below.</p> <pre><code>final re = await my?.block(chat.room.otherUserUid!);\n</code></pre> <p>You may want to let the user know if the other user has blocked or unblocked.</p> <pre><code>final re = await my?.block(chat.room.otherUserUid!);\ntoast(\n  context: context,\n  title: re == true ? 'Blocked' : 'Unblocked',\n  message: re == true ? 'You have blocked this user' : 'You have unblocked this user',\n);\n</code></pre>"},{"location":"korean/user/#widgets","title":"Widgets","text":""},{"location":"korean/user/#updatebirthdayfield","title":"UpdateBirthdayField","text":"<p>You can use this widget to display birthday and let user to update his birthday in profile screen.</p>"},{"location":"korean/user/#usertile","title":"UserTile","text":"<p>Use this widget to display the user information in a list. <code>onTap</code> is optional and if it is not specified, the widget does not capture the tap event.</p> <pre><code>FirebaseDatabaseListView(\n  query: Ref.users,\n  itemBuilder: (_, snapshot) =&gt; UserTile(\n    user: UserModel.fromSnapshot(snapshot),\n    trailing: const Column(\n      children: [\n        FaIcon(FontAwesomeIcons.solidCheck),\n        spaceXxs,\n        Text('\uc778\uc99d\uc644\ub8cc'),\n      ],\n    ),\n    onTap: (user) {\n      user.update(isVerified: true);\n    },\n  ),\n),\n</code></pre> <p>You can use <code>trailing</code> to add your own buttons intead of using <code>onTap</code>.</p>"},{"location":"korean/user/#userlistview","title":"UserListView","text":"<p>Fireship provides a widget to display user list. We can use this if we don't have to customize the view.</p> <pre><code>UserListView()\n</code></pre>"},{"location":"korean/user/#user-likes","title":"User likes","text":"<ul> <li>User likes are saved under <code>/user-likes</code> and <code>/user-who-i-like</code>.</li> <li>If A likes U, then A is saved under <code>/user-likes/U {A: true}</code> and U is saved under <code>/user-who-i-like/A { U: true}</code>.</li> <li> <p>The fireship client code needs to save <code>/user-likes/U {A: true}</code> only. The cloud function <code>userLike</code> will take action and it will save the counter part <code>/user-who-i-like</code> data and update the <code>noOfLikes</code> on the user's node.</p> </li> <li> <p>The data structure will be like below.</p> </li> <li>When A like U,</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-who-i-like/A { U: true }\n/users/U {noOfLikes: 1}\n</code></pre> <ul> <li>When A, B likes U,</li> </ul> <pre><code>/user-likes/U { A: true, B: true}\n/user-who-i-like/A {U: true}\n/user-who-i-like/B {U: true}\n/users/U {noOfLikes: 2}\n</code></pre> <ul> <li>When B unlinke U,</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-who-i-like/A { U: true }\n/users/U {noOfLikes: 1}\n</code></pre> <ul> <li>When A likes U, W</li> </ul> <pre><code>/user-likes/U { A: true }\n/user-likes/W { A: true }\n/user-who-i-like/A { U: true, W: true }\n/users/U {noOfLikes: 1}\n/users/W {noOfLikes: 1}\n</code></pre> <p>You can use the <code>like</code> method to perform a like and unlike user like bellow.</p> <pre><code>IconButton(\n  onPressed: () async {\n     await my?.like(uid);\n  },\n  icon: const FaIcon(FontAwesomeIcons.heart),\n),\n</code></pre>"},{"location":"korean/user/#listening","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 listening","text":"<p><code>UserService.instance.myDataChanges</code> \ub294 <code>UserService.instance.init()</code> \uc774 \ud638\ucd9c \ub420 \ub54c, \ucd5c\ucd08\ub85c \ud55c\ubc88 \uc2e4\ud589\ub418\uace0, <code>/users/&lt;my-uid&gt;</code> \uc758 \uac12\uc774 \ubcc0\uacbd \ub420 \ub54c\ub9c8\ub2e4 \uc774\ubca4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.</p> <p>BehaviourSubject \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\ubbc0\ub85c, \ucd5c\ucd08 \uac12\uc774 null \uc77c \uc218 \uc788\uc73c\uba70, \uadf8 \uc774\ud6c4 \uace7 \ubc14\ub85c realtime database \uc5d0\uc11c \uac12\uc774 \ud55c\ubc88 \ub85c\ub4dc\ub41c\ub2e4. \uadf8\ub9ac\uace0 \ub09c \ub2e4\uc74c\uc5d0\ub294 data \uac12\uc774 \ubcc0\uacbd \ub420 \ub54c \ub9c8\ub2e4 \ud638\ucd9c\ub41c\ub2e4. \uc774\ub7ec\ud55c \ud2b9\uc131\uc744 \uc0b4\ub824 \ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790 \uc815\ubcf4\uc758 \ubcc0\ud654\uc5d0 \ub530\ub77c \uc801\uc808\ud55c \ucf54\ub529\uc744 \ud560 \uc218 \uc788\ub2e4.</p> <pre><code>UserService.instance.myDataChanges.listen((user) {\n  if (user == null) {\n    print('User data is null. Not ready.');\n  } else {\n    print('User data is loaded. Ready. ${user.data}');\n  }\n});\n</code></pre> <p>\ub9cc\uc57d, \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\uac00 \ub85c\ub529\ub420 \ub54c (\ub610\ub294 \ub370\uc774\ud130\uac00 \ubcc0\ud558\ub294 \uacbd\uc6b0), \ud55c\ubc88\ub9cc \uc5b4\ub5a4 \uc561\uc158\uc744 \ucde8\ud558\uace0 \uc2f6\ub2e4\uba74, \uc544\ub798\uc640 \uac19\uc774 \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>StreamSubscription? listenRequiredField;\nlistenRequiredField = UserService.instance.myDataChanges.listen((user) {\n  if (user != null) {\n    checkUserData(user); // \ud504\ub85c\ud544\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ucc3d\uc744 \ub744\uc6b0\uac70\ub098 \ub4f1\uc758 \uc791\uc5c5\n    listenRequiredField?.cancel(); // \uadf8\ub9ac\uace0 listenning \uc744 \ud574\uc81c \ud574 \ubc84\ub9b0\ub2e4.\n  }\n});\n</code></pre>"},{"location":"korean/user/#_4","title":"\uc0ac\uc6a9\uc790\uac00 \uc0ac\uc9c4 \ub610\ub294 \uc774\ub984\uc744 \uc785\ub825\ud558\uc9c0 \uc54a\uc558\uc73c\uba74 \uac15\uc81c\ub85c \uc785\ub825\ud558\uac8c\ud558\ub294 \ubc29\ubc95","text":"<p>\uc544\ub798\uc640 \uac19\uc774, <code>UserService.instance.myDataChanges</code> \uc758 \uac12\uc744 \uc0b4\ud3b4\ubcf4\uace0, \uc774\ub984 \ub610\ub294 \uc0ac\uc9c4\uc774 \uc5c6\uc73c\uba74 \ud2b9\uc815 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\ud558\uac8c \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>class _HomeScreenState extends State&lt;MainScreen&gt; {\n  StreamSubscription? subscribeMyData;\n\n  @override\n  void initState() {\n    super.initState();\n\n    subscribeMyData = UserService.instance.myDataChanges.listen((my) {\n      if (my == null) return;\n      // \ub85c\uadf8\uc778\uc744 \ud55c \ub2e4\uc74c, \uc774\ub984\uc774\ub098 \uc0ac\uc9c4\uc774 \uc5c6\uc73c\uba74, \uac15\uc81c\ub85c \uc785\ub825 \ud560 \uc218 \uc788\ub294 \uc2a4\ud06c\ub9b0\uc73c\ub85c \uc774\ub3d9\ud574 \ubc84\ub9b0\ub2e4.\n      if (my.displayName.trim().isEmpty || my.photoUrl.isEmpty) {\n        context.go(InputRequiredFieldScreen.routeName);\n        // \ud55c\ubc88\ub9cc listen \ud558\ub3c4\ub85d \ud55c\ub2e4.\n        subscribeMyData?.cancel();\n      }\n    });\n</code></pre>"},{"location":"korean/user/#_5","title":"\ud68c\uc6d0 \uc815\ubcf4 \uc218\uc815 \ud654\uba74","text":"<p>\ud68c\uc6d0 \uc815\ubcf4 \uc218\uc815 \ud654\uba74\uc740 \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uac00 \ubcf8\uc778\uc758 \uc815\ubcf4\ub97c \ubcf4\ub294 \ud398\uc774\uc9c0\ub2e4. <code>UserService.instance.showProfileScreen</code> \uc744 \ud638\ucd9c\ud558\uba74 \ud68c\uc6d0 \uc815\ubcf4 \uc218\uc815 \ud654\uba74\uc744 \uc5f4 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/user/#_6","title":"\uc0ac\uc6a9\uc790 \uacf5\uac1c \ud504\ub85c\ud544 \ud654\uba74","text":"<p>\uc0ac\uc6a9\uc790 \uacf5\uac1c \ud504\ub85c\ud544 \ud654\uba74\uc740 \ubcf8\uc778 \ubfd0\ub9cc\uc544\ub2c8\ub77c \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \ubcf4\ub294 \ud398\uc774\uc9c0\uc774\ub2e4.</p> <p>\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \ud654\uba74\uc740 \uc5ec\ub7ec \uacf3\uc5d0\uc11c \ubcf4\uc5ec\uc9c8 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, \uc0ac\uc6a9\uc790 \ubaa9\ub85d, \uac8c\uc2dc\ud310, \ucf54\uba58\ud2b8, \ucc44\ud305 \ub4f1\ub4f1\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc774\ub984\uc774\ub098 \uc544\uc774\ucf58\uc744 \ud074\ub9ad\ud558\uba74 \uc0ac\uc6a9\uc790 \uacf5\uac1c \ud504\ub85c\ud544 \ud654\uba74\uc774 \uc5f4\ub9ac\ub294 \uac83\uc774\ub2e4. \uadf8\ub798\uc11c, \uac1c\ubc1c\ud558\uae30 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c <code>UserService.instance.showPublicProfileScreen</code> \uc744 \ud638\ucd9c\ud558\uba74, <code>DefaultPublicProfileScreen</code> \uc774 \ud638\ucd9c \ub418\ub3c4\ub85d \ud588\ub2e4. \ucee4\uc2a4\ud140 \ub514\uc790\uc778\uc744 \ud558\ub824\uba74 <code>UserService.instance.init(custom: ...)</code> \uc5d0\uc11c \uc218\uc815\ud558\uba74 \ub41c\ub2e4. \uc0ac\uc2e4 \ucee4\uc2a4\ud140 \ub514\uc790\uc778\uc744 \ucd94\ucc9c\ud558\uba70, \uacf5\uac1c \ud504\ub85c\ud544\uc5d0 \ub4e4\uc5b4\uac00\ub294 \uac01\uac01\uc758 \uc791\uc740 \uc704\uc82f\ub4e4\uc744 \uc7ac \ud65c\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <p>\uc608\uc81c - \ucd08\uae30\ud654\ub97c \ud1b5\ud558\uc5ec \uacf5\uac1c \ud504\ub85c\ud544 \ud654\uba74 \ucee4\uc2a4\ud140 \ub514\uc790\uc778 \uc791\uc5c5</p> <pre><code>UserService.instance.init(\n  customize: UserCustomize(\n    publicProfileScreen: (uid) =&gt; PublicProfileScreen(uid: uid),\n  ),\n);\n</code></pre> <p>\uc704\uc640 \uac19\uc774 \ud558\uba74, \uc0ac\uc6a9\uc790\uac00 \ud504\ub85c\ud544 \uc0ac\uc9c4 \ub4f1\uc744 \ud0ed\ud558\uba74, \ud654\uba74\uc5d0 <code>PublicProfileScreen</code> \uc774 \ub098\ud0c0\ub09c\ub2e4. \uc774 \uc704\uc82f\uc758 \ub514\uc790\uc778\uc744 \uc644\uc804\ud788 \ucc98\uc74c\ubd80\ud130 \uc0c8\ub85c \uc791\uc131\ud574\ub3c4 \ub418\uc9c0\ub9cc, <code>DefaultPublicProfileScreen</code> \uc744 \ubcf5\uc0ac\ud574\uc11c \uc218\uc815\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4.</p>"},{"location":"korean/user/#_7","title":"\uc704\uc82f","text":"<p><code>UpdateBirthday</code> \uc704\uc82f\uc744 \ud1b5\ud574\uc11c \uc190 \uc27d\uac8c \ud68c\uc6d0 \uc0dd\ub144\uc6d4\uc77c \uc815\ubcf4\ub97c \uc218\uc815 \ud560 \uc218 \uc788\ub2e4. \uc704\uc82f \ubb38\uc11c \ucc38\uace0</p>"},{"location":"korean/user/#firestore","title":"Firestore \ubbf8\ub7ec\ub9c1","text":"<p>Realtime Database \ub294 \uac80\uc0c9 \uae30\ub2a5\uc774 \ub9e4\uc6b0 \ubd80\uc871\ud558\ub2e4. \uadf8\ub798\uc11c \uc0ac\uc6a9\uc790 \ubb38\uc11c\ub97c Firestore \ub85c \ubbf8\ub7ec\ub9c1(\ubc31\uc5c5)\uc744 \ud574\uc11c, Firestore \ub97c \ud1b5\ud574\uc11c \uac80\uc0c9 \ud560 \uc218 \uc788\ub2e4. \uc774 \ubbf8\ub7ec\ub9c1 \uc791\uc5c5\uc740 Cloud function \uc744 \uc124\uce58\ud558\uba74 \ub41c\ub2e4. \ucc38\uace0, \uc124\uce58 \ubb38\uc11c.</p>"},{"location":"korean/user/#_8","title":"\uac70\ub9ac \uac80\uc0c9","text":"<p>\uac70\ub9ac\ub97c \uac80\uc0c9 \ud560 \ub54c \ubcf4\ub2e4 \uc0c1\uc138\ud55c \uac80\uc0c9\uc744 \ud558\ub824\uba74, SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4, Algolia, Typesense \ub4f1\uc758 Radius \uc218\uc2dd\uc744 \uc801\uc6a9\ud558\uc5ec \uac80\uc0c9\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7ec\ub098 Firebase \uc5d0\uc11c\ub294 Realtime Database \ub098 Firestore \uc5d0\uc11c\ub294 DB \ucc28\uc6d0\uc744 \ud1b5\ud574\uc11c Radius \uac80\uc0c9\uc744 \ud560 \uc218 \uc5c6\ub2e4.</p> <p>Firebase \ub97c \uc0ac\uc6a9\ud558\uba74\uc11c, Radius \uac80\uc0c9\uc744 \uaf2d \ud574\uc57c\uaca0\ub2e4\uba74 1. Location \uc815\ubcf4\ub97c Algolia \uc640 \uac19\uc740 3rd party \uac80\uc0c9 \uc5d4\uc9c4\uc5d0 \uc800\uc7a5\uc744 \ud558\ub358\uc9c0 2. \ub610\ub294 \uc0ac\uc6a9\uc790\uc758 \ubaa8\ub4e0 Location \uc815\ubcf4\ub97c \uc571 \ub0b4(SQLite \ub4f1)\uc5d0 \ubcf4\uad00\ud574 \ub193\uace0, Radius \uac80\uc0c9\uc744 \ud560 \uc218 \uc788\ub2e4. 3. \ub610\ub294 \uacf5\uc2dd\ubb38\uc11c: Firebase \uc9c0\uc5ed \ucffc\ub9ac\uc5d0\uc11c \uc124\uba85\ud558\ub4ef\uc774 Geohash \ub124\uc790\ub9ac \uc218\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc744 \uac00\uc9c4 \uc0ac\uc6a9\uc790\ub97c \uac00\uc838\uc640 \uc571 \ub0b4\uc5d0\uc11c \ubcf4\ub2e4 \uc815\ud655\ud558\uac8c distance \uacc4\uc0b0\uc744 \ud558\ub294 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774\uc640 \uac19\uc740 \uacbd\uc6b0 <code>\uac70\uc9d3\uc591\uc131</code>, <code>\uc5d0\uc9c0\ucf00\uc774\uc2a4</code>, <code>\ud544\uc694\uc5c6\ub294 \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\ub294 \ube44\uc6a9</code>\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4.</p> <p>Fireship \uc5d0\uc11c \uae30\ubcf8 \uc81c\uacf5\ud558\ub294 \uac70\ub9ac \uac80\uc0c9\uc740 \uc704\uc758 \uc138 \uac00\uc9c0 \ubc29\ubc95\uacfc\ub294 \uc870\uae08 \ub2e4\ub974\uc9c0\ub9cc \ub9e4\uc6b0 \ud3b8\ub9ac\ud55c \ubc29\ubc95\uc774\ub2e4.</p> <ul> <li>\uba3c\uc800 \uc571\uc774 \uc2e4\ud589\ub418\uba74 \uc0ac\uc6a9\uc790\uc758 \uc704/\uacbd\ub3c4 \uc815\ubcf4\ub97c \uc0ac\uc6a9\uc790 \ubb38\uc11c \ud544\ub4dc  <code>latitude</code>, <code>longitude</code> \uc5d0 \uc800\uc7a5\ud55c\ub2e4.</li> <li>\uadf8\ub7ec\uba74 fireship \uc774 \uc790\ub3d9\uc73c\ub85c geohash4,geohash5,geohash6,geohash7 \ub97c \uc800\uc7a5\ud55c\ub2e4.</li> <li> <p>\uadf8\ub9ac\uace0, \ud544\uc694\uc5d0 \ub530\ub77c Firestore \ubbf8\ub7ec\ub9c1\ub418\uac8c \ud55c\ub2e4.</p> </li> <li> <p>\uac80\uc0c9\uc744 \ud560 \ub54c, \ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\uc758 200 \ubbf8\ud130 \ub0b4\uc758 \uc0ac\uc6a9\uc790 \uac80\uc0c9\uc740 \ub85c\uadf8\uc778\uc744 \ud55c \uc0ac\uc6a9\uc790\uc758 geohash7 \uacfc DB \uc758 geohash7 \uc774 \uc77c\uce58\ud558\ub294 \uc0ac\uc6a9\uc790\ub97c \uac00\uc838\uc640 \ubcf4\uc5ec\uc8fc\uba74 \ub41c\ub2e4.</p> </li> <li>geohash6 \ub294 1km \uc774\ub0b4, geohash5 \ub294 5km \uc774\ub0b4, geohash4 \ub294 20km \uc774\ub0b4\uc758 \uc0ac\uc6a9\uc790\ub97c \uac80\uc0c9 \ud560 \uc218 \uc788\ub2e4.</li> </ul>"},{"location":"korean/user/#_9","title":"\uc88b\uc544\uc694","text":"<p>\ud14d\uc2a4\ud2b8 \ubc84\ud2bc\uc73c\ub85c \ud45c\uc2dc \ud560 \ub54c \uc544\ub798\uc640 \uac19\uc774 \ud560 \uc218 \uc788\ub2e4. \ub2e4\ub9cc, \uc88b\uc544\uc694 \uc22b\uc790 \uc99d\uac00\ub294 cloud function \uc5d0 \uc758\ud574\uc11c \ub3d9\uc791\ud558\ubbc0\ub85c, \uc2e4\uc2dc\uac04\uc73c\ub85c \ube60\ub974\uac8c \ud45c\uc2dc\ub418 \uc54a\ub294\ub370, \uc801\uc808\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud558\ub2e4.</p> <pre><code>ElevatedButton(\n  onPressed: () async {\n    await my?.like(uid);\n  },\n  child: Value(\n    path: Path.userField(uid, Field.noOfLikes),\n    builder: (v) =&gt; Text(\n      v == null || v == 0\n          ? T.like.tr\n          : v == 1\n              ? ('${T.like.tr} 1')\n              : '${T.likes.tr} ${v ?? ''}',\n    ),\n  ),\n),\n</code></pre>"},{"location":"korean/user/#_10","title":"\uc88b\uc544\uc694 \ubaa9\ub85d","text":"<p>\uc88b\uc544\uc694 \ubaa9\ub85d\uc740 \ub450\uac00\uc9c0\uac00 \uc788\ub2e4. - \uccab\uc9f8, \ub0b4\uac00 \uc88b\uc544\uc694 \ud55c \uc0ac\ub78c \ubaa9\ub85d. - \ub458\uc9f8, \ub098\ub97c \uc88b\uc544\uc694 \ud55c \uc0ac\ub78c \ubaa9\ub85d.</p> <p>\uc544\ub798\uc640 \uac19\uc774 \ucf54\ub529\uc744 \ud558\uba74 \ub41c\ub2e4.</p> <pre><code>import 'package:fireship/fireship.dart';\nimport 'package:flutter/material.dart';\n\nclass LikeScreen extends StatefulWidget {\n  const LikeScreen({super.key});\n\n  @override\n  State&lt;LikeScreen&gt; createState() =&gt; _LikeScreenState();\n}\n\nclass _LikeScreenState extends State&lt;LikeScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return DefaultTabController(\n      length: 2,\n      child: Scaffold(\n        appBar: AppBar(\n          toolbarHeight: 0,\n          bottom: const TabBar(\n            tabs: [\n              Tab(text: 'Who Likes Me'),\n              Tab(text: 'Who I Like'),\n            ],\n          ),\n        ),\n        body: const TabBarView(\n          children: [\n            WhoLikeMeListView(),\n            WhoILikeListView(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"korean/user/#_11","title":"\uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778 \ubc0f \ubb38\uc11c \uc900\ube44 \ud655\uc778","text":""},{"location":"korean/user/#authready","title":"AuthReady","text":"<p><code>AuthReady</code> \ub294 \uc0ac\uc6a9\uc790\uac00 Firebase \uc5d0 \ub85c\uadf8\uc778\uc744 \ud588\uc73c\uba74, <code>builder</code> \ucf5c\ubc31 \ud568\uc218\uac00 \ud638\ucd9c\ub418\uc5b4 \uc704\uc82f\uc744 \ud45c\uc2dc\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \ub85c\uadf8\uc778\uc744 \ud558\uc9c0 \uc54a\uc558\uc73c\uba74 <code>notLogin</code> \ucf5c\ubc31 \ud568\uc218\uac00 \uc2e4\ud589\ub41c\ub2e4. \ucc38\uace0\ub85c, Firebase Realtime Database \uc758 \uc0ac\uc6a9\uc790 \ubb38\uc11c\uac00 \ub85c\ub529\ub418\uc9c0 \uc54a\uc544\ub3c4, \uc774 \ud568\uc218\uc758 builder \uac00 \uc2e4\ud589\ub41c\ub2e4.</p> <p>\uc8fc\ub85c, \ud30c\uc774\uc5b4\ubca0\uc774\uc2a4\uc5d0 \ub85c\uadf8\uc778\uc744 \ud558\uc5ec \uc0ac\uc6a9\uc790 uid \uac00 \uc0ac\uc6a9 \uac00\ub2a5\ud55c\uc9c0 \ud655\uc778\uc744 \uc704\ud574\uc11c \uc4f4\ub2e4.</p>"},{"location":"korean/user/#mydocready","title":"MyDocReady","text":"<p><code>MyDocReady</code> \ub294 \uc0ac\uc6a9\uc790\uac00 Firebase \uc5d0 \ub85c\uadf8\uc778 \ud55c \ub2e4\uc74c, Realtime Database \uc5d0\uc11c \uc0ac\uc6a9\uc790 \ubb38\uc11c\ub97c \ub85c\ub529\ud588\ub294\uc9c0\ub97c \ud655\uc778 \ud560 \ub54c \uc0ac\uc6a9\ud55c\ub2e4.</p> <p>\ub0b4\ubd80\uc801\uc73c\ub85c \ub2e8\uc21c\ud788, [MyDoc] \uc704\uc82f\uc744 \uc0ac\uc6a9\ud558\uc5ec, \uc0ac\uc6a9\uc790 \ubb38\uc11c\uac00 \ub85c\ub529\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uba70, \uc0ac\uc6a9\uc790 \ubb38\uc11c\uac00 \ub85c\ub529\ub418\uc5c8\uc73c\uba74, <code>builder(UserModel)</code> \ub97c \uc2e4\ud589\ud558\uace0, \ub85c\ub529\uc774 \uc548\ub418\uc5c8\uc73c\uba74 [loading] \uc744 \ud55c\ub2e4.</p> <p>/// [MyDoc] \uc744 \uc0ac\uc6a9\ud558\uba74, builder(UserModel) \uac00 null \uc77c \uc218 \uc788\uc73c\ubbc0\ub85c, null \uccb4\ud06c\ub97c \ud574\uc57c \ud558\ub294\ub370, /// [MyDocReady] \ub294 builder(UserModel) \uac00 null \uc774 \uc544\ub2c8\ubbc0\ub85c \uc870\uae08 \ub354 \ud3b8\ub9ac\ud558\uac8c \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/user/#_12","title":"\ube14\ub7ed","text":"<ul> <li>\ube14\ub7ed\ub41c \uc0ac\uc6a9\uc790\ub294 <code>BlockListView</code> \ub85c \ubaa9\ub85d\uc73c\ub85c \ud45c\uc2dc \ud560 \uc218 \uc788\ub2e4.</li> <li>\ube14\ub7ed\ub41c \uacbd\uc6b0 \ubb38\uc790\uc5f4\ub85c \ud45c\uc2dc\ud558\ub294 \uacbd\uc6b0\ub294 <code>orBlock()</code> String extension \uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</li> <li>\uc704\uc82f\uc73c\ub85c \ud45c\uc2dc\ub97c \ud574\uc57c\ud558\ub294 \uacbd\uc6b0\ub294 <code>Blocked</code>\ub85c \ud558\uba74 \ub41c\ub2e4.</li> </ul> <p>\uc608\uc81c - \ucf54\uba58\ud2b8 \ubaa9\ub85d\uc5d0\uc11c \uc0ac\uc9c4\uc744 \ud45c\uc2dc\ud560 \ub54c, \uc0ac\uc6a9\uc790\uac00 \ucc28\ub2e8\ub418\uc5b4\uc838 \uc788\uc73c\uba74 \uc0ac\uc9c4\uc744 \ud45c\uc2dc\ud558\uc9c0 \uc54a\ub294\ub2e4.</p> <pre><code>Blocked(\n  uid: widget.comment.uid,\n  yes: () =&gt; SizedBox.fromSize(),\n  no: () =&gt; DisplayDatabasePhotos(\n    urls: widget.comment.urls,\n    path:\n        '${Path.comment(widget.post.id, widget.comment.id)}/${Field.urls}',\n  ),\n),\n</code></pre> <p>\ube14\ub7ed \ubc84\ud2bc\uc744 \ud45c\uc2dc\ud558\ub294 \uac83\uc740 \uc704\uc82f \ubb38\uc11c\ub97c \ucc38\uace0\ud55c\ub2e4.</p>"},{"location":"korean/widgets/","title":"\uc704\uc82f","text":"<p>fireship \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ubcf8 \uc704\uc82f\uc5d0 \ub300\ud55c \uc124\uba85\uc744 \ud55c\ub2e4.</p> <p>@TODO @thruthesky pub.dev API reference \ub97c \ubcf4\uace0 \uadf8\uacf3\uc5d0 \ub098\uc640 \uc788\ub294 \uc704\uc82f\ub4e4\uc758 \uc0ac\uc6a9\ubc95\uc744 \uc124\uba85\ud55c\ub2e4.</p>"},{"location":"korean/widgets/#labelfield","title":"LabelField","text":"<p>TextField \ub97c \uc880 \ub354 \uc4f0\uae30 \ud3b8\ud558\uac8c \ud574 \ub193\uc740 \uac83\uc774\ub2e4.</p>"},{"location":"korean/widgets/#updatebirthday","title":"UpdateBirthday","text":"<p>\ud68c\uc6d0 \uc815\ubcf4 \uc218\uc815 \ud398\uc774\uc9c0 \ub4f1\uc5d0\uc11c \ud68c\uc6d0\uc758 \uc0dd\ub144\uc6d4\uc77c \uc815\ubcf4\ub97c \ubcf4\uc5ec\uc8fc\uace0 \uc218\uc815\ud558\uac8c \ud558\ub824\uba74 <code>UpdateBirthday</code> \uc704\uc82f\uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4. lable \uacfc description \uc744 \uc904 \uc218 \uc788\ub2e4.</p> <p>\uc608\uc81c</p> <pre><code>UpdateBirthday(\n    label: '\uc0dd\ub144\uc6d4\uc77c',\n    description: '\ubcf8\uc778 \uc778\uc99d\uc5d0 \uc0ac\uc6a9\ub418\ubbc0\ub85c \uc62c\ubc14\ub978 \uc0dd\ub144/\uc6d4/\uc77c \uc815\ubcf4\ub97c \uc120\ud0dd\ud574 \uc8fc\uc138\uc694.',\n)\n</code></pre>"},{"location":"korean/widgets/#displayphotos","title":"DisplayPhotos \uc0ac\uc9c4 \ud45c\uc2dc","text":"<p>\ubc30\uc5f4\uc5d0 URL \uc744 \ub2f4\uc544\uc11c \uc804\ub2ec\ud558\uba74 \ud654\uba74\uc5d0 \uc0ac\uc9c4\uc744 \ud45c\uc2dc \ud574 \uc900\ub2e4.</p> <pre><code>DisplayPhotos(urls: List&lt;String&gt;.from(v ?? []))\n</code></pre>"},{"location":"korean/widgets/#_2","title":"\uc0ac\uc6a9\uc790 \ud45c\uc2dc","text":"<p>Tile \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c <code>UserTile</code> \uc744 \uc4f0\uba74 \ub41c\ub2e4. \uc0ac\uc6a9\uc790 \ubaa8\ub378\uc774 \uc788\uc73c\uba74 <code>UserTile(user: UserModel)</code> \uc640 \uac19\uc774 \ud45c\uc2dc\ud558\uba74 \ub418\uace0, \uc0ac\uc6a9\uc790 id \ub9cc \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, <code>UserTile.fromUid(uid)</code> \uc640 \uac19\uc774 \ud638\ucd9c\ud558\uba74 \ub41c\ub2e4.</p>"},{"location":"korean/widgets/#_3","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \ucc38\uace0","text":"<p>\ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\ub97c \ud3ec\ud568\ud55c \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \ud654\uba74\uc5d0 \ud45c\uc2dc \ud560 \ub54c\uc5d0\ub294 <code>UserDoc</code> \uc744 \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p> <p>UserDoc \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\ud0dc\ub85c \ud65c\uc6a9 \ud560 \uc218 \uc788\ub2e4.</p> <ul> <li>\uc0ac\uc6a9\uc790 \ubb38\uc11c\ub97c \uac00\uc838\uc640 \ud654\uba74\uc5d0 \ud45c\uc2dc\ud558\uae30</li> <li>\uc0ac\uc6a9\uc790 \ubb38\uc11c\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud574\uc11c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud558\uae30. DB \uc758 \uac12\uc774 \ubcc0\ud558\uba74 \ub2e4\uc2dc build.</li> <li>\uc0ac\uc6a9\uc790 \ubb38\uc11c \uc911 \ud2b9\uc815 \ud544\ub4dc \ud558\ub098\ub97c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud558\uae30</li> <li>\uc0ac\uc6a9\uc790 \ubb38\uc11c \uc911 \ud2b9\uc815 \ud544\ub4dc \ud558\ub098\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud574\uc11c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud558\uae30. DB \uc758 \uac12\uc774 \ubcc0\ud558\uba74 \ub2e4\uc2dc build \ud55c\ub2e4.</li> </ul> <p>\uc608\uc81c</p> <pre><code>UserDoc(uid: myUid!, builder: (user) =&gt; Text(user.displayName)),\nUserDoc.sync(uid: myUid!, builder: (user) =&gt; Text(user.displayName)),\nUserDoc.field(uid: myUid!, field: 'displayName', builder: (v) =&gt; Text(v.toString())),\nUserDoc.fieldSync(uid: myUid!, field: 'displayName',  builder: (v) =&gt; Text(v.toString())),\n</code></pre> <p>\ucc38\uace0\ub85c \uc2e4\uc2dc\uac04\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub294 <code>cacheId</code> \ub97c \ud1b5\ud574\uc11c \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\uc5d0 \uce90\uc2dc\ub97c \ud588\ub2e4\uac00 \ud654\uba74\uc5d0 \ube60\ub974\uac8c \ud45c\uc2dc \ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788, setState \ub97c \ud638\ucd9c\ud558\ub294 \uacbd\uc6b0 \ub4f1\uc5d0\uc11c \ud654\uba74 \ubc18\uc9dd\uc784\uc744 \uc904\uc77c \uc218 \uc788\ub2e4.</p> <p>\uc608\uc81c - <code>cacheId</code> \uc0ac\uc6a9</p> <pre><code>UserDisplayName(uid: uid, cacheId: 'chatRoom'),\n</code></pre>"},{"location":"korean/widgets/#_4","title":"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uce90\uc2dc","text":"<p>\ub54c\ub85c\ub294 \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \ud45c\uc2dc \ud55c \ub2e4\uc74c, setState \ub97c \ud638\ucd9c\ud558\uba74, \ud654\uba74\uc774 \ubc18\uc9dd \uac70\ub9ac\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \ub610\ub294 \uacc4\uc18d \ud574\uc11c DB \uc5d0 \uc811\uc18d\ud558\ub294 \uac83\uc774 \ub9c8\uc74c\uc5d0 \ub4e4\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc740 \uacbd\uc6b0, cacheId \ub97c \uc0ac\uc6a9\ud558\uba74, \ud574\ub2f9 cacheId \uc704\uce58\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 \uac12(\ub610\ub294 \ud544\ub4dc)\ub97c \uba54\ubaa8\ub9ac\uc5d0 \uce90\uc2dc\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4.</p> <pre><code>UserDoc(cacheId: 'home');\n</code></pre> <p>\ub610\ub294</p> <pre><code>UserDoc.field(\n    cacheId: cacheId,\n    uid: uid,\n    field: Field.displayName,\n    builder: (data) =&gt; Text(\n      data\n    ),\n  );\n</code></pre> <p>/// UserDoc( ... ) /// UserDoc.sync(uid: user.uid, field: 'displayName', builder: (data, $) =&gt; Text(data)), /// UserDoc.field( ... ) /// UserDoc.fieldSync( ...)</p>"},{"location":"korean/widgets/#_5","title":"\uc0ac\uc6a9\uc790 \uc774\ub984 \ud45c\uc2dc","text":"<p>\uc608\uc81c</p> <pre><code> UserDisplayName(\n  uid: userUid,\n  user: user,\n),\n</code></pre> <p>\uc608\uc81c - sync \ub97c \uc0ac\uc6a9\ud574\uc11c \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8\ub97c \ud560 \uc218 \uc788\ub2e4.</p> <pre><code> UserDisplayName.sync(\n  uid: userUid,\n  user: user,\n),\n</code></pre>"},{"location":"korean/widgets/#_6","title":"\uc0ac\uc6a9\uc790 \uc0ac\uc9c4 \ud45c\uc2dc","text":"<p>\uc608\uc81c - \uc0ac\uc6a9\uc790 \uc0ac\uc9c4 \ud45c\uc2dc</p> <pre><code>UserAvatar(uid: userUid, size: 100, radius: 40),\n</code></pre> <p>\uc5d0\uc81c - \uc0ac\uc6a9\uc790 \uc0ac\uc9c4 \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8\ud558\uc5ec \ud45c\uc2dc</p> <pre><code>UserAvatar.sync(uid: userUid, size: 100, radius: 40),\n</code></pre>"},{"location":"korean/widgets/#_7","title":"\uc0ac\uc6a9\uc790 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc0ac\uc9c4 \ud45c\uc2dc","text":"<p>\uc544\ub798\uc640 \uac19\uc774 \uac04\ub2e8\ud788 \ud45c\uc2dc \ud560 \uc218 \uc788\ub2e4.</p> <pre><code>UserBackgroundImage(\n  uid: userUid,\n  user: user,\n),\n</code></pre> <p>\ub9cc\uc57d, realtime update \uac00 \ud544\uc694\ud558\uba74 \uc544\ub798\uc640 \uac19\uc774 \ud55c\ub2e4.</p> <pre><code>UserBackgroundImage.sync(\n  uid: userUid,\n  user: user,\n),\n</code></pre>"},{"location":"korean/widgets/#_8","title":"\uc0ac\uc6a9\uc790 \uc0c1\ud0dc \uba54\uc138\uc9c0 \ud45c\uc2dc","text":"<p>\uc608\uc81c</p> <pre><code>UserStateMessage(uid: ..., user: user),\n</code></pre> <p>\uc608\uc81c - sync \ub97c \ud1b5\ud55c \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8</p> <pre><code>UserStateMessage.sync(\n  uid: userUid,\n  user: user,\n),\n</code></pre>"},{"location":"korean/widgets/#_9","title":"\ubc84\ud2bc","text":"<p>\ubcf8 \ud56d\ubaa9\uc5d0\uc11c\ub294 \uac01\uc885 \ubc84\ud2bc\ub4e4\uc744 \uc124\uba85\ud55c\ub2e4. \ub514\uc790\uc778\uc774 \ub9c8\uc74c\uc5d0 \ub4e4\uc9c0 \uc54a\uc73c\uba74 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uc218\uc815\ud558\uc5ec \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.</p>"},{"location":"korean/widgets/#_10","title":"\uc88b\uc544\uc694 \ubc84\ud2bc","text":"<pre><code>LikeButton(uid: userUid, user: user),\n</code></pre>"},{"location":"korean/widgets/#_11","title":"\ubd81\ub9c8\ud06c \ubc84\ud2bc","text":"<pre><code>BookmarkButton(uid: userUid),\n</code></pre>"},{"location":"korean/widgets/#_12","title":"\ucc44\ud305 \ubc84\ud2bc","text":"<pre><code>ChatButton(uid: uid),\n</code></pre>"},{"location":"korean/widgets/#_13","title":"\uc2e0\uace0 \ubc84\ud2bc","text":"<p>\uc2e0\uace0 \ubc84\ud2bc\uc740 \uc0ac\uc6a9\uc790, \uae00, \ucf54\uba58\ud2b8, \ucc44\ud305 \ub4f1\uc744 \uc2e0\uace0 \ud560 \ub54c \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub2e4.</p> <p>\uc608\uc81c - \uc0ac\uc6a9\uc790 \uc2e0\uace0</p> <pre><code>ReportButton(uid: userUid),\n</code></pre>"},{"location":"korean/widgets/#_14","title":"\ucc28\ub2e8 \ubc84\ud2bc","text":"<pre><code>BlockButton(uid: userUid),\n</code></pre>"},{"location":"korean/address/korean_address/","title":"\ud55c\uad6d \uc8fc\uc18c \ucc3e\uae30","text":"<p><code>KoreanSiGunGuSelector</code> \uc704\uc82f\uc744 \ud1b5\ud574 \ud55c\uad6d\uc758 \uc2dc/\ub3c4\ub97c \uba3c\uc800 \uc120\ud0dd\ud55c \ub2e4\uc74c, \uc2dc\uad70\uad6c\ub97c \uc120\ud0dd \ud560 \uc218 \uc788\ub294 \uc704\uc82f\uc774\ub2e4. \uc2dc/\ub3c4 \uc9c0\uc5ed\uc740 \uc18c\uc2a4 \ucf54\ub4dc \ub0b4\uc5d0 \uae30\ub85d\ub418\uc5b4 api \ud638\ucd9c \uc5c6\uc774 \ubcf4\uc5ec\uc900\ub2e4. \ucc38\uace0\ub85c, \uc2dc/\uad70/\uad6c \ud558\uc704\uc758 \uc74d/\uba74/\ub3d9\uc740 \uc120\ud0dd\uc740 \uc548\ub41c\ub2e4.</p> <p>\uc2dc/\ub3c4 \uc9c0\uc5ed\uc774\ub780, \uc11c\uc6b8, \uacbd\ub0a8 \ub4f1\uacfc \uac19\uc774 \ud2b9\ubcc4\uc2dc, \uad11\uc5ed\uc2dc\ub098 \ud314\ub3c4\ub97c \uac00\ub974\ud0a4\ub294 \uac83\uc774\uba70, \uc2dc/\uad70/\uad6c\ub780 \uae40\ud574\uc2dc, \uae40\ud574\uad70, \uac15\ub0a8\uad6c\uc640 \uac19\uc774 \uc2dc/\ub3c4 \ub0b4(\ud558\uc704)\uc758 \uc9c0\uc5ed\uc744 \ub9d0\ud55c\ub2e4.</p> <p>\uac01 \uc9c0\uc5ed\uc5d0\ub294 \ucf54\ub4dc\uac00 \uc788\ub294\ub370 <code>sidoCode</code> \ub294 \uc2dc/\ub3c4\ub97c \uac00\ub974\ud0a4\ub294 \ucf54\ub4dc\uc774\ub2e4. <code>sigunguCode</code> \ub294 \uc2dc/\uad70/\uad6c\ub97c \uac00\ub974\ud0a4\ub294 \ucf54\ub4dc\uc774\ub2e4.</p> <p>DB \uc5d0 \uc800\uc7a5 \ud560 \ub54c, \ubb38\uc790\uc5f4\ub85c \ub41c \uc2dc/\uad70/\uad6c \uc815\ubcf4\uac00 \uc544\ub2cc sidoCode \uc640 sigunguCode \uc22b\uc790\ub97c \uc800\uc7a5\ud574\uc57c \ud55c\ub2e4. \uadf8\ub798\uc57c DB \uc5d0\uc11c \uac80\uc0c9(\ud544\ud130\ub9c1)\uc744 \ud574\uc57c \ud558\ub294 \uacbd\uc6b0, \uc0ac\uc6a9\uc790\uac00 \uc601\ubb38\uc774\ub098 \ud55c\uae00\ub85c \uc9c0\uc5ed\uc744 \uc120\ud0dd\ud55c \ub2e4\uc74c, \uac80\uc0c9\uc744 \ud560 \uc218 \uc788\ub2e4.</p> <p>\ucc38\uace0\ub85c \ud604\uc7ac\ub294 siDo, siGunGu \ud544\ub4dc\ub97c \ub450\uac1c\ub85c \uc800\uc7a5\ud558\ub294\ub370, \ud544\uc694\ud558\uba74 \ucd94\uac00\ub85c \ub450\uac1c\ub97c \ud569\uccd0 \uc800\uc7a5 \ud560 \uc218 \ub3c4 \uc788\ub2e4.</p> <p>\ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf4\uace0 \ubcf5\uc0ac\ud558\uc5ec \uc218\uc815\ud574\uc11c \uc0ac\uc6a9\ud55c\ub2e4.</p>"},{"location":"korean/address/korean_address/#api-key","title":"Api Key","text":"<p>\ud55c\uad6d \uad00\uad11 \uacf5\uc0ac API \ub294 Data.go.kr \uacf5\uacf5 API \uc5d0 \uc18d\ud55c\ub2e4. \uadf8\ub798\uc11c data.go.kr \uc5d0 \uc81c\uacf5\ud558\ub294 api \ud0a4\ub97c \uc4f0\uba74 \ub418\ub294\ub370, \ub85c\uadf8\uc778\ud558\uba74 \ub9c8\uc774\ud398\uc774\uc9c0\uc5d0\uc11c \ud0a4 \uac12\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4.</p>"},{"location":"korean/address/korean_address/#_2","title":"\uc9c0\uc6d0 \uc5b8\uc5b4","text":"<p>\ud55c\uad6d\uc5b4\uc640 \uc601\uc5b4\ub9cc \uc9c0\uc6d0\ud55c\ub2e4. \ud55c\uad6d \uad00\uad11 \uacf5\uc0ac API \ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc911\uad6d\uc5b4\ub098 \uc77c\ubcf8\uc5b4 \uc678\uc5d0 \ub2e4\ub978 \uc5b8\uc5b4\ub3c4 \uc9c0\uc6d0\ud558\ub294\ub370, \uc2dc/\ub3c4 \uc815\ubcf4\ub294 \uc0ac\uc6a9 \uac00\ub2a5\ud55c\uc9c0 \uc0b4\ud3b4\ubcf4\uc9c0 \uc54a\uc558\ub2e4.</p>"},{"location":"korean/address/korean_address/#_3","title":"\uc608\uc81c","text":"<ul> <li><code>languageCode</code> \uc5d0\ub294 <code>ko</code> \uc640 <code>en</code> \ub9cc \uc9c0\uc6d0\ub41c\ub2e4.</li> <li><code>onChangedSiDoCode</code> \ub294 <code>\uc2dc/\ub3c4</code> \ub97c \uc120\ud0dd\ud558\uba74 \ud638\ucd9c\ub418\ub294 \ucf5c\ubc31\ud568\uc218\uc774\ub2e4.</li> <li><code>onChangedSiGunGuCode</code> \ub294 <code>\uc2dc/\uad70/\uad6c</code> \ub97c \uc120\ud0dd\ud558\uba74 \ud638\ucd9c\ub418\ub294 \ucf5c\ubc31\ud568\uc218\uc774\ub2e4.</li> </ul> <pre><code>KoreanSiGunGuSelector(\n    languageCode: 'en',\n    onChangedSiDoCode: (siDo) {\n        dog('\uc2dc/\ub3c4: $siDo');\n    },\n    onChangedSiGunGuCode: (siDo, siGunGu) {\n        dog('\uc2dc/\uad70/\uad6c $siDo, $siGunGu DB \uc5d0 \uc800\uc7a5 \ud560 \uac12: ${'${siDo.code}-${siGunGu.code}'}');\n    },\n),\n</code></pre>"},{"location":"korean/address/korean_address/#_4","title":"\uae30\ud0c0 \ud568\uc218","text":"<ul> <li><code>getSiDo</code> \ud568\uc218\ub97c \ud1b5\ud574\uc11c \ud55c\uad6d\uc5b4 \ub610\ub294 \uc601\uc5b4\ub85c \ub41c \uc2dc/\ub3c4 \ubaa9\ub85d\uc744 \uac00\uc838 \uc62c \uc218 \uc788\ub2e4.</li> </ul>"},{"location":"korean/address/korean_address/#_5","title":"\uc0ac\uc6a9\ubc95","text":"<p>\ud68c\uc6d0 \uc815\ubcf4\uc5d0 region code \uc815\ubcf4\ub97c \uc800\uc7a5 \ud560 \ub54c\uc5d0\ub294 <code>siDo</code> \uc5d0 \uc2dc/\ub3c4 \ucf54\ub4dc, <code>siGunGu</code> \uc5d0 \uc2dc/\uad70/\uad6c \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.</p>"}]}